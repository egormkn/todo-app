name: CI Workflow

on:
  push:
    branches: [ main ]
    paths-ignore:
    - 'README.md'
  pull_request:
    branches: [ main ]

jobs:
  client:
    name: Build and test client with Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v2
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run build
    - name: Run tests
      run: npm run test:coverage
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      if: ${{ matrix.node-version == '16.x' }}
      with:
        name: client-dist
        path: client/dist/
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v2
      if: ${{ matrix.node-version == '16.x' }}
      with:
        name: client-coverage
        path: client/coverage/

  server:
    name: Build and test server with Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v2
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run build
    - name: Run tests
      run: npm run test:coverage
    - name: Run E2E tests
      run: npm run test:e2e
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      if: ${{ matrix.node-version == '16.x' }}
      with:
        name: server-dist
        path: server/dist/
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v2
      if: ${{ matrix.node-version == '16.x' }}
      with:
        name: server-coverage
        path: server/coverage/

  e2e:
    name: Run E2E tests with Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: e2e
    strategy:
      matrix:
        node-version: [14.x, 16.x]
        tool: [cypress, playwright]
    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v2
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: e2e/package-lock.json
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright browsers
      if: ${{ matrix.tool == 'playwright' }}
      run: npx playwright install-deps && npx playwright install
    - name: Run tests with ${{ matrix.tool }}
      run: npm run test:${{ matrix.tool }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [client, server]
    strategy:
      matrix:
        node-version: [16.x]
        ruby-version: [2.6]
    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v2
    - name: Setup Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        working-directory: docs
        bundler-cache: true
    - name: Build documentation
      run: bundle exec jekyll build --destination ./_site/docs/
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install compodoc
      run: npm install -g @compodoc/compodoc
    - name: Generate client documentation
      working-directory: client
      run: npm run docs -- --output ../docs/_site/docs/client/
    - name: Generate server documentation
      working-directory: server
      run: npm run docs -- --output ../docs/_site/docs/server/
    - name: Download artifacts (client coverage)
      uses: actions/download-artifact@v2
      with:
        name: client-coverage
        path: docs/_site/coverage/client
    - name: Download artifacts (client coverage)
      uses: actions/download-artifact@v2
      with:
        name: server-coverage
        path: docs/_site/coverage/server
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_site/