name: CI Workflow

on:
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
  pull_request:
    branches: [main]

jobs:
  client:
    name: Build and test client (Node.js ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm run test:coverage
      - name: Upload artifacts (client-allure-xml)
        uses: actions/upload-artifact@v2
        if: ${{ matrix.node-version == '16.x' }}
        with:
          name: client-allure-xml
          path: client/allure/xml/
      - name: Upload artifacts (client-dist-browser)
        uses: actions/upload-artifact@v2
        if: ${{ matrix.node-version == '16.x' }}
        with:
          name: client-dist-browser
          path: client/dist/browser/
      - name: Upload artifacts (client-dist-server)
        uses: actions/upload-artifact@v2
        if: ${{ matrix.node-version == '16.x' }}
        with:
          name: client-dist-server
          path: client/dist/server/
      - name: Upload artifacts (client-coverage)
        uses: actions/upload-artifact@v2
        if: ${{ matrix.node-version == '16.x' }}
        with:
          name: client-coverage
          path: client/coverage/

  server:
    name: Build and test server (Node.js ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: server/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm run test:coverage
      - name: Run end-to-end tests
        run: npm run test:e2e
      - name: Upload artifacts (server-dist)
        uses: actions/upload-artifact@v2
        if: ${{ matrix.node-version == '16.x' }}
        with:
          name: server-dist
          path: server/dist/
      - name: Upload artifacts (server-coverage)
        uses: actions/upload-artifact@v2
        if: ${{ matrix.node-version == '16.x' }}
        with:
          name: server-coverage
          path: server/coverage/

  e2e:
    name: Run end-to-end tests (Node.js ${{ matrix.node-version }}, ${{ matrix.tool.name }})
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: e2e
    strategy:
      matrix:
        node-version: [14.x, 16.x]
        tool:
          - name: Cypress
            command: test:cypress
          - name: Playwright
            command: test:playwright
            before-command: npx playwright install-deps && npx playwright install
          - name: WebdriverIO + Selenoid
            command: test:selenoid
            before-command: ./webdriverio/selenoid/start.sh
            after-command: ./webdriverio/selenoid/stop.sh
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: e2e/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Initialize ${{ matrix.tool.name }}
        if: matrix.tool.before-command
        run: ${{ matrix.tool.before-command }}
      - name: Run end-to-end tests with ${{ matrix.tool.name }}
        run: npm run ${{ matrix.tool.command }}
      - name: Cleanup ${{ matrix.tool.name }}
        if: matrix.tool.after-command
        run: ${{ matrix.tool.after-command }}
      - name: Upload artifacts (e2e-allure-xml)
        uses: actions/upload-artifact@v2
        if: matrix.tool.name == 'WebdriverIO + Selenoid' && matrix.node-version == '16.x'
        with:
          name: e2e-allure-xml
          path: e2e/webdriverio/allure/

  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v2
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          working-directory: docs
          bundler-cache: true
      - name: Build documentation
        run: bundle exec jekyll build --baseurl "/todo-app/docs"
        working-directory: docs
      - name: Upload artifacts (docs)
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/_site/
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install compodoc
        run: npm install -g @compodoc/compodoc
      - name: Generate client documentation
        working-directory: client
        run: npm run docs
      - name: Generate server documentation
        working-directory: server
        run: npm run docs
      - name: Upload artifacts (client-docs)
        uses: actions/upload-artifact@v2
        with:
          name: client-docs
          path: client/docs/
      - name: Upload artifacts (server-docs)
        uses: actions/upload-artifact@v2
        with:
          name: server-docs
          path: server/docs/

  allure:
    name: Generate Allure report
    runs-on: ubuntu-latest
    needs: [client, server, e2e]
    steps:
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install Allure
        run: npm install -g allure-commandline
      - name: Download artifacts (client-allure-xml)
        uses: actions/download-artifact@v2
        with:
          name: client-allure-xml
          path: client/allure/xml
      - name: Generate Allure report
        run: allure generate -o allure/client client/allure/xml
      - name: Download artifacts (e2e-allure-xml)
        uses: actions/download-artifact@v2
        with:
          name: e2e-allure-xml
          path: e2e/allure/xml
      - name: Generate Allure report
        run: allure generate -o allure/e2e e2e/allure/xml
      - name: Upload artifacts (allure)
        uses: actions/upload-artifact@v2
        with:
          name: allure
          path: allure/

  deploy-docs:
    name: Deploy documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: [client, server, docs, allure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download artifacts (client-dist-browser)
        uses: actions/download-artifact@v2
        with:
          name: client-dist-browser
          path: ./
      - name: Download artifacts (allure)
        uses: actions/download-artifact@v2
        with:
          name: allure
          path: allure/
      - name: Download artifacts (client-coverage)
        uses: actions/download-artifact@v2
        with:
          name: client-coverage
          path: coverage/client
      - name: Download artifacts (server-coverage)
        uses: actions/download-artifact@v2
        with:
          name: server-coverage
          path: coverage/server
      - name: Download artifacts (docs)
        uses: actions/download-artifact@v2
        with:
          name: docs
          path: docs/
      - name: Download artifacts (client-docs)
        uses: actions/download-artifact@v2
        with:
          name: client-docs
          path: docs/client/
      - name: Download artifacts (server-docs)
        uses: actions/download-artifact@v2
        with:
          name: server-docs
          path: docs/server/
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./

  deploy:
    name: Build Docker image and deploy to Heroku
    runs-on: ubuntu-latest
    needs: [client, server, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      HEROKU_APP_NAME: egormkn-todo-app
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Restore Docker layers from cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Heroku Container Registry
        uses: docker/login-action@v1
        with:
          registry: registry.heroku.com
          username: ${{ secrets.HEROKU_USERNAME }}
          password: ${{ secrets.HEROKU_API_KEY }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/todo-app:latest
            registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move cache (see https://github.com/docker/build-push-action/issues/252)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Print image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
