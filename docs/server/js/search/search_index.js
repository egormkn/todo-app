var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Account.html",[0,0.142,1,1.668]],["body/classes/Account.html",[0,0.164,1,2.508,2,1.138,3,0.201,4,0.176,5,0.176,6,3.61,7,2.014,8,3.364,9,0.281,10,0.826,11,3.364,12,2.035,13,0.468,14,1.505,15,0.02,16,2.141,17,5.489,18,5.489,19,0.707,20,4.21,21,1.274,22,6.712,23,4.21,24,3.893,25,4.21,26,3.61,27,2.319,28,4.21,29,0.292,30,2.92,31,2.92,32,4.707,33,3.61,34,1.817,35,3.215,36,4.21,37,4.21,38,5.489,39,0.201,40,4.21,41,0.014,42,0.014]],["title/interfaces/AccountInterface.html",[8,2.011,43,1.576]],["body/interfaces/AccountInterface.html",[1,2.611,3,0.214,4,0.187,5,0.187,8,3.147,9,0.299,10,0.859,11,3.649,12,2.083,13,0.486,14,1.387,15,0.02,21,1.46,24,4.223,29,0.273,39,0.301,41,0.015,42,0.015,43,2.715,44,2.855,45,3.106,46,2.311,47,5.713,48,2.192,49,4.362,50,3.841,51,3.841,52,1.326,53,2.855,54,3.841,55,2.855,56,2.467]],["title/classes/AngularUniversalFilter.html",[0,0.142,57,2.788]],["body/classes/AngularUniversalFilter.html",[0,0.15,2,1.04,3,0.184,4,0.161,5,0.161,7,1.897,9,0.257,13,0.346,15,0.02,19,0.565,21,1.356,29,0.279,39,0.184,41,0.013,42,0.013,52,1.45,57,3.949,58,5.008,59,3.299,60,1.626,61,5.841,62,5.841,63,1.263,64,5.008,65,1.546,66,3.847,67,6.516,68,5.841,69,6.246,70,3.847,71,1.263,72,0.974,73,1.263,74,5.841,75,1.985,76,5.171,77,5.355,78,4.05,79,6.246,80,3.847,81,3.847,82,0.893,83,3.847,84,0.806,85,1.866,86,2.119,87,3.847,88,1.985,89,3.847,90,1.546,91,0.872,92,3.847,93,3.847,94,3.847,95,2.849,96,3.847,97,3.847,98,3.847,99,3.847,100,2.452,101,2.452,102,3.847,103,3.847]],["title/modules/AppModule.html",[104,1.884,105,2.532]],["body/modules/AppModule.html",[0,0.154,3,0.189,4,0.165,5,0.165,15,0.02,29,0.339,34,1.705,39,0.189,41,0.014,42,0.014,84,0.827,85,1.916,100,2.518,101,2.518,104,2.716,105,4.972,106,2.176,107,2.9,108,3.387,109,3.387,110,4.31,111,4.31,112,3.995,113,3.355,114,2.518,115,2.518,116,3.951,117,3.65,118,3.387,119,2.176,120,5.264,121,3.017,122,2.334,123,3.65,124,3.65,125,3.387,126,3.951,127,3.951,128,3.951,129,3.387,130,3.951,131,3.951,132,3.951,133,3.951,134,3.951,135,2.417,136,3.951,137,3.951,138,3.387,139,1.45,140,3.951,141,3.951,142,3.951]],["title/classes/AppValidationPipe.html",[0,0.142,124,2.532]],["body/classes/AppValidationPipe.html",[0,0.194,2,1.35,3,0.239,4,0.208,5,0.208,15,0.019,19,0.546,29,0.239,39,0.239,41,0.016,42,0.016,60,1.923,65,1.976,84,1.046,124,4.241,135,2.885,143,5.244,144,4.283,145,6.61,146,4.995,147,2.283,148,4.995,149,4.995,150,4.995,151,4.995,152,2.577,153,4.995,154,4.995,155,4.995]],["title/controllers/AuthController.html",[156,2.011,157,2.532]],["body/controllers/AuthController.html",[0,0.105,3,0.129,4,0.113,5,0.113,9,0.181,13,0.4,14,1.386,15,0.02,16,1.887,19,0.623,29,0.329,39,0.129,41,0.01,42,0.01,48,2.274,52,1.324,63,0.985,71,1.394,72,1.074,73,1.394,82,1.324,84,0.567,91,0.457,139,2.566,156,1.492,157,2.796,158,1.492,159,2.323,160,2.068,161,3.07,162,3.457,163,4.032,164,4.032,165,3.457,166,3.457,167,2.709,168,2.709,169,2.846,170,2.709,171,3.142,172,2.709,173,2.709,174,2.709,175,2.709,176,2.709,177,2.709,178,2.323,179,2.709,180,2.709,181,2.323,182,3.812,183,2.709,184,2.709,185,2.323,186,2.323,187,4.032,188,2.068,189,1.6,190,1.169,191,2.201,192,1.6,193,2.709,194,3.079,195,2.709,196,2.221,197,1.878,198,2.709,199,2.709,200,2.323,201,2.068,202,2.323,203,2.323,204,1.878,205,2.709,206,4.816,207,1.878,208,2.709,209,1.878,210,2.709,211,2.709,212,2.709,213,0.896,214,2.709,215,2.709,216,2.709,217,6.364,218,2.943,219,5.335,220,1.394,221,5.335,222,2.709,223,2.709,224,2.709,225,2.709,226,2.709,227,2.709,228,2.709,229,2.709,230,2.709,231,2.709,232,2.709,233,2.709]],["title/modules/AuthModule.html",[104,1.884,110,2.327]],["body/modules/AuthModule.html",[0,0.137,3,0.168,4,0.146,5,0.146,15,0.02,29,0.338,39,0.168,41,0.013,42,0.013,84,0.735,100,3.095,104,2.505,106,1.933,107,2.675,110,4.682,112,3.856,113,3.095,114,2.236,115,2.236,117,3.862,118,4.775,119,1.933,129,3.008,138,3.008,139,1.287,157,3.862,158,2.675,191,3.264,192,2.073,234,3.008,235,3.508,236,3.008,237,3.008,238,4.161,239,4.161,240,4.161,241,4.161,242,3.508,243,4.164,244,3.831,245,3.508,246,2.679,247,4.856,248,1.514,249,3.508,250,3.508,251,3.508,252,3.508,253,3.508,254,3.508,255,3.508,256,3.008,257,3.508,258,3.508,259,3.508,260,3.508,261,3.508]],["title/injectables/AuthService.html",[191,1.668,262,0.651]],["body/injectables/AuthService.html",[0,0.072,1,2.781,3,0.144,4,0.077,5,0.077,9,0.124,10,0.452,12,1.503,13,0.407,14,1.42,15,0.02,19,0.633,29,0.284,39,0.089,41,0.008,42,0.008,48,2.117,52,1.537,63,0.734,65,0.898,71,1.37,72,1.146,73,1.37,82,1.25,84,0.389,90,1.529,91,0.863,119,1.022,135,0.758,139,2.505,162,2.576,165,2.576,166,2.576,169,3.022,171,1.022,178,2.576,181,2.576,182,3.26,190,0.801,191,1.373,200,1.591,201,1.417,202,1.591,203,1.591,218,3.14,220,1.316,244,3.26,246,1.417,262,0.536,263,0.718,264,1.591,265,1.777,266,3.785,267,2.576,268,3.004,269,3.004,270,1.591,271,5.385,272,2.966,273,3.004,274,1.856,275,3.781,276,1.856,277,2.719,278,2.576,279,1.546,280,1.856,281,3.004,282,1.856,283,3.004,284,1.856,285,3.004,286,1.856,287,1.856,288,1.856,289,0.718,290,0.758,291,1.983,292,3.004,293,1.287,294,1.417,295,2.576,296,1.417,297,1.856,298,1.856,299,1.417,300,1.183,301,1.849,302,2.42,303,1.591,304,3.516,305,1.856,306,1.856,307,3.004,308,1.856,309,1.856,310,1.856,311,4.351,312,1.775,313,3.004,314,1.856,315,1.856,316,3.004,317,1.856,318,1.856,319,1.856,320,1.856,321,1.856,322,3.004,323,1.856,324,1.856,325,1.856,326,3.785,327,3.004,328,3.004,329,3.004,330,1.856,331,1.591,332,1.856,333,1.856,334,1.856,335,3.004,336,3.004,337,3.004,338,1.856,339,2.576,340,3.246,341,3.785,342,1.591,343,1.856,344,1.856,345,1.856,346,1.856,347,3.004,348,1.591,349,1.856,350,1.856,351,1.591,352,1.856,353,1.591,354,1.856,355,1.856]],["title/guards/AuthenticationGuard.html",[356,2.532,357,2.532]],["body/guards/AuthenticationGuard.html",[0,0.175,3,0.215,4,0.188,5,0.188,7,1.653,9,0.301,10,0.678,13,0.301,15,0.02,19,0.493,29,0.274,39,0.215,41,0.015,42,0.015,52,1.331,63,1.401,71,1.101,72,0.849,73,1.101,82,1.046,84,0.944,86,2.482,88,2.325,90,1.714,91,0.968,95,2.482,220,1.101,262,1.023,265,2.576,291,1.417,357,3.977,358,2.873,359,3.864,360,3.426,361,2.959,362,3.22,363,4.506,364,2.185,365,2.959,366,4.506,367,3.125,368,4.379,369,3.441,370,4.506,371,3.656]],["title/guards/AuthorizationGuard.html",[356,2.532,372,2.532]],["body/guards/AuthorizationGuard.html",[0,0.149,3,0.183,4,0.16,5,0.16,7,1.408,9,0.256,10,0.577,13,0.345,14,1.081,15,0.02,19,0.564,29,0.311,39,0.183,41,0.013,42,0.013,48,1.708,52,1.449,63,1.261,65,1.147,71,1.261,72,0.972,73,1.261,82,0.891,84,0.803,85,1.861,86,2.114,88,1.98,90,1.543,91,0.984,95,2.114,135,1.567,190,1.656,213,1.27,220,1.261,262,0.921,265,2.382,291,1.207,358,2.446,360,3.219,361,2.663,362,3.025,364,1.861,365,2.663,367,2.661,372,3.58,373,3.29,374,2.267,375,3.962,376,3.837,377,3.837,378,2.446,379,2.93,380,3.837,381,3.837,382,3.58,383,3.837,384,2.267,385,2.267,386,3.837,387,3.29,388,2.661,389,5.162,390,3.837,391,3.837,392,5.162]],["title/classes/ConnectAccountDto.html",[0,0.142,275,2.157]],["body/classes/ConnectAccountDto.html",[0,0.195,1,3.027,2,0.996,3,0.317,4,0.154,5,0.154,7,1.842,8,2.029,9,0.246,10,0.755,11,3.537,12,2.019,13,0.468,14,1.285,15,0.02,16,2.03,19,0.671,21,1.166,24,3.642,29,0.273,35,2.813,39,0.176,41,0.013,42,0.013,48,1.219,53,2.348,56,2.029,91,1.215,190,1.59,275,2.967,393,5.505,394,2.555,395,2.967,396,4.902,397,3.159,398,4.306,399,3.642,400,3.159,401,5.261,402,3.201,403,3.159,404,4.306,405,4.306,406,4.306,407,3.159,408,3.159,409,1.683,410,3.201,411,3.159]],["title/classes/CreateAccountDto.html",[0,0.142,412,2.327]],["body/classes/CreateAccountDto.html",[0,0.195,1,3.027,2,0.996,3,0.317,4,0.154,5,0.154,7,1.842,8,2.029,9,0.246,10,0.755,11,3.537,12,2.019,13,0.468,14,1.285,15,0.02,16,2.03,19,0.671,21,1.166,24,3.642,29,0.273,35,2.813,39,0.176,41,0.013,42,0.013,48,1.219,53,2.348,56,2.029,91,1.215,190,1.59,394,2.555,395,2.967,396,4.902,397,3.159,398,4.306,399,3.642,400,3.159,401,5.261,402,3.201,403,3.159,404,4.306,405,4.306,406,4.306,407,3.159,408,3.159,409,1.683,410,3.201,411,3.159,412,3.201,413,4.902]],["title/classes/CreateTaskDto.html",[0,0.142,414,2.157]],["body/classes/CreateTaskDto.html",[0,0.221,2,1.196,3,0.212,4,0.185,5,0.185,9,0.296,10,0.853,13,0.418,15,0.019,16,2.069,19,0.684,21,1.531,29,0.212,39,0.212,41,0.015,42,0.015,46,3.227,91,1.224,279,2.315,409,2.022,414,3.349,415,5.036,416,3.379,417,3.996,418,4.337,419,3.445,420,4.573,421,4.425,422,5.363,423,4.425,424,3.069,425,4.425,426,3.069,427,3.069]],["title/classes/CreateTaskListDto.html",[0,0.142,428,2.157]],["body/classes/CreateTaskListDto.html",[0,0.238,2,1.355,3,0.24,4,0.209,5,0.209,9,0.335,10,0.922,13,0.335,15,0.019,16,1.658,19,0.548,21,1.423,29,0.24,39,0.24,41,0.016,42,0.016,91,1.117,409,2.291,415,4.679,417,3.647,419,3.647,420,4.25,424,3.476,426,3.476,427,3.476,428,3.621,429,2.972,430,3.827,431,5.012]],["title/classes/CreateUserDto.html",[0,0.142,432,2.327]],["body/classes/CreateUserDto.html",[0,0.168,2,0.803,3,0.142,4,0.124,5,0.124,7,1.583,9,0.199,10,0.649,13,0.373,14,1.368,15,0.02,16,1.845,19,0.61,21,1.517,29,0.206,39,0.142,41,0.011,42,0.011,72,1.201,73,1.596,91,1.169,101,2.751,301,2.576,302,2.874,312,3.935,396,4.524,399,3.776,402,2.751,409,1.358,410,3.555,413,4.524,432,2.751,433,2.268,434,5.578,435,4.286,436,4.783,437,2.547,438,4.691,439,2.751,440,5.08,441,2.971,442,2.971,443,2.268,444,4.259,445,3.295,446,4.259,447,2.971,448,2.268,449,4.259,450,3.295,451,3.295,452,3.295,453,3.295,454,3.295,455,3.295,456,3.295,457,3.295,458,2.971,459,2.547,460,2.547,461,2.547,462,1.637,463,2.06,464,2.06,465,3.295,466,2.751,467,2.547,468,2.547,469,2.547,470,2.547,471,2.547,472,2.547]],["title/injectables/GoogleAuthGuard.html",[204,2.532,262,0.651]],["body/injectables/GoogleAuthGuard.html",[0,0.136,3,0.287,4,0.146,5,0.146,9,0.233,10,0.728,13,0.371,14,1.319,15,0.02,19,0.656,29,0.287,39,0.167,41,0.013,42,0.013,52,1.124,55,3.085,60,1.098,63,1.182,65,1.044,71,1.357,72,1.046,73,1.357,75,1.802,82,1.124,84,0.731,85,1.693,90,1.661,91,1.012,147,1.596,196,1.924,204,3.356,213,1.155,220,1.182,248,1.507,262,0.863,263,1.351,265,2.449,289,1.351,290,1.426,291,1.747,294,2.666,304,2.063,360,2.497,361,2.497,362,2.908,364,2.908,368,4.241,371,3.085,374,2.063,375,3.851,384,2.063,385,2.063,473,5.401,474,2.063,475,3.085,476,3.085,477,2.421,478,3.085,479,3.541,480,2.421,481,3.541,482,4.84,483,2.226,484,1.924,485,2.226,486,3.492,487,3.085,488,2.226,489,2.226,490,2.994,491,2.994]],["title/injectables/GoogleStrategy.html",[238,2.327,262,0.651]],["body/injectables/GoogleStrategy.html",[0,0.125,3,0.254,4,0.135,5,0.135,9,0.215,10,0.688,11,2.931,12,1.439,13,0.356,14,0.958,15,0.02,19,0.582,21,1.475,29,0.319,39,0.154,41,0.012,42,0.012,48,1.514,52,1.345,55,3.392,60,1.014,63,1.118,65,0.964,71,1.118,72,1.002,73,1.118,82,0.749,84,0.675,86,3.19,88,1.664,90,1.591,91,1.032,95,2.521,119,1.776,135,1.317,139,1.952,147,1.474,190,1.392,191,2.903,192,1.905,213,1.067,220,1.118,238,2.917,244,4.165,248,1.392,262,0.816,263,1.247,265,2.365,275,3.144,277,2.092,289,1.247,290,1.317,291,1.439,299,2.462,300,2.055,369,2.462,388,2.236,402,2.055,492,2.765,493,3.69,494,2.462,495,4.577,496,2.765,497,4.966,498,4.966,499,4.966,500,3.224,501,4.577,502,2.236,503,2.236,504,2.055,505,2.765,506,2.236,507,2.765,508,3.224,509,2.765,510,3.224,511,2.765,512,3.224,513,2.765,514,3.224,515,2.765,516,2.765,517,2.765,518,2.765,519,2.765]],["title/injectables/JwtAuthGuard.html",[262,0.651,520,2.788]],["body/injectables/JwtAuthGuard.html",[0,0.137,3,0.287,4,0.146,5,0.146,9,0.234,10,0.73,13,0.372,14,1.321,15,0.02,19,0.657,29,0.287,39,0.168,41,0.013,42,0.013,52,1.127,60,1.103,63,1.186,65,1.049,71,1.36,72,1.049,73,1.36,75,1.81,82,1.127,84,0.735,85,1.701,90,1.665,91,1.014,147,1.603,196,1.933,213,1.161,220,1.186,248,1.514,262,0.866,263,1.357,265,2.454,289,1.357,290,1.433,291,1.751,293,2.433,304,2.073,360,2.505,361,2.505,362,2.914,364,2.914,374,2.073,375,3.856,384,2.073,385,2.073,439,2.236,474,2.073,475,3.095,476,3.095,477,2.433,478,3.095,479,3.55,480,2.433,481,3.55,483,2.236,484,1.933,485,2.236,487,3.095,488,2.236,489,2.236,520,3.708,521,5.41,522,4.856,523,3.008,524,4.164,525,3.008,526,3.095,527,3.008,528,3.008]],["title/injectables/JwtStrategy.html",[239,2.327,262,0.651]],["body/injectables/JwtStrategy.html",[0,0.161,3,0.197,4,0.172,5,0.172,9,0.276,12,1.298,13,0.362,15,0.02,19,0.592,29,0.327,39,0.197,41,0.014,42,0.014,48,1.366,52,0.958,60,1.298,63,1.324,65,1.234,71,1.324,72,1.02,73,1.324,82,0.958,84,0.864,90,1.234,119,2.274,139,2.219,147,1.886,152,2.13,190,1.782,191,3.188,192,2.439,213,1.366,220,1.008,239,3.454,244,4.364,248,1.782,256,3.539,262,0.966,263,1.597,270,3.539,277,2.476,348,3.539,493,3.757,502,2.862,503,2.862,504,2.631,506,2.862,526,2.631,529,3.539,530,4.128,531,5.418,532,4.128,533,4.128,534,4.128,535,4.128,536,4.128,537,4.128,538,4.128,539,4.128]],["title/injectables/LocalAuthGuard.html",[207,2.532,262,0.651]],["body/injectables/LocalAuthGuard.html",[0,0.135,3,0.285,4,0.144,5,0.144,9,0.231,10,0.723,13,0.369,14,1.314,15,0.02,19,0.653,29,0.285,39,0.165,41,0.012,42,0.012,52,1.116,60,1.088,63,1.175,65,1.034,71,1.35,72,1.041,73,1.35,75,1.785,82,1.116,84,0.724,85,1.677,90,1.652,91,1.008,101,2.205,147,1.581,196,1.906,207,3.334,213,1.144,220,1.175,248,1.493,262,0.858,263,1.338,265,2.439,289,1.338,290,1.412,291,1.738,293,2.399,301,1.338,302,2.385,304,2.044,360,2.481,361,2.481,362,2.897,364,2.897,374,2.044,375,3.839,384,2.044,385,2.044,435,2.399,439,2.205,474,2.044,475,3.065,476,3.065,478,3.065,479,3.523,481,3.523,483,2.205,484,1.906,485,2.205,487,3.065,488,2.205,489,2.205,527,2.966,528,2.966,540,5.383,541,3.459,542,3.459,543,4.808,544,3.459,545,3.459,546,4.808,547,3.459]],["title/injectables/LocalStrategy.html",[240,2.327,262,0.651]],["body/injectables/LocalStrategy.html",[0,0.164,3,0.201,4,0.176,5,0.176,9,0.281,13,0.367,15,0.02,19,0.6,21,1.598,29,0.321,39,0.201,41,0.014,42,0.014,48,1.393,60,1.324,63,1.341,65,1.259,71,1.341,72,1.034,73,1.341,82,0.977,84,0.882,139,2.241,147,1.924,190,1.817,191,3.145,192,2.487,213,1.393,220,1.029,240,3.499,248,1.817,262,0.979,263,1.629,277,2.508,301,2.363,302,2.897,493,3.806,494,3.215,502,2.92,503,2.92,504,2.684,506,2.92,548,3.61,549,4.21,550,5.489,551,4.21,552,3.61,553,4.21,554,4.21,555,4.21]],["title/classes/LogInDto.html",[0,0.142,169,2.157]],["body/classes/LogInDto.html",[0,0.198,2,1.016,3,0.18,4,0.157,5,0.157,7,1.868,9,0.251,10,0.766,13,0.34,14,1.295,15,0.02,16,1.684,19,0.556,21,1.436,29,0.243,39,0.18,41,0.013,42,0.013,91,1.124,169,3.008,301,2.718,302,3.033,395,3.008,399,3.68,409,1.718,410,3.245,438,4.622,443,2.87,444,4.724,445,3.887,446,4.724,448,2.87,449,4.724,450,3.887,451,3.887,452,3.887,453,3.887,454,3.887,455,3.887,456,3.887,457,3.887,460,3.223,461,3.223,462,2.071,463,2.607,464,2.607,465,2.87,466,3.245,467,3.223,468,3.223,469,3.223,556,4.95,557,3.223,558,4.365,559,3.759,560,3.759]],["title/guards/NoAuthenticationGuard.html",[356,2.532,561,2.788]],["body/guards/NoAuthenticationGuard.html",[0,0.174,3,0.214,4,0.187,5,0.187,7,1.643,9,0.299,10,0.674,13,0.299,15,0.02,19,0.49,29,0.273,39,0.214,41,0.015,42,0.015,52,1.326,63,1.396,71,1.094,72,0.843,73,1.094,82,1.04,84,0.938,86,2.467,88,2.311,90,1.708,91,0.964,95,2.467,220,1.094,262,1.019,265,2.568,291,1.408,358,2.855,360,3.418,361,2.947,362,3.212,364,2.172,365,2.947,367,3.106,371,3.641,561,4.362,562,4.898,563,3.841,564,4.479,565,4.479,566,5.713,567,4.479,568,4.479]],["title/injectables/OptionalJwtAuthGuard.html",[262,0.651,569,2.788]],["body/injectables/OptionalJwtAuthGuard.html",[0,0.137,3,0.287,4,0.146,5,0.146,9,0.234,10,0.73,13,0.372,14,1.321,15,0.02,19,0.657,27,1.933,29,0.287,39,0.168,41,0.013,42,0.013,52,1.127,60,1.103,63,1.186,65,1.049,71,1.36,72,1.049,73,1.36,75,1.81,82,1.127,84,0.735,85,1.701,90,1.665,91,1.014,147,1.603,196,1.933,213,1.161,220,1.186,248,1.514,262,0.866,263,1.357,265,2.454,289,1.357,290,1.433,291,1.527,360,2.505,361,2.505,362,2.914,364,2.914,374,2.073,375,3.856,384,2.073,385,2.073,439,2.236,474,2.073,475,3.095,476,3.095,477,2.433,478,3.095,479,3.55,480,2.433,481,3.095,483,2.236,484,1.933,485,2.236,487,3.095,488,2.236,489,2.236,523,3.008,524,4.164,525,3.008,526,4.265,569,3.708,570,5.41,571,4.856,572,3.508]],["title/classes/PostgresqlContainerDatabase.html",[0,0.142,573,2.327]],["body/classes/PostgresqlContainerDatabase.html",[0,0.177,2,0.862,3,0.152,4,0.133,5,0.133,7,1.941,9,0.213,10,0.683,13,0.353,15,0.02,19,0.666,29,0.217,34,1.377,39,0.275,41,0.012,42,0.012,43,1.377,52,0.741,63,1.11,65,1.358,71,0.779,72,0.601,73,0.779,78,2.212,82,1.228,90,1.581,91,1.028,123,4.39,135,1.854,139,2.486,152,1.646,171,1.757,213,1.055,218,2.343,220,1.547,277,2.783,289,1.234,290,1.302,291,1.663,301,1.234,302,1.377,365,1.646,466,2.033,573,2.895,574,4.035,575,2.033,576,3.674,577,4.651,578,4.401,579,4.224,580,4.834,581,3.19,582,4.401,583,3.19,584,4.038,585,3.19,586,3.19,587,4.651,588,3.19,589,3.19,590,2.435,591,2.435,592,3.149,593,2.033,594,2.435,595,2.435,596,2.435,597,2.435,598,2.435,599,2.435,600,2.435,601,2.435,602,2.435,603,3.468,604,2.435,605,2.435,606,2.435,607,2.435,608,2.895,609,2.435,610,2.435,611,2.435,612,2.435,613,2.435,614,2.435,615,2.212,616,2.435]],["title/classes/SignUpDto.html",[0,0.142,182,2.327]],["body/classes/SignUpDto.html",[0,0.184,2,0.913,3,0.162,4,0.141,5,0.141,7,1.736,9,0.226,10,0.712,13,0.395,14,1.351,15,0.02,16,1.957,19,0.646,21,1.498,29,0.261,39,0.162,41,0.012,42,0.012,60,1.488,72,1.247,91,1.174,101,3.016,169,3.678,182,3.016,201,2.581,301,2.408,302,2.687,312,4.057,395,2.795,399,3.48,409,1.544,410,3.016,435,4.473,436,5.071,437,2.898,438,4.473,439,3.016,440,5.337,443,2.581,444,3.613,445,2.581,446,3.613,448,2.581,449,3.613,450,2.581,451,2.581,452,2.581,453,2.581,454,2.581,455,2.581,456,2.581,457,2.581,459,2.898,462,1.862,463,2.344,464,2.344,465,2.581,470,2.898,471,2.898,472,2.898,558,5.071,617,4.681,618,2.898,619,3.38,620,3.38,621,4.731,622,3.38,623,3.38,624,3.38]],["title/classes/SqliteInMemoryDatabase.html",[0,0.142,608,2.327]],["body/classes/SqliteInMemoryDatabase.html",[0,0.179,2,0.877,3,0.155,4,0.135,5,0.135,7,1.959,9,0.217,10,0.692,13,0.307,15,0.02,19,0.67,29,0.22,34,1.401,39,0.278,41,0.012,42,0.012,43,1.401,52,0.754,63,1.123,65,1.596,78,2.251,82,1.24,90,1.596,91,1.034,123,4.415,135,1.325,139,2.496,152,2.373,171,1.788,213,1.074,218,2.373,220,1.556,277,2.802,289,1.256,290,1.325,291,1.679,301,1.256,302,1.401,365,1.675,466,2.069,573,2.069,574,4.059,575,2.069,576,3.703,577,4.682,578,4.435,579,4.252,580,4.862,582,3.511,584,3.511,587,4.682,590,2.478,591,2.478,592,3.189,593,2.069,594,2.478,595,2.478,596,2.478,597,2.478,598,2.478,599,2.478,600,2.478,601,2.478,602,2.478,603,3.511,604,2.478,605,2.478,606,2.478,607,2.478,608,3.404,609,2.478,610,2.478,611,2.478,612,2.478,613,2.478,614,2.478,615,2.251,616,2.478,625,3.246,626,3.246,627,3.246,628,3.246,629,3.246]],["title/classes/Task.html",[0,0.142,429,1.77]],["body/classes/Task.html",[0,0.153,2,1.065,3,0.188,4,0.164,5,0.164,9,0.263,10,0.79,12,1.983,13,0.452,15,0.02,16,2.235,19,0.738,21,1.464,26,3.378,27,2.17,29,0.251,30,4.373,31,2.732,32,3.378,34,1.701,39,0.188,41,0.014,42,0.014,46,3.05,279,2.575,365,2.711,418,4.373,419,3.256,429,2.867,630,3.378,631,5.911,632,4.514,633,5.911,634,3.94,635,3.94,636,4.514,637,3.94,638,5.254,639,3.94,640,3.726,641,3.94,642,3.008,643,4.505,644,3.94,645,3.008,646,3.378,647,3.378,648,3.378,649,3.008,650,3.94,651,3.378]],["title/classes/TaskList.html",[0,0.142,640,2.157]],["body/classes/TaskList.html",[0,0.159,2,1.103,3,0.195,4,0.17,5,0.17,9,0.273,10,0.809,12,2.011,13,0.402,15,0.02,16,1.99,19,0.658,21,1.249,27,2.249,29,0.257,30,3.73,31,2.831,34,1.762,39,0.195,41,0.014,42,0.014,135,2.196,279,2.196,417,3.936,418,2.831,419,3.314,429,3.223,636,4.594,640,3.178,642,3.117,643,4.612,646,3.5,647,3.5,648,3.5,649,3.117,652,5.483,653,3.5,654,4.594,655,4.082,656,3.5,657,6.824,658,5.379,659,5.379,660,4.082,661,4.082,662,3.5,663,4.082,664,4.082,665,4.082]],["title/controllers/TasksController.html",[156,2.011,666,2.532]],["body/controllers/TasksController.html",[0,0.099,3,0.121,4,0.106,5,0.106,9,0.17,12,2.109,13,0.417,15,0.02,16,2.155,19,0.712,29,0.298,39,0.121,41,0.01,42,0.01,63,0.939,71,1.525,72,1.176,73,1.525,82,1.512,84,0.532,91,0.429,156,1.4,158,1.4,160,1.94,161,2.45,185,3.974,186,2.178,188,1.94,189,1.501,213,0.841,220,1.591,279,2.882,414,3.449,428,3.449,429,1.863,654,1.94,666,2.665,667,2.178,668,3.295,669,3.295,670,4.43,671,4.43,672,3.295,673,3.295,674,3.295,675,3.295,676,3.295,677,3.295,678,2.178,679,3.843,680,2.541,681,2.178,682,3.843,683,2.541,684,3.843,685,2.541,686,3.843,687,2.541,688,2.178,689,3.843,690,2.541,691,2.178,692,3.843,693,2.541,694,2.178,695,3.843,696,2.541,697,2.178,698,3.843,699,2.541,700,2.178,701,3.979,702,3.843,703,2.541,704,2.178,705,3.979,706,3.843,707,2.541,708,2.541,709,2.178,710,2.541,711,2.178,712,2.934,713,2.934,714,2.934,715,2.934,716,2.738,717,2.178,718,2.541,719,2.541,720,2.541,721,2.541,722,2.541,723,2.541,724,2.541,725,2.541,726,2.541,727,2.541,728,2.541,729,2.541,730,2.541,731,2.541,732,2.541,733,2.541,734,2.541,735,2.541,736,2.541,737,2.541]],["title/modules/TasksModule.html",[104,1.884,111,2.327]],["body/modules/TasksModule.html",[0,0.18,3,0.221,4,0.193,5,0.193,15,0.02,29,0.337,39,0.221,41,0.015,42,0.015,84,0.967,100,3.713,104,3.006,106,2.545,107,3.209,111,4.496,113,3.713,114,2.945,115,2.945,117,3.203,121,3.527,122,2.729,158,3.209,429,2.24,640,3.442,645,3.527,666,4.425,716,4.167,717,3.961,738,3.961,739,3.961,740,4.619,741,3.961,742,3.961,743,4.619,744,4.619]],["title/injectables/TasksService.html",[262,0.651,716,2.157]],["body/injectables/TasksService.html",[0,0.083,3,0.103,4,0.09,5,0.09,9,0.143,12,1.714,13,0.406,15,0.02,19,0.693,29,0.29,34,0.926,39,0.103,41,0.009,42,0.009,46,1.107,52,1.097,63,0.824,65,1.008,71,1.485,72,1.144,73,1.485,82,1.444,84,0.449,90,1.008,91,0.569,122,1.267,139,2.656,152,1.107,171,3.426,218,1.74,220,1.519,262,0.601,263,0.83,279,2.803,291,1.06,414,3.034,417,3.987,418,2.338,419,1.858,428,3.034,429,2.49,632,1.638,640,1.992,645,1.638,651,1.839,654,3.182,668,2.892,669,2.892,670,4.051,671,4.051,672,2.892,673,2.892,674,2.892,675,2.892,676,2.892,677,2.892,678,2.892,681,2.892,688,2.892,691,2.892,694,2.892,697,2.892,700,2.892,701,3.636,704,2.892,705,3.636,712,2.575,713,2.575,714,2.575,715,2.575,716,1.992,741,1.839,742,1.839,745,1.839,746,2.145,747,4.355,748,4.167,749,2.145,750,3.372,751,2.145,752,2.145,753,2.145,754,2.145,755,2.145,756,2.145,757,2.145,758,2.145,759,2.145,760,2.145,761,1.839,762,2.145,763,2.145,764,2.145,765,2.145,766,2.145,767,2.145,768,2.145,769,2.145,770,3.573,771,2.145,772,3.372,773,2.145,774,2.145,775,2.145,776,2.145,777,2.145,778,2.145,779,2.145,780,2.145,781,2.145,782,3.372,783,2.145,784,2.145,785,2.145,786,2.145,787,2.145,788,2.145,789,2.145,790,2.145,791,2.145,792,2.145]],["title/interfaces/TestDatabase.html",[43,1.576,576,2.327]],["body/interfaces/TestDatabase.html",[0,0.187,3,0.165,4,0.144,5,0.144,7,1.761,9,0.231,10,0.722,13,0.369,15,0.02,19,0.525,29,0.229,34,1.489,39,0.285,41,0.012,42,0.012,43,1.489,44,2.2,52,0.801,63,1.173,65,1.032,78,2.393,82,1.115,90,1.435,91,0.931,123,4.503,135,1.409,139,2.301,152,1.781,213,1.142,218,2.477,220,1.586,277,2.866,291,1.736,301,1.335,302,1.489,365,2.848,466,2.2,573,2.2,574,3.519,575,2.2,576,3.804,577,4.958,578,3.666,579,3.329,580,4.958,582,3.666,584,3.666,587,4.789,590,2.635,591,2.635,592,3.329,593,2.2,594,2.635,595,2.635,596,2.635,597,2.635,598,2.635,599,2.635,600,2.635,601,2.635,602,2.635,603,3.666,604,2.635,605,2.635,606,2.635,607,2.635,608,3.06,609,2.635,610,2.635,611,2.635,612,2.635,613,2.635,614,2.635,615,2.393,616,2.635,793,3.451,794,3.451]],["title/classes/UpdateAccountDto.html",[0,0.142,795,2.532]],["body/classes/UpdateAccountDto.html",[0,0.21,2,1.459,3,0.258,4,0.225,5,0.225,15,0.019,29,0.306,39,0.258,41,0.017,42,0.017,60,1.697,189,3.189,300,3.441,394,3.743,412,3.441,795,4.444,796,4.122,797,3.743,798,3.743,799,5.398]],["title/classes/UpdateTaskDto.html",[0,0.142,705,2.327]],["body/classes/UpdateTaskDto.html",[0,0.215,2,1.148,3,0.203,4,0.177,5,0.177,9,0.284,10,0.83,13,0.41,15,0.019,16,2.029,19,0.67,21,1.508,29,0.293,39,0.203,41,0.014,42,0.014,46,3.164,60,1.335,91,1.215,365,2.848,409,1.941,414,2.509,416,3.243,417,3.966,419,3.378,420,4.503,424,2.945,426,2.945,427,2.945,632,4.683,705,3.519,714,3.243,797,2.945,798,2.945,800,4.958,801,4.247,802,6.133,803,4.247,804,4.247,805,3.641,806,3.641,807,4.247]],["title/classes/UpdateTaskListDto.html",[0,0.142,701,2.327]],["body/classes/UpdateTaskListDto.html",[0,0.221,2,1.203,3,0.213,4,0.186,5,0.186,9,0.298,10,0.856,12,1.972,13,0.38,15,0.019,16,1.883,19,0.622,21,1.321,29,0.3,39,0.213,41,0.015,42,0.015,60,1.4,91,1.179,279,2.324,409,2.034,417,3.849,419,3.455,420,3.946,422,5.378,424,3.087,426,3.087,427,3.087,428,2.63,429,3.205,430,3.399,701,3.627,713,3.399,797,3.087,798,3.087,800,4.789,805,3.817,806,3.817,808,4.452,809,4.452,810,4.452]],["title/classes/UpdateUserDto.html",[0,0.142,811,2.532]],["body/classes/UpdateUserDto.html",[0,0.21,2,1.459,3,0.258,4,0.225,5,0.225,15,0.019,29,0.306,39,0.258,41,0.017,42,0.017,60,1.697,189,3.189,432,3.441,433,4.122,796,4.122,797,3.743,798,3.743,811,4.444,812,4.628,813,5.398]],["title/classes/User.html",[0,0.142,14,0.764]],["body/classes/User.html",[0,0.13,1,2.835,2,0.905,3,0.16,4,0.14,5,0.14,7,1.725,9,0.394,10,0.707,12,1.708,13,0.441,14,1.233,15,0.02,16,2.186,19,0.722,21,1.565,27,1.845,29,0.282,30,4.46,31,2.322,33,5.05,34,1.445,39,0.16,41,0.012,42,0.012,72,1.023,135,2.893,152,2.425,190,1.445,279,1.92,289,1.296,301,2.101,302,2.344,312,3.209,331,2.872,378,3.463,462,2.992,463,2.322,464,2.322,636,4.148,642,3.589,649,4.497,656,2.872,662,4.031,814,2.872,815,4.148,816,4.658,817,3.349,818,4.701,819,4.701,820,6.743,821,3.349,822,3.349,823,5.89,824,3.349,825,4.701,826,3.349,827,3.349,828,3.349,829,4.701,830,3.349,831,3.349,832,3.349]],["title/interfaces/UserInterface.html",[43,1.576,48,1.208]],["body/interfaces/UserInterface.html",[3,0.202,4,0.177,5,0.177,8,3.573,9,0.283,10,0.829,12,2.04,13,0.469,14,1.282,15,0.02,21,1.67,29,0.263,39,0.293,41,0.014,42,0.014,43,2.643,44,2.699,46,2.185,48,1.823,49,4.207,50,3.631,52,1.279,72,1.221,279,2.501,301,2.509,312,3.832,378,4.135,815,4.953,816,5.562,833,2.936,834,4.234,835,3.233,836,3.631,837,3.233]],["title/interfaces/UserPasswordInterface.html",[43,1.576,462,2.011]],["body/interfaces/UserPasswordInterface.html",[3,0.25,4,0.218,5,0.218,9,0.349,10,0.945,13,0.349,15,0.019,21,1.565,29,0.25,39,0.25,41,0.016,42,0.016,43,2.255,44,3.331,48,2.23,51,4.481,60,1.976,302,3.019,462,3.462,838,4.481,839,4.481]],["title/controllers/UsersController.html",[156,2.011,840,2.532]],["body/controllers/UsersController.html",[0,0.129,3,0.159,4,0.138,5,0.138,9,0.222,12,1.7,13,0.312,14,1.493,15,0.02,16,1.788,19,0.591,21,1.255,29,0.322,39,0.159,41,0.012,42,0.012,48,2.18,52,0.771,63,1.141,71,1.141,72,0.88,73,1.141,75,2.41,82,1.255,84,0.695,91,0.56,139,2.509,156,1.828,158,1.828,160,2.534,161,2.978,171,2.978,188,2.534,189,1.961,190,1.432,196,1.828,197,3.748,213,1.098,218,2.789,220,1.321,272,2.978,279,2.207,301,2.091,303,2.846,351,2.846,382,2.301,709,2.846,711,2.846,837,3.567,840,3.239,841,2.846,842,4.635,843,5.866,844,4.671,845,4.671,846,3.319,847,3.319,848,3.319,849,3.319,850,3.319,851,3.319,852,3.319,853,3.319,854,3.319,855,3.319,856,3.319,857,2.846,858,3.319,859,3.319,860,3.319,861,3.319,862,3.319,863,3.319,864,3.319,865,3.319,866,3.319,867,3.319]],["title/modules/UsersModule.html",[104,1.884,112,2.157]],["body/modules/UsersModule.html",[0,0.174,1,2.611,3,0.214,4,0.187,5,0.187,14,0.938,15,0.02,29,0.334,39,0.214,41,0.015,42,0.015,84,0.938,100,3.641,104,2.947,106,2.467,107,3.147,112,4.202,113,3.641,114,2.855,115,2.855,117,3.106,121,3.42,122,2.646,158,3.147,243,4.898,272,4.084,840,4.362,857,3.841,868,3.841,869,3.841,870,3.841,871,4.479,872,3.841,873,3.841,874,4.479,875,4.479]],["title/injectables/UsersService.html",[262,0.651,272,2.011]],["body/injectables/UsersService.html",[0,0.059,1,2.723,3,0.072,4,0.063,5,0.063,9,0.101,10,0.382,12,2.03,13,0.422,14,1.364,15,0.02,19,0.651,21,1.356,29,0.257,34,0.654,39,0.072,41,0.007,42,0.007,52,1.356,63,0.621,64,1.3,65,0.76,71,1.394,72,1.074,73,1.394,77,1.3,82,1.325,84,0.317,90,1.281,91,0.723,122,0.896,139,2.566,152,1.984,171,1.809,218,2.542,220,1.394,262,0.454,263,0.586,265,1.57,267,2.18,272,1.401,277,2.854,278,2.18,279,2.384,289,1.271,290,1.341,291,2.01,293,1.051,300,1.621,301,1.794,304,3.689,312,2.911,339,3.297,340,3.297,342,2.18,353,3.674,412,3.295,432,2.731,438,4.205,712,1.942,715,1.942,747,3.762,761,1.3,770,2.816,795,3.417,811,3.585,812,2.18,815,1.942,842,1.3,872,1.3,873,1.3,876,1.3,877,2.543,878,2.543,879,2.543,880,3.845,881,2.543,882,2.543,883,2.543,884,2.543,885,3.285,886,2.543,887,1.516,888,3.285,889,2.543,890,2.543,891,2.543,892,1.516,893,2.543,894,1.516,895,2.543,896,1.516,897,1.516,898,2.543,899,5.169,900,1.516,901,1.516,902,2.543,903,1.516,904,2.543,905,1.516,906,2.543,907,1.516,908,1.516,909,1.516,910,2.543,911,1.516,912,2.543,913,1.516,914,1.516,915,1.516,916,2.543,917,3.845,918,2.543,919,2.543,920,2.543,921,2.18,922,4.927,923,2.543,924,1.516,925,3.845,926,3.845,927,2.543,928,2.543,929,2.543,930,1.516,931,2.543,932,2.543,933,1.516,934,1.516,935,2.543,936,2.543,937,1.516,938,1.516,939,1.516,940,1.516,941,1.516,942,1.516,943,3.285,944,2.543,945,2.543,946,1.516,947,1.516,948,1.516,949,1.516,950,1.516,951,1.516,952,1.516,953,1.516,954,1.516,955,1.516]],["title/injectables/VkontakteAuthGuard.html",[209,2.532,262,0.651]],["body/injectables/VkontakteAuthGuard.html",[0,0.136,3,0.287,4,0.146,5,0.146,9,0.233,10,0.728,13,0.371,14,1.319,15,0.02,19,0.656,29,0.287,39,0.167,41,0.013,42,0.013,52,1.124,56,2.666,60,1.098,63,1.182,65,1.044,71,1.357,72,1.046,73,1.357,75,1.802,82,1.124,84,0.731,85,1.693,90,1.661,91,1.012,147,1.596,196,1.924,209,3.356,213,1.155,220,1.182,248,1.507,262,0.863,263,1.351,265,2.449,289,1.351,290,1.426,291,1.747,294,2.666,304,2.063,360,2.497,361,2.497,362,2.908,364,2.908,368,4.241,371,3.085,374,2.063,375,3.851,384,2.063,385,2.063,474,2.063,475,3.085,476,3.085,477,2.421,478,3.085,479,3.541,480,2.421,481,3.541,483,2.226,484,1.924,485,2.226,487,3.085,488,2.226,489,2.226,490,2.994,491,2.994,956,5.401,957,4.84,958,3.492]],["title/injectables/VkontakteStrategy.html",[241,2.327,262,0.651]],["body/injectables/VkontakteStrategy.html",[0,0.126,3,0.255,4,0.135,5,0.135,9,0.216,10,0.689,11,2.935,12,1.441,13,0.356,14,0.96,15,0.02,19,0.582,21,1.476,29,0.319,39,0.154,41,0.012,42,0.012,48,1.517,52,1.346,56,2.935,60,1.016,63,1.12,65,0.966,71,1.12,72,1.003,73,1.12,82,0.75,84,0.677,86,3.194,88,1.667,90,1.592,91,1.033,95,2.525,119,1.78,135,1.32,139,1.955,147,1.477,190,1.395,191,2.906,192,1.909,213,1.069,220,1.12,241,2.922,244,4.168,248,1.395,262,0.818,263,1.25,265,2.367,275,3.147,277,2.095,289,1.25,290,1.32,291,1.441,299,2.467,300,2.06,369,2.467,388,2.241,402,2.06,493,3.694,494,2.467,496,2.771,497,4.971,498,4.971,499,4.971,502,2.241,503,2.241,504,2.06,506,2.241,507,2.771,509,2.771,511,2.771,513,2.771,515,2.771,516,2.771,517,2.771,518,2.771,519,2.771,959,2.771,960,4.584,961,3.231,962,4.584,963,3.231,964,3.231,965,3.231,966,3.231]],["title/coverage.html",[967,3.811]],["body/coverage.html",[0,0.271,1,1.025,5,0.094,6,1.923,8,1.236,13,0.15,14,0.731,15,0.02,41,0.009,42,0.009,43,2.089,45,2.422,48,0.742,53,1.43,57,1.713,58,1.923,59,1.923,72,0.422,124,1.555,143,1.923,144,1.923,156,2.362,157,1.555,159,1.923,161,1.43,169,1.325,182,1.43,191,1.025,194,1.713,197,1.555,204,1.555,207,1.555,209,1.555,238,1.43,239,1.43,240,1.43,241,1.43,262,1.162,264,1.923,272,1.236,275,1.325,291,0.705,296,1.713,356,2.974,357,1.555,359,1.923,372,1.555,373,1.923,379,1.713,382,1.555,387,6.417,393,1.923,394,2.974,395,1.325,412,1.43,413,2.666,414,1.325,415,2.666,416,2.666,428,1.325,429,2.08,430,2.666,432,1.43,433,2.666,462,1.236,473,1.923,474,3.099,484,1.236,492,1.923,520,1.713,521,1.923,526,1.43,529,1.923,540,1.923,548,1.923,556,1.923,557,1.923,561,1.713,562,1.923,563,1.923,569,1.713,570,1.923,573,1.43,574,3.085,575,3.085,576,1.43,592,3.852,593,1.43,608,1.43,617,1.923,618,1.923,630,1.923,640,1.325,652,1.923,653,1.923,666,1.555,667,1.923,701,1.43,705,1.43,716,1.325,745,1.923,795,1.555,796,2.666,800,2.666,811,1.555,814,1.923,833,2.422,835,1.713,838,1.923,839,1.923,840,1.555,841,1.923,876,1.923,956,1.923,959,1.923,967,1.713,968,2.243,969,2.243,970,2.243,971,5.555,972,4.288,973,4.288,974,2.243,975,2.994,976,4.15,977,6.683,978,1.923,979,5.8,980,5.8,981,1.923,982,1.923,983,1.923,984,2.994,985,6.752,986,1.923,987,4.84,988,4.84,989,2.243,990,2.243,991,5.998,992,5.555,993,2.243,994,2.243,995,2.243,996,2.243,997,2.994,998,1.923,999,1.923,1000,2.666,1001,1.923,1002,1.923,1003,2.243,1004,2.243,1005,2.243,1006,2.243,1007,2.243,1008,1.923,1009,1.923,1010,1.923,1011,3.677,1012,1.923,1013,1.923,1014,2.243,1015,2.243]],["title/dependencies.html",[107,2.42,1016,3.045]],["body/dependencies.html",[0,0.219,15,0.02,34,1.893,41,0.015,42,0.015,55,2.796,56,2.416,84,0.918,85,2.127,88,2.908,107,2.416,119,2.416,122,2.591,189,2.591,246,3.349,248,1.893,295,3.761,409,2.004,504,4.334,505,3.761,526,2.796,552,3.761,1017,6.573,1018,4.386,1019,4.386,1020,4.386,1021,4.386,1022,4.386,1023,4.386,1024,3.761,1025,4.386,1026,4.386,1027,4.386,1028,4.386,1029,4.386,1030,4.386,1031,4.386,1032,4.386,1033,4.386,1034,4.386,1035,4.386,1036,4.386,1037,4.386,1038,4.386,1039,3.761,1040,4.386,1041,4.386,1042,4.386,1043,4.386,1044,4.386,1045,4.386,1046,4.386,1047,3.761,1048,4.386,1049,4.386,1050,4.386]],["title/miscellaneous/functions.html",[1051,1.799,1052,3.767]],["body/miscellaneous/functions.html",[9,0.296,13,0.379,15,0.019,27,3.123,41,0.015,42,0.015,71,1.611,72,1.242,73,1.611,75,2.925,82,1.583,277,2.022,296,4.776,395,3.695,574,2.821,575,3.613,593,3.987,997,3.794,998,4.861,999,4.861,1000,3.379,1001,3.794,1002,5.363,1051,2.614,1052,3.794,1053,4.425,1054,5.669,1055,4.425,1056,4.861,1057,4.425,1058,4.861,1059,3.794,1060,4.425,1061,4.425,1062,4.425,1063,4.425,1064,4.425,1065,5.655,1066,6.595,1067,5.669,1068,4.425]],["title/index.html",[9,0.203,1069,3.045,1070,3.045]],["body/index.html",[4,0.18,15,0.019,41,0.014,42,0.014,46,2.23,125,3.705,435,2.997,579,2.997,615,2.997,747,3.3,967,3.3,1071,4.321,1072,4.321,1073,5.583,1074,4.321,1075,4.321,1076,4.321,1077,4.321,1078,4.321,1079,4.321,1080,6.184,1081,4.321,1082,4.321,1083,7.053,1084,4.321,1085,4.321,1086,6.931,1087,4.321,1088,5.583,1089,4.321,1090,4.321,1091,4.321,1092,4.321,1093,5.583,1094,5.583,1095,4.321,1096,4.321,1097,4.321,1098,5.583,1099,5.583,1100,4.321,1101,4.321,1102,4.321,1103,4.321,1104,4.321,1105,3.705,1106,4.321,1107,4.321,1108,4.321,1109,4.321,1110,4.321,1111,4.321,1112,4.321,1113,4.321,1114,4.321,1115,4.321,1116,4.321,1117,4.321,1118,4.321,1119,4.321,1120,4.321,1121,4.321,1122,4.321]],["title/modules.html",[106,2.749]],["body/modules.html",[15,0.017,41,0.017,42,0.017,105,3.785,106,3.007,110,3.479,111,3.479,112,3.225,1105,6.084,1123,7.095,1124,7.095,1125,7.095]],["title/overview.html",[1126,4.279]],["body/overview.html",[2,1.119,15,0.019,41,0.014,42,0.014,44,2.639,105,4.911,106,2.28,107,2.99,108,3.549,109,3.549,110,4.756,111,4.255,112,4.125,113,3.46,114,2.639,115,2.639,158,2.28,191,3.19,234,3.549,236,3.549,237,3.549,238,3.861,239,3.861,240,3.861,241,3.861,263,1.601,272,3.846,358,2.639,716,3.579,738,3.549,739,3.549,868,3.549,869,3.549,870,3.549,1126,3.549,1127,5.428,1128,5.428,1129,4.139,1130,4.139]],["title/miscellaneous/typealiases.html",[1051,1.799,1131,4.393]],["body/miscellaneous/typealiases.html",[9,0.361,13,0.361,15,0.017,24,4.085,41,0.017,42,0.017,45,3.743,49,5.398,378,4.085,833,3.743,1000,4.122,1051,3.189,1056,5.86,1058,5.495,1059,5.495,1132,5.398,1133,4.628,1134,4.628]],["title/miscellaneous/variables.html",[1051,1.799,1135,3.767]],["body/miscellaneous/variables.html",[9,0.191,11,2.31,13,0.366,14,1.381,15,0.02,21,1.271,27,1.573,41,0.011,42,0.011,45,1.98,46,1.473,48,1.387,52,1.271,53,2.673,54,2.449,55,1.82,56,1.573,71,1.214,72,0.79,86,1.573,88,1.473,95,1.573,135,1.712,161,2.673,194,3.201,197,2.907,220,1.214,279,1.166,289,2.709,290,2.9,357,1.98,358,3.885,362,1.385,364,2.033,367,1.98,371,3.167,372,1.98,378,1.82,379,3.201,382,4.227,388,1.98,417,2.737,484,2.31,833,1.98,835,3.201,836,2.449,837,2.18,921,2.449,975,2.449,976,5.401,978,3.595,981,2.449,982,2.449,983,2.449,984,2.449,986,2.449,1008,2.449,1009,3.595,1010,3.595,1011,2.449,1012,3.595,1013,3.595,1024,2.449,1039,2.449,1047,2.449,1051,1.687,1065,2.449,1133,2.449,1134,2.449,1135,2.449,1136,4.193,1137,2.856,1138,4.968,1139,2.856,1140,2.856,1141,2.856,1142,4.193,1143,2.856,1144,2.856,1145,4.193,1146,5.831,1147,2.856,1148,2.856,1149,2.856,1150,2.856,1151,2.856,1152,2.856,1153,2.856,1154,2.856,1155,2.856,1156,4.193,1157,2.856,1158,2.856,1159,4.193,1160,5.474,1161,2.856,1162,2.856,1163,2.856,1164,2.856,1165,2.856,1166,2.856,1167,2.856,1168,2.856,1169,2.856,1170,2.856,1171,2.856,1172,2.856,1173,2.856,1174,2.856,1175,2.856,1176,2.856,1177,2.856,1178,2.856,1179,2.856,1180,2.856,1181,2.856,1182,2.856,1183,2.856,1184,2.856,1185,2.856,1186,2.856,1187,2.856,1188,2.856]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":387,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["0.2.38",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":980,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["100",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1129,"title":{},"body":{"overview.html":{}}}],["12345678",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["14",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["19",{"_index":1130,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":643,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{}}}],["256",{"_index":819,"title":{},"body":{"classes/User.html":{}}}],["3",{"_index":1128,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["30m",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["32",{"_index":829,"title":{},"body":{"classes/User.html":{}}}],["4",{"_index":1127,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":988,"title":{},"body":{"coverage.html":{}}}],["49899993",{"_index":411,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["5.0.1",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["64",{"_index":823,"title":{},"body":{"classes/User.html":{}}}],["66",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["8.0.0",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["9]+$/i",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["a.id",{"_index":787,"title":{},"body":{"injectables/TasksService.html":{}}}],["access",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access_token",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["accessed",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":497,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["account",{"_index":1,"title":{"classes/Account.html":{}},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"injectables/AuthService.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["account.data",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.dto",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"classes/UpdateAccountDto.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{}}}],["account.dto.ts",{"_index":394,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["account.dto.ts:15",{"_index":407,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["account.dto.ts:22",{"_index":400,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["account.dto.ts:28",{"_index":397,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["account.dto.ts:34",{"_index":403,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["account.entity",{"_index":831,"title":{},"body":{"classes/User.html":{}}}],["account.interface",{"_index":834,"title":{},"body":{"interfaces/UserInterface.html":{}}}],["account.type",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.user",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["account.user.id",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["account['id",{"_index":945,"title":{},"body":{"injectables/UsersService.html":{}}}],["account['type",{"_index":944,"title":{},"body":{"injectables/UsersService.html":{}}}],["accountinterface",{"_index":8,"title":{"interfaces/AccountInterface.html":{}},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["accounts",{"_index":815,"title":{},"body":{"classes/User.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["accountsrepository",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["accounttype",{"_index":24,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"miscellaneous/typealiases.html":{}}}],["accounttypes",{"_index":53,"title":{},"body":{"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["additional",{"_index":398,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["address",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["address'})@isemail(undefined",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["admin",{"_index":837,"title":{},"body":{"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":1132,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allownoauth",{"_index":978,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alphanumeric",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["already",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1106,"title":{},"body":{"index.html":{}}}],["angularuniversalfilter",{"_index":57,"title":{"classes/AngularUniversalFilter.html":{}},"body":{"classes/AngularUniversalFilter.html":{},"coverage.html":{}}}],["another",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["apibearerauth",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibody",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["apisecurity",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apitags",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('tasks",{"_index":719,"title":{},"body":{"controllers/TasksController.html":{}}}],["apitags('users",{"_index":859,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_base_href",{"_index":67,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["app_pipe",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["applicationref",{"_index":68,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["applications",{"_index":1079,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applydecorators(useguards(optionaljwtauthguard",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":105,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appvalidationpipe",{"_index":124,"title":{"classes/AppValidationPipe.html":{}},"body":{"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"coverage.html":{}}}],["argumentshost",{"_index":79,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["array",{"_index":1063,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arrayelement",{"_index":49,"title":{},"body":{"interfaces/AccountInterface.html":{},"interfaces/UserInterface.html":{},"miscellaneous/typealiases.html":{}}}],["asc",{"_index":648,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{}}}],["assign",{"_index":405,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["async",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{}}}],["auth",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/UsersController.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["auth.decorator.ts",{"_index":976,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":474,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:14",{"_index":477,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":541,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.guard.ts:22",{"_index":480,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["auth.guard.ts:24",{"_index":542,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.guard.ts:8",{"_index":476,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["auth.service",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["auth/auth.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/auth.decorator",{"_index":711,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/optional",{"_index":854,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/decorators/roles.decorator",{"_index":855,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":856,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":157,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":371,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication.guard.ts",{"_index":563,"title":{},"body":{"guards/NoAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.guard.ts:8",{"_index":564,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["authenticationguard",{"_index":357,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":483,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["authguard('google",{"_index":486,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["authguard('jwt",{"_index":523,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["authguard('local",{"_index":544,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard('vkontakte",{"_index":958,"title":{},"body":{"injectables/VkontakteAuthGuard.html":{}}}],["authmodule",{"_index":110,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1115,"title":{},"body":{"index.html":{}}}],["authorizationguard",{"_index":372,"title":{"guards/AuthorizationGuard.html":{}},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorized",{"_index":392,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["authservice",{"_index":191,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["b",{"_index":786,"title":{},"body":{"injectables/TasksService.html":{}}}],["b.id",{"_index":788,"title":{},"body":{"injectables/TasksService.html":{}}}],["backers",{"_index":1107,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('another",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('failed",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('this",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('user",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`error",{"_index":922,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(info?.message",{"_index":528,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["badrequestmessage",{"_index":545,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["baseexceptionfilter",{"_index":61,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["basic",{"_index":404,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["bcrypt",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["begin",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["body",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["boolean",{"_index":365,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"guards/NoAuthenticationGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateTaskDto.html":{}}}],["bootstrap",{"_index":1002,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1125,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1123,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1074,"title":{},"body":{"index.html":{}}}],["callbackurl",{"_index":511,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["canactivate",{"_index":360,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["canactivate(context",{"_index":361,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["cascade",{"_index":657,"title":{},"body":{"classes/TaskList.html":{}}}],["catch",{"_index":64,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"injectables/UsersService.html":{}}}],["catch((error",{"_index":949,"title":{},"body":{"injectables/UsersService.html":{}}}],["catch(exception",{"_index":76,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["catch(notfoundexception",{"_index":89,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["characters",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["class",{"_index":0,"title":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["clientid",{"_index":507,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["clientsecret",{"_index":509,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["cluster_appmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":738,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":739,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":868,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":869,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":870,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collection",{"_index":1062,"title":{},"body":{"miscellaneous/functions.html":{}}}],["column",{"_index":30,"title":{},"body":{"classes/Account.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["column('boolean",{"_index":638,"title":{},"body":{"classes/Task.html":{}}}],["column('simple",{"_index":17,"title":{},"body":{"classes/Account.html":{}}}],["column({default",{"_index":827,"title":{},"body":{"classes/User.html":{}}}],["column({length",{"_index":642,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["common/interfaces/account.interface",{"_index":35,"title":{},"body":{"classes/Account.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["common/interfaces/user",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{}}}],["common/interfaces/user.interface",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/VkontakteStrategy.html":{}}}],["common/utilities",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["compression",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["configservice.get('google_callback_url",{"_index":512,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('google_client_id",{"_index":508,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('google_client_secret",{"_index":510,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('google_scope",{"_index":514,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_timeout",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('vkontakte_callback_url",{"_index":965,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["configservice.get('vkontakte_client_id",{"_index":963,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["configservice.get('vkontakte_client_secret",{"_index":964,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["configservice.get('vkontakte_scope",{"_index":966,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["connect",{"_index":401,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["connectaccount",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["connectaccount(connectaccountdto",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["connectaccountdto",{"_index":275,"title":{"classes/ConnectAccountDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/ConnectAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["connected",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["connectionoptions",{"_index":587,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["connectuserdto.data",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":52,"title":{},"body":{"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":65,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["constructor(authservice",{"_index":494,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["constructor(configservice",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(container",{"_index":581,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{}}}],["constructor(indexhtml",{"_index":66,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["constructor(private",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"controllers/TasksController.html":{},"interfaces/TestDatabase.html":{},"controllers/UsersController.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["constructor(reflector",{"_index":374,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["constructor(taskrepository",{"_index":746,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(usersrepository",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["contain",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["container",{"_index":584,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["context",{"_index":364,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":385,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["context.gethandler",{"_index":384,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":367,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"guards/NoAuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":156,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":718,"title":{},"body":{"controllers/TasksController.html":{}}}],["controller('users",{"_index":858,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":967,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":798,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{}}}],["createaccount",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["createaccount(id",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["createaccountdto",{"_index":412,"title":{"classes/CreateAccountDto.html":{}},"body":{"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createdatecolumn",{"_index":633,"title":{},"body":{"classes/Task.html":{}}}],["createddate",{"_index":631,"title":{},"body":{"classes/Task.html":{}}}],["createlist",{"_index":668,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createlist(@body",{"_index":729,"title":{},"body":{"controllers/TasksController.html":{}}}],["createlist(createtasklistdto",{"_index":678,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createmockobj",{"_index":998,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmockobj(methodnames",{"_index":1057,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createparamdecorator",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('user",{"_index":928,"title":{},"body":{"injectables/UsersService.html":{}}}],["createtask",{"_index":669,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(@body",{"_index":720,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(createtaskdto",{"_index":681,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtaskdto",{"_index":414,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createtaskdto.description",{"_index":767,"title":{},"body":{"injectables/TasksService.html":{}}}],["createtaskdto.title",{"_index":765,"title":{},"body":{"injectables/TasksService.html":{}}}],["createtasklistdto",{"_index":428,"title":{"classes/CreateTaskListDto.html":{}},"body":{"classes/CreateTaskListDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["createtasklistdto.title",{"_index":781,"title":{},"body":{"injectables/TasksService.html":{}}}],["createuser",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":432,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":923,"title":{},"body":{"injectables/UsersService.html":{}}}],["cs",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.program",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.tscompiler.program",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":93,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["ctx.getrequest",{"_index":96,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["ctx.getresponse",{"_index":98,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["data",{"_index":11,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":603,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["database.ts",{"_index":575,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["database.ts:18",{"_index":583,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{}}}],["database.ts:21",{"_index":585,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{}}}],["database.ts:23",{"_index":588,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{}}}],["database.ts:28",{"_index":586,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{}}}],["database.ts:39",{"_index":589,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{}}}],["database.ts:44",{"_index":625,"title":{},"body":{"classes/SqliteInMemoryDatabase.html":{}}}],["database.ts:47",{"_index":626,"title":{},"body":{"classes/SqliteInMemoryDatabase.html":{}}}],["database.ts:49",{"_index":628,"title":{},"body":{"classes/SqliteInMemoryDatabase.html":{}}}],["database.ts:53",{"_index":627,"title":{},"body":{"classes/SqliteInMemoryDatabase.html":{}}}],["database.ts:6",{"_index":793,"title":{},"body":{"interfaces/TestDatabase.html":{}}}],["database.ts:61",{"_index":629,"title":{},"body":{"classes/SqliteInMemoryDatabase.html":{}}}],["database.ts:7",{"_index":794,"title":{},"body":{"interfaces/TestDatabase.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/Account.html":{},"controllers/AuthController.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/allow",{"_index":485,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["decorators/auth.decorator",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/no",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/optional",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/roles.decorator",{"_index":380,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["decorators/user.decorator",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["delete",{"_index":708,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('list/:id",{"_index":695,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('task/:id",{"_index":698,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleting",{"_index":938,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":107,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":46,"title":{},"body":{"interfaces/AccountInterface.html":{},"classes/CreateTaskDto.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"interfaces/UserInterface.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1085,"title":{},"body":{"index.html":{}}}],["disable",{"_index":612,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["documentation",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["dto/connect",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["dto/create",{"_index":712,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["dto/log",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/sign",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":715,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":1095,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1075,"title":{},"body":{"index.html":{}}}],["email",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["email/i.test(message",{"_index":920,"title":{},"body":{"injectables/UsersService.html":{}}}],["empty",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["empty'})@matches(/^(?:[a",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["empty'})@minlength(8",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["enableimplicitconversion",{"_index":155,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["end",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["enter",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["entities/account.entity",{"_index":872,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/task",{"_index":741,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["entities/task.entity",{"_index":742,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["entities/user.entity",{"_index":873,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":31,"title":{},"body":{"classes/Account.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["entity('accounts",{"_index":37,"title":{},"body":{"classes/Account.html":{}}}],["entity('task",{"_index":646,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{}}}],["entity('users",{"_index":832,"title":{},"body":{"classes/User.html":{}}}],["env",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["env.example",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":481,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["error",{"_index":943,"title":{},"body":{"injectables/UsersService.html":{}}}],["error('method",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["error('something",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":611,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["eslint/no",{"_index":616,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["even",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":410,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["exception",{"_index":81,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["exceptionfilter",{"_index":62,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["executioncontext",{"_index":362,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["expandvariables",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["expiresin",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["exports",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":88,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":60,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserPasswordInterface.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["extractjwt",{"_index":533,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":535,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":54,"title":{},"body":{"interfaces/AccountInterface.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":1012,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":152,"title":{},"body":{"classes/AppValidationPipe.html":{},"injectables/JwtStrategy.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["findaccount",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["findaccount(type",{"_index":895,"title":{},"body":{"injectables/UsersService.html":{}}}],["findalllists",{"_index":670,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findalltasks",{"_index":671,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findallusers",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["finding",{"_index":952,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonelist",{"_index":672,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findonelist(@param('id",{"_index":732,"title":{},"body":{"controllers/TasksController.html":{}}}],["findonelist(id",{"_index":688,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findonetask",{"_index":673,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findonetask(@param('id",{"_index":723,"title":{},"body":{"controllers/TasksController.html":{}}}],["findonetask(id",{"_index":691,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["finduserbyemail",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":898,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(id",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["finduserbyusername",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyusername(username",{"_index":902,"title":{},"body":{"injectables/UsersService.html":{}}}],["forbidnonwhitelisted",{"_index":151,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["forbidunknownvalues",{"_index":153,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["found",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1073,"title":{},"body":{"index.html":{}}}],["function",{"_index":592,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"coverage.html":{}}}],["functions",{"_index":1052,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":862,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@optionalauth",{"_index":849,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('@:username",{"_index":865,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('@:username')@optionalauth",{"_index":852,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('google",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@optionalauth(googleauthguard",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('list",{"_index":684,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('list/:id",{"_index":689,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('task",{"_index":686,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('task/:id",{"_index":692,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('vkontakte",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('vkontakte')@optionalauth(vkontakteauthguard",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@auth()@roles('moderator",{"_index":846,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(key",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getall",{"_index":843,"title":{},"body":{"controllers/UsersController.html":{}}}],["getconnectionoptions",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["getprofilebyid",{"_index":844,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyid(@param('id",{"_index":863,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyid(id",{"_index":848,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyusername",{"_index":845,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyusername(@param('username",{"_index":866,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyusername(username",{"_index":851,"title":{},"body":{"controllers/UsersController.html":{}}}],["gettestdatabase",{"_index":593,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getting",{"_index":1069,"title":{"index.html":{}},"body":{}}],["google",{"_index":55,"title":{},"body":{"interfaces/AccountInterface.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["googleauthguard",{"_index":204,"title":{"injectables/GoogleAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["googlestrategy",{"_index":238,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["grow",{"_index":1102,"title":{},"body":{"index.html":{}}}],["guard",{"_index":356,"title":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"guards/NoAuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":358,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"guards/NoAuthenticationGuard.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["handlerequest",{"_index":475,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["handlerequest(err",{"_index":478,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["hash",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["helmet",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1112,"title":{},"body":{"index.html":{}}}],["host",{"_index":78,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["host.switchtohttp",{"_index":94,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["https://nestjs.com",{"_index":1119,"title":{},"body":{"index.html":{}}}],["httpserver",{"_index":69,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["hyphen",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["hyphens",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["id",{"_index":12,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"injectables/AuthService.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{}}}],["identifier",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["id}@${type",{"_index":955,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":536,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"classes/User.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["imports",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["in.dto",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpDto.html":{}}}],["in.dto.ts",{"_index":557,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["in.dto.ts:14",{"_index":560,"title":{},"body":{"classes/LogInDto.html":{}}}],["in.dto.ts:22",{"_index":559,"title":{},"body":{"classes/LogInDto.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index()@column({length",{"_index":818,"title":{},"body":{"classes/User.html":{}}}],["indexhtml",{"_index":74,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["inherited",{"_index":621,"title":{},"body":{"classes/SignUpDto.html":{}}}],["inject",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":262,"title":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["injectables",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"overview.html":{}}}],["injectrepository",{"_index":761,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(account",{"_index":914,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(task",{"_index":762,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(tasklist",{"_index":763,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(user",{"_index":913,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1082,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1084,"title":{},"body":{"index.html":{}}}],["interface",{"_index":43,"title":{"interfaces/AccountInterface.html":{},"interfaces/TestDatabase.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{}},"body":{"interfaces/AccountInterface.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":44,"title":{},"body":{"interfaces/AccountInterface.html":{},"interfaces/TestDatabase.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"overview.html":{}}}],["introspectcomments",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":527,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["isauthenticated",{"_index":368,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["isauthorized",{"_index":389,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["isboolean",{"_index":802,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["iscontainerized",{"_index":577,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["isdone",{"_index":632,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{}}}],["isemail",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["isemail(undefined",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["isglobal",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":408,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["isin(accounttypes",{"_index":406,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["isint",{"_index":422,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["isnotempty",{"_index":399,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["isnotempty({message",{"_index":558,"title":{},"body":{"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["isoptional",{"_index":396,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{}}}],["isoptional()@isnotempty({message",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispublic",{"_index":487,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["isstring",{"_index":420,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["isstring()@maxlength(255",{"_index":424,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["issuejwt",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["issuejwt(user",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["isunauthenticated",{"_index":566,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["isvalidjwt",{"_index":524,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["isvalidpassword",{"_index":546,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["jest",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.mocked",{"_index":1060,"title":{},"body":{"miscellaneous/functions.html":{}}}],["john",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["john@example.com",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["join",{"_index":1109,"title":{},"body":{"index.html":{}}}],["json",{"_index":18,"title":{},"body":{"classes/Account.html":{}}}],["json.stringify(account",{"_index":941,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwt",{"_index":526,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":520,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":534,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":239,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1116,"title":{},"body":{"index.html":{}}}],["key",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyof",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leftjoinandselect('user.accounts",{"_index":929,"title":{},"body":{"injectables/UsersService.html":{}}}],["length",{"_index":649,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["license",{"_index":1122,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1099,"title":{},"body":{"index.html":{}}}],["line",{"_index":614,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["list",{"_index":418,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"injectables/TasksService.html":{}}}],["list.dto",{"_index":713,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{}}}],["list.dto.ts",{"_index":430,"title":{},"body":{"classes/CreateTaskListDto.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["list.dto.ts:11",{"_index":809,"title":{},"body":{"classes/UpdateTaskListDto.html":{}}}],["list.dto.ts:6",{"_index":431,"title":{},"body":{"classes/CreateTaskListDto.html":{}}}],["list.dto.ts:7",{"_index":808,"title":{},"body":{"classes/UpdateTaskListDto.html":{}}}],["list.entity",{"_index":645,"title":{},"body":{"classes/Task.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["list.entity.ts",{"_index":653,"title":{},"body":{"classes/TaskList.html":{},"coverage.html":{}}}],["list.entity.ts:11",{"_index":655,"title":{},"body":{"classes/TaskList.html":{}}}],["list.entity.ts:14",{"_index":661,"title":{},"body":{"classes/TaskList.html":{}}}],["list.entity.ts:21",{"_index":660,"title":{},"body":{"classes/TaskList.html":{}}}],["list.tasks",{"_index":651,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{}}}],["list.tasks.push(task",{"_index":771,"title":{},"body":{"injectables/TasksService.html":{}}}],["list.tasks.sort((a",{"_index":785,"title":{},"body":{"injectables/TasksService.html":{}}}],["list.title",{"_index":780,"title":{},"body":{"injectables/TasksService.html":{}}}],["listrepository",{"_index":748,"title":{},"body":{"injectables/TasksService.html":{}}}],["lists",{"_index":782,"title":{},"body":{"injectables/TasksService.html":{}}}],["lists.foreach((list",{"_index":784,"title":{},"body":{"injectables/TasksService.html":{}}}],["local",{"_index":552,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":207,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":240,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":624,"title":{},"body":{"classes/SignUpDto.html":{}}}],["logger",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["logger(authenticationguard.name",{"_index":366,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["logger(authorizationguard.name",{"_index":381,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["logger(authservice.name",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger(googleauthguard.name",{"_index":482,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["logger(googlestrategy.name",{"_index":501,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["logger(jwtauthguard.name",{"_index":522,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["logger(localauthguard.name",{"_index":543,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["logger(noauthenticationguard.name",{"_index":565,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["logger(optionaljwtauthguard.name",{"_index":571,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["logger(usersservice.name",{"_index":912,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(vkontakteauthguard.name",{"_index":957,"title":{},"body":{"injectables/VkontakteAuthGuard.html":{}}}],["logger(vkontaktestrategy.name",{"_index":962,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["login",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@user",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(user",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":169,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["logindto:14",{"_index":623,"title":{},"body":{"classes/SignUpDto.html":{}}}],["logindto:22",{"_index":622,"title":{},"body":{"classes/SignUpDto.html":{}}}],["loginwithaccount",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginwithaccount(connectaccountdto",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginwithgoogle",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgoogle(@user",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgoogle(user",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithvkontakte",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithvkontakte(@user",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithvkontakte(user",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@user",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(user",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["manytoone",{"_index":32,"title":{},"body":{"classes/Account.html":{},"classes/Task.html":{}}}],["manytoone((_type",{"_index":650,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":26,"title":{},"body":{"classes/Account.html":{},"classes/Task.html":{}}}],["mark",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["matches(/^(?:[a",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["matching",{"_index":42,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":426,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["maxlength(255",{"_index":427,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["memory",{"_index":610,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["message",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1039,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["methodnames",{"_index":1059,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":63,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["minlength",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["minlength(8",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["miscellaneous",{"_index":1051,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1098,"title":{},"body":{"index.html":{}}}],["mockedconfigservice",{"_index":1010,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1088,"title":{},"body":{"index.html":{}}}],["moderator",{"_index":836,"title":{},"body":{"interfaces/UserInterface.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":104,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":106,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1111,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1117,"title":{},"body":{"index.html":{}}}],["name",{"_index":72,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":1080,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1121,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":84,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":85,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":805,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["nestjs/passport",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["newaccount",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":613,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["noauth",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["noauth(localauthguard",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["noauthenticationguard",{"_index":561,"title":{"guards/NoAuthenticationGuard.html":{}},"body":{"guards/NoAuthenticationGuard.html":{},"coverage.html":{}}}],["node.js",{"_index":1072,"title":{},"body":{"index.html":{}}}],["normalize",{"_index":999,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["normalize(collection",{"_index":1061,"title":{},"body":{"miscellaneous/functions.html":{}}}],["notfoundexception",{"_index":77,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`account",{"_index":954,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":925,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1083,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":820,"title":{},"body":{"classes/User.html":{}}}],["number",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":505,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":1067,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(await",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["older",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["omit",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["omit(obj",{"_index":1064,"title":{},"body":{"miscellaneous/functions.html":{}}}],["omit(user",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["ondelete",{"_index":658,"title":{},"body":{"classes/TaskList.html":{}}}],["onetomany",{"_index":662,"title":{},"body":{"classes/TaskList.html":{},"classes/User.html":{}}}],["onetomany((_type",{"_index":664,"title":{},"body":{"classes/TaskList.html":{}}}],["onetomany(undefined",{"_index":656,"title":{},"body":{"classes/TaskList.html":{},"classes/User.html":{}}}],["onupdate",{"_index":659,"title":{},"body":{"classes/TaskList.html":{}}}],["open",{"_index":1100,"title":{},"body":{"index.html":{}}}],["optional",{"_index":73,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{}}}],["optionalauth",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["optionalauth(googleauthguard",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["optionalauth(vkontakteauthguard",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["optionaljwtauthguard",{"_index":569,"title":{"injectables/OptionalJwtAuthGuard.html":{}},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["optionally",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orderby",{"_index":647,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{}}}],["out",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["outer",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1126,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1016,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":709,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":71,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["partial",{"_index":402,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["partialtype",{"_index":797,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createaccountdto",{"_index":799,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["partialtype(createtaskdto",{"_index":807,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["partialtype(createtasklistdto",{"_index":810,"title":{},"body":{"classes/UpdateTaskListDto.html":{}}}],["partialtype(createuserdto",{"_index":813,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":504,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{}}}],["passport/guards/google",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["passport/guards/local",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["passport/guards/vkontakte",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["passport/strategies/google.strategy",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/strategies/jwt.strategy",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/strategies/local.strategy",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/strategies/vkontakte.strategy",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":502,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["passportstrategy(strategy",{"_index":506,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["passreqtocallback",{"_index":516,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["password",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"classes/User.html":{},"interfaces/UserPasswordInterface.html":{}}}],["password.interface",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{}}}],["password.interface.ts",{"_index":839,"title":{},"body":{"interfaces/UserPasswordInterface.html":{},"coverage.html":{}}}],["passwordfield",{"_index":554,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["patch",{"_index":710,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('list/:id",{"_index":702,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('task/:id",{"_index":706,"title":{},"body":{"controllers/TasksController.html":{}}}],["payload",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":538,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":395,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["pick(obj",{"_index":1068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["please",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalAuthGuard.html":{},"classes/SignUpDto.html":{},"index.html":{}}}],["port",{"_index":601,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["post",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('list",{"_index":679,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('login",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@noauth(localauthguard)@apibody({type",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@auth",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@noauth",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('task",{"_index":682,"title":{},"body":{"controllers/TasksController.html":{}}}],["postgres",{"_index":599,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["postgresqlcontainer",{"_index":590,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["postgresqlcontainer().start",{"_index":597,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["postgresqlcontainerdatabase",{"_index":573,"title":{"classes/PostgresqlContainerDatabase.html":{}},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"coverage.html":{}}}],["postgresqlcontainerdatabase(container",{"_index":598,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["postgresqlcontainerdatabase.start",{"_index":595,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["prefix",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["primarycolumn",{"_index":22,"title":{},"body":{"classes/Account.html":{}}}],["primarygeneratedcolumn",{"_index":636,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["private",{"_index":90,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["process.env.use_testcontainers",{"_index":594,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["production",{"_index":1090,"title":{},"body":{"index.html":{}}}],["profile",{"_index":499,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["profile.displayname",{"_index":517,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["progressive",{"_index":1071,"title":{},"body":{"index.html":{}}}],["project",{"_index":1101,"title":{},"body":{"index.html":{}}}],["promise",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":10,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["property",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["propertynames",{"_index":1058,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["props",{"_index":1066,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provide",{"_index":101,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/LocalAuthGuard.html":{},"classes/SignUpDto.html":{}}}],["providers",{"_index":100,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":417,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/TaskList.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"miscellaneous/variables.html":{}}}],["public_key",{"_index":484,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":926,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.addselect('user.password",{"_index":931,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.getone",{"_index":932,"title":{},"body":{"injectables/UsersService.html":{}}}],["read",{"_index":1110,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":91,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["record",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":375,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["refreshtoken",{"_index":498,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["relations",{"_index":770,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["removeaccount",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeaccount(type",{"_index":904,"title":{},"body":{"injectables/UsersService.html":{}}}],["removelist",{"_index":674,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removelist(@param('id",{"_index":736,"title":{},"body":{"controllers/TasksController.html":{}}}],["removelist(id",{"_index":694,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removetask",{"_index":675,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removetask(@param('id",{"_index":727,"title":{},"body":{"controllers/TasksController.html":{}}}],["removetask(id",{"_index":697,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removeuser",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeuser(id",{"_index":906,"title":{},"body":{"injectables/UsersService.html":{}}}],["removing",{"_index":950,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":747,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":95,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.baseurl",{"_index":103,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["req.isauthenticated",{"_index":369,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["req.isunauthenticated",{"_index":567,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["req.user",{"_index":388,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":86,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":97,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["res.render(indexhtml",{"_index":99,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["reset",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":87,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["results",{"_index":41,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":82,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":816,"title":{},"body":{"classes/User.html":{},"interfaces/UserInterface.html":{}}}],["roles",{"_index":382,"title":{},"body":{"guards/AuthorizationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('moderator",{"_index":860,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.includes(user.role",{"_index":390,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["roles.length",{"_index":386,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["roles_key",{"_index":379,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routes",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1086,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["saltrounds",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":1076,"title":{},"body":{"index.html":{}}}],["scope",{"_index":513,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["secret",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":537,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":825,"title":{},"body":{"classes/User.html":{}}}],["server",{"_index":1077,"title":{},"body":{"index.html":{}}}],["service",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["service.mock.ts",{"_index":1009,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(public_key",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1078,"title":{},"body":{"index.html":{}}}],["sign",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(signupdto",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupdto",{"_index":182,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["single",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["skipping",{"_index":572,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["social",{"_index":47,"title":{},"body":{"interfaces/AccountInterface.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"index.html":{}}}],["specific",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["split",{"_index":515,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["sponsors",{"_index":1104,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":609,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["sqlite3",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["sqliteinmemorydatabase",{"_index":608,"title":{"classes/SqliteInMemoryDatabase.html":{}},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"coverage.html":{}}}],["sqliteinmemorydatabase.start",{"_index":596,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["src/.../account.interface.ts",{"_index":1133,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../allow",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../no",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../optional",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../testing.ts",{"_index":1054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.decorator.ts",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.interface.ts",{"_index":1134,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../utilities.ts",{"_index":1056,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/angular",{"_index":58,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"coverage.html":{}}}],["src/app",{"_index":143,"title":{},"body":{"classes/AppValidationPipe.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:67",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:85",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:90",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/allow",{"_index":975,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":981,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/no",{"_index":982,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/optional",{"_index":983,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":984,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":986,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/connect",{"_index":393,"title":{},"body":{"classes/ConnectAccountDto.html":{},"coverage.html":{}}}],["src/auth/dto/log",{"_index":556,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/auth/dto/sign",{"_index":617,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts",{"_index":359,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts:8",{"_index":363,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authorization.guard.ts",{"_index":373,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authorization.guard.ts:13",{"_index":377,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/auth/guards/authorization.guard.ts:9",{"_index":376,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/auth/guards/no",{"_index":562,"title":{},"body":{"guards/NoAuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/google",{"_index":473,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/jwt",{"_index":521,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/local",{"_index":540,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/optional",{"_index":570,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/vkontakte",{"_index":956,"title":{},"body":{"injectables/VkontakteAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/google.strategy.ts",{"_index":492,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/google.strategy.ts:12",{"_index":495,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/passport/strategies/google.strategy.ts:24",{"_index":500,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/passport/strategies/jwt.strategy.ts",{"_index":529,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/jwt.strategy.ts:18",{"_index":532,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/strategies/jwt.strategy.ts:9",{"_index":530,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/strategies/local.strategy.ts",{"_index":548,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/local.strategy.ts:16",{"_index":551,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/passport/strategies/local.strategy.ts:8",{"_index":549,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/passport/strategies/vkontakte.strategy.ts",{"_index":959,"title":{},"body":{"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/vkontakte.strategy.ts:12",{"_index":960,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["src/auth/passport/strategies/vkontakte.strategy.ts:24",{"_index":961,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["src/common/interfaces/account.interface.ts",{"_index":45,"title":{},"body":{"interfaces/AccountInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/interfaces/user",{"_index":838,"title":{},"body":{"interfaces/UserPasswordInterface.html":{},"coverage.html":{}}}],["src/common/interfaces/user.interface.ts",{"_index":833,"title":{},"body":{"interfaces/UserInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/testing.ts",{"_index":997,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utilities.ts",{"_index":1000,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/main.ts",{"_index":1001,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tasks/dto/create",{"_index":415,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"coverage.html":{}}}],["src/tasks/dto/update",{"_index":800,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["src/tasks/entities/task",{"_index":652,"title":{},"body":{"classes/TaskList.html":{},"coverage.html":{}}}],["src/tasks/entities/task.entity.ts",{"_index":630,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/tasks/entities/task.entity.ts:11",{"_index":637,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:14",{"_index":644,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:17",{"_index":635,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:20",{"_index":639,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:23",{"_index":641,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:26",{"_index":634,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":667,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:17",{"_index":683,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:22",{"_index":687,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:27",{"_index":693,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:32",{"_index":707,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:37",{"_index":699,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:42",{"_index":680,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:47",{"_index":685,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:52",{"_index":690,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:57",{"_index":703,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:62",{"_index":696,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":740,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":745,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:12",{"_index":749,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:20",{"_index":752,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:32",{"_index":754,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:36",{"_index":756,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:40",{"_index":760,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:48",{"_index":758,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:52",{"_index":751,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:59",{"_index":753,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:67",{"_index":755,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:71",{"_index":759,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:75",{"_index":757,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/users/dto/create",{"_index":413,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":796,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/account.entity.ts",{"_index":6,"title":{},"body":{"classes/Account.html":{},"coverage.html":{}}}],["src/users/entities/account.entity.ts:10",{"_index":25,"title":{},"body":{"classes/Account.html":{}}}],["src/users/entities/account.entity.ts:13",{"_index":23,"title":{},"body":{"classes/Account.html":{}}}],["src/users/entities/account.entity.ts:16",{"_index":20,"title":{},"body":{"classes/Account.html":{}}}],["src/users/entities/account.entity.ts:19",{"_index":28,"title":{},"body":{"classes/Account.html":{}}}],["src/users/entities/user.entity.ts",{"_index":814,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:13",{"_index":821,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":830,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":826,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":828,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":824,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":817,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:9",{"_index":822,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":841,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:18",{"_index":847,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:25",{"_index":850,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":853,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":871,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":909,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:120",{"_index":905,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:127",{"_index":897,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:13",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:133",{"_index":896,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":894,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":901,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":903,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:58",{"_index":900,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:73",{"_index":911,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":907,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:99",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":579,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"index.html":{}}}],["start:dev",{"_index":1089,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1091,"title":{},"body":{"index.html":{}}}],["started",{"_index":1070,"title":{"index.html":{}},"body":{}}],["startedpostgresqlcontainer",{"_index":582,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["starter",{"_index":1081,"title":{},"body":{"index.html":{}}}],["statements",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":578,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["status",{"_index":479,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["stay",{"_index":1113,"title":{},"body":{"index.html":{}}}],["stop",{"_index":580,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["strategy",{"_index":503,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["string",{"_index":21,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":147,"title":{},"body":{"classes/AppValidationPipe.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["super(applicationref",{"_index":92,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["super.canactivate(context",{"_index":489,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["support",{"_index":1105,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1124,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1047,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":1065,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":919,"title":{},"body":{"injectables/UsersService.html":{}}}],["task",{"_index":429,"title":{"classes/Task.html":{}},"body":{"classes/CreateTaskListDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["task.description",{"_index":766,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.dto",{"_index":714,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":416,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:11",{"_index":801,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:12",{"_index":423,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:14",{"_index":803,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:6",{"_index":425,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:8",{"_index":804,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:9",{"_index":421,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":663,"title":{},"body":{"classes/TaskList.html":{}}}],["task.isdone",{"_index":768,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.list",{"_index":665,"title":{},"body":{"classes/TaskList.html":{}}}],["task.title",{"_index":764,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasklist",{"_index":640,"title":{"classes/TaskList.html":{}},"body":{"classes/Task.html":{},"classes/TaskList.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["taskrepository",{"_index":750,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks",{"_index":654,"title":{},"body":{"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["tasks.controller",{"_index":743,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":717,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":666,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":111,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":716,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1094,"title":{},"body":{"index.html":{}}}],["test/.../config",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/.../swagger.transformer.ts",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/.../test",{"_index":1055,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/config",{"_index":1008,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test/swagger.transformer.ts",{"_index":1011,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test/test",{"_index":574,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["test:covsupport",{"_index":1097,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1096,"title":{},"body":{"index.html":{}}}],["testcontainers",{"_index":591,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["testdatabase",{"_index":576,"title":{"interfaces/TestDatabase.html":{}},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"coverage.html":{}}}],["tests",{"_index":1093,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1103,"title":{},"body":{"index.html":{}}}],["this.accountsrepository.create",{"_index":939,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.accountsrepository.delete",{"_index":948,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.accountsrepository.findone",{"_index":953,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.accountsrepository.save(account).catch((error",{"_index":942,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.accountsrepository.update",{"_index":946,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.connectaccount(connectaccountdto",{"_index":518,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["this.authservice.finduserbyid(+id",{"_index":539,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.issuejwt(user",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":555,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.loginwithaccount(connectaccountdto",{"_index":519,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["this.authservice.logout(user",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(signupdto",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('password_salt_rounds",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.container.getdatabase",{"_index":604,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["this.container.gethost",{"_index":600,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["this.container.getpassword",{"_index":606,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["this.container.getport",{"_index":602,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["this.container.getusername",{"_index":605,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["this.container.stop",{"_index":607,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{}}}],["this.finduserbyid(id",{"_index":936,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.listrepository.delete(id",{"_index":792,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.find",{"_index":783,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.findone(id",{"_index":789,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.findoneorfail(createtaskdto.list",{"_index":769,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.save(list",{"_index":772,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.update(id",{"_index":790,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.logger.debug(`create",{"_index":940,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.log('authenticating",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log('creating",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log(`new",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.verbose",{"_index":490,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["this.logger.verbose(isauthenticated",{"_index":370,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.logger.verbose(isauthorized",{"_index":391,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.logger.verbose(isunauthenticated",{"_index":568,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["this.logger.verbose(isvalidjwt",{"_index":525,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["this.logger.verbose(isvalidpassword",{"_index":547,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["this.reflector.getallandoverride(public_key",{"_index":488,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":383,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.taskrepository.delete(id",{"_index":779,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.find",{"_index":773,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findone(id",{"_index":774,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.update(id",{"_index":775,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createlist(createtasklistdto",{"_index":730,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":721,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findalllists",{"_index":731,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findalltasks",{"_index":722,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findonelist(id",{"_index":733,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findonetask(id",{"_index":724,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.removelist(id",{"_index":737,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.removetask(id",{"_index":728,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatelist(id",{"_index":735,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatetask(id",{"_index":726,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.usersrepository",{"_index":927,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":915,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":951,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone(id",{"_index":924,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.preload",{"_index":934,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.remove(user).catch",{"_index":937,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user).catch",{"_index":916,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createaccount(user.id",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createuser",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createuser(info",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findaccount(type",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findallusers",{"_index":861,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyid(id",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyusername(username",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateaccount(account",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["title",{"_index":419,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["token",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["touch",{"_index":1114,"title":{},"body":{"index.html":{}}}],["transform",{"_index":148,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["transformer",{"_index":1024,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["transformer.before",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformoptions",{"_index":154,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["true",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/TaskList.html":{},"interfaces/TestDatabase.html":{},"classes/User.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["tscompilerinstance",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":1120,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1131,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":34,"title":{},"body":{"classes/Account.html":{},"modules/AppModule.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"injectables/TasksService.html":{},"interfaces/TestDatabase.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":744,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":875,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":806,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["typescript",{"_index":615,"title":{},"body":{"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"index.html":{}}}],["ui",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["unauthorizedexception('the",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('wrong",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(info?.message",{"_index":491,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["undefined",{"_index":27,"title":{},"body":{"classes/Account.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":33,"title":{},"body":{"classes/Account.html":{},"classes/User.html":{}}}],["unique(['type",{"_index":38,"title":{},"body":{"classes/Account.html":{}}}],["unique/i.test(message",{"_index":917,"title":{},"body":{"injectables/UsersService.html":{}}}],["unit",{"_index":1092,"title":{},"body":{"index.html":{}}}],["universal.filter.ts",{"_index":59,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"coverage.html":{}}}],["universal.filter.ts:15",{"_index":70,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["universal.filter.ts:24",{"_index":80,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["unknown",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["up.dto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["up.dto.ts",{"_index":618,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["up.dto.ts:14",{"_index":620,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:22",{"_index":619,"title":{},"body":{"classes/SignUpDto.html":{}}}],["updateaccount",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateaccount(type",{"_index":908,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateaccountdto",{"_index":795,"title":{"classes/UpdateAccountDto.html":{}},"body":{"classes/UpdateAccountDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateaccountdto).catch((error",{"_index":947,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatelist",{"_index":676,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatelist(@param('id",{"_index":734,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatelist(id",{"_index":700,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetask",{"_index":677,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetask(@param('id",{"_index":725,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatetask(id",{"_index":704,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskdto",{"_index":705,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updatetaskdto.description",{"_index":777,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskdto.isdone",{"_index":778,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskdto.title",{"_index":776,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetasklistdto",{"_index":701,"title":{"classes/UpdateTaskListDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["updatetasklistdto.title",{"_index":791,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateuser",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":910,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":811,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":935,"title":{},"body":{"injectables/UsersService.html":{}}}],["useclass",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":921,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards(jwtauthguard",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards(noauthenticationguard",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":14,"title":{"classes/User.html":{}},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"classes/LogInDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.accounts",{"_index":40,"title":{},"body":{"classes/Account.html":{}}}],["user.accounts.some((account",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":812,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":36,"title":{},"body":{"classes/Account.html":{}}}],["user.id",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.interface",{"_index":51,"title":{},"body":{"interfaces/AccountInterface.html":{},"interfaces/UserPasswordInterface.html":{}}}],["user.name",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.[data",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user?.id",{"_index":864,"title":{},"body":{"controllers/UsersController.html":{}}}],["user?.username",{"_index":867,"title":{},"body":{"controllers/UsersController.html":{}}}],["userinterface",{"_index":48,"title":{"interfaces/UserInterface.html":{}},"body":{"interfaces/AccountInterface.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SignUpDto.html":{},"classes/SqliteInMemoryDatabase.html":{},"interfaces/TestDatabase.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username/i.test(message",{"_index":918,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":553,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpasswordinterface",{"_index":462,"title":{"interfaces/UserPasswordInterface.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"interfaces/UserPasswordInterface.html":{},"coverage.html":{}}}],["userrole",{"_index":378,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":835,"title":{},"body":{"interfaces/UserInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":842,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":874,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":857,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":840,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":112,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":272,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":102,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["utilities",{"_index":50,"title":{},"body":{"interfaces/AccountInterface.html":{},"interfaces/UserInterface.html":{}}}],["valid",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{}}}],["validate",{"_index":493,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["validate(payload",{"_index":531,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req",{"_index":496,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["validate(username",{"_index":550,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatecustomdecorators",{"_index":149,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["validation.pipe",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["validation.pipe.ts",{"_index":144,"title":{},"body":{"classes/AppValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:3",{"_index":146,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["validationpipe",{"_index":145,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["validator",{"_index":409,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"dependencies.html":{}}}],["value",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/PostgresqlContainerDatabase.html":{},"classes/SqliteInMemoryDatabase.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values[key",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1135,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1013,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["versions",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vkontakte",{"_index":56,"title":{},"body":{"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["vkontakteauthguard",{"_index":209,"title":{"injectables/VkontakteAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/VkontakteAuthGuard.html":{},"coverage.html":{}}}],["vkontaktestrategy",{"_index":241,"title":{"injectables/VkontakteStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["void",{"_index":83,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["watch",{"_index":1087,"title":{},"body":{"index.html":{}}}],["website",{"_index":1118,"title":{},"body":{"index.html":{}}}],["went",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('user.email",{"_index":933,"title":{},"body":{"injectables/UsersService.html":{}}}],["where('user.username",{"_index":930,"title":{},"body":{"injectables/UsersService.html":{}}}],["whitelist",{"_index":150,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["withpassword",{"_index":899,"title":{},"body":{"injectables/UsersService.html":{}}}],["wrong",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["yes",{"_index":75,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/UsersController.html":{},"injectables/VkontakteAuthGuard.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":1108,"title":{},"body":{"index.html":{}}}],["z0",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["zoom",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Account.html":{"url":"classes/Account.html","title":"class - Account","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/account.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AccountInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                id\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/account.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/account.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/account.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/account.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn, Unique } from 'typeorm';\nimport { AccountInterface, AccountType } from '../../common/interfaces/account.interface';\nimport { User } from './user.entity';\n\n@Entity('accounts')\n@Unique(['type', 'id'])\n@Unique(['type', 'user'])\nexport class Account implements AccountInterface {\n  @PrimaryColumn()\n  type: AccountType;\n\n  @PrimaryColumn()\n  id: string;\n\n  @Column('simple-json')\n  data: any;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountInterface.html":{"url":"interfaces/AccountInterface.html","title":"interface - AccountInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/account.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface of a social account\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         AccountType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayElement } from '../utilities';\nimport { UserInterface } from './user.interface';\n\nexport const accountTypes = ['facebook', 'google', 'vkontakte'] as const;\n\nexport type AccountType = ArrayElement;\n\n/**\n * An interface of a social account\n */\nexport interface AccountInterface {\n  type: AccountType;\n  id: string;\n  data: any;\n  user: UserInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AngularUniversalFilter.html":{"url":"classes/AngularUniversalFilter.html","title":"class - AngularUniversalFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AngularUniversalFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/angular-universal.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(indexHtml: string, APP_BASE_HREF: any, applicationRef?: HttpServer)\n                    \n                \n                        \n                            \n                                Defined in src/angular-universal.filter.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        indexHtml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        APP_BASE_HREF\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        applicationRef\n                                                  \n                                                        \n                                                                    HttpServer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: NotFoundException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/angular-universal.filter.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            NotFoundException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpServer,\n  NotFoundException,\n} from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { Request, Response } from 'express';\n\n@Catch(NotFoundException)\nexport class AngularUniversalFilter\n  extends BaseExceptionFilter\n  implements ExceptionFilter\n{\n  constructor(\n    private readonly indexHtml: string,\n    private readonly APP_BASE_HREF: any,\n    applicationRef?: HttpServer,\n  ) {\n    super(applicationRef);\n  }\n\n  catch(exception: NotFoundException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const req = ctx.getRequest();\n    const res = ctx.getResponse();\n\n    const { indexHtml, APP_BASE_HREF } = this;\n    res.render(indexHtml, {\n      req,\n      providers: [{ provide: APP_BASE_HREF, useValue: req.baseUrl }],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_PIPE } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { getConnectionOptions } from 'typeorm';\nimport { AppValidationPipe } from './app-validation.pipe';\nimport { AuthModule } from './auth/auth.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: ['.env', '.env.example'],\n      isGlobal: true,\n      expandVariables: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      useFactory: async () =>\n        Object.assign(await getConnectionOptions(), {\n        autoLoadEntities: true,\n      }),\n    }),\n    AuthModule,\n    UsersModule,\n    TasksModule,\n  ],\n  providers: [{ provide: APP_PIPE, useClass: AppValidationPipe }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppValidationPipe.html":{"url":"classes/AppValidationPipe.html","title":"class - AppValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app-validation.pipe.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ValidationPipe\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app-validation.pipe.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationPipe } from '@nestjs/common';\n\nexport class AppValidationPipe extends ValidationPipe {\n  constructor() {\n    super({\n      transform: true,\n      validateCustomDecorators: true,\n      whitelist: true,\n      forbidNonWhitelisted: false,\n      forbidUnknownValues: true,\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logInWithGoogle\n                            \n                            \n                                    Async\n                                logInWithVkontakte\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@NoAuth(LocalAuthGuard)@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logInWithGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    logInWithGoogle(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@OptionalAuth(GoogleAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logInWithVkontakte\n                        \n                    \n                \n            \n            \n                \n                    \n                    logInWithVkontakte(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vkontakte')@OptionalAuth(VkontakteAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@Auth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@NoAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { UserInterface } from '../common/interfaces/user.interface';\nimport { AuthService } from './auth.service';\nimport { Auth } from './decorators/auth.decorator';\nimport { NoAuth } from './decorators/no-auth.decorator';\nimport { OptionalAuth } from './decorators/optional-auth.decorator';\nimport { User } from './decorators/user.decorator';\nimport { LogInDto } from './dto/log-in.dto';\nimport { SignUpDto } from './dto/sign-up.dto';\nimport { GoogleAuthGuard } from './passport/guards/google-auth.guard';\nimport { LocalAuthGuard } from './passport/guards/local-auth.guard';\nimport { VkontakteAuthGuard } from './passport/guards/vkontakte-auth.guard';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  @NoAuth(LocalAuthGuard)\n  @ApiBody({ type: LogInDto })\n  async logIn(@User() user: UserInterface) {\n    const token = await this.authService.issueJwt(user);\n    return { access_token: token };\n  }\n\n  @Post('signup')\n  @NoAuth()\n  async signUp(@Body() signUpDto: SignUpDto) {\n    const user = await this.authService.signUp(signUpDto);\n    const token = await this.authService.issueJwt(user);\n    return { access_token: token };\n  }\n\n  @Post('logout')\n  @Auth()\n  async logOut(@User() user: UserInterface) {\n    return this.authService.logOut(user);\n  }\n\n  @Get('google')\n  @OptionalAuth(GoogleAuthGuard)\n  async logInWithGoogle(@User() user: UserInterface) {\n    const token = await this.authService.issueJwt(user);\n    return { access_token: token };\n  }\n\n  @Get('vkontakte')\n  @OptionalAuth(VkontakteAuthGuard)\n  async logInWithVkontakte(@User() user: UserInterface) {\n    const token = await this.authService.issueJwt(user);\n    return { access_token: token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nVkontakteStrategy\n\nVkontakteStrategy\n\nAuthModule -->\n\nVkontakteStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            VkontakteStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from '../users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { GoogleStrategy } from './passport/strategies/google.strategy';\nimport { JwtStrategy } from './passport/strategies/jwt.strategy';\nimport { LocalStrategy } from './passport/strategies/local.strategy';\nimport { VkontakteStrategy } from './passport/strategies/vkontakte.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: configService.get('JWT_TIMEOUT', '30m') },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, GoogleStrategy, VkontakteStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connectAccount\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                issueJwt\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logInWithAccount\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, jwtService: JwtService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connectAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectAccount(connectAccountDto: ConnectAccountDto, user: UserInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connectAccountDto\n                                    \n                                                ConnectAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        issueJwt\n                        \n                    \n                \n            \n            \n                \n                    \n                    issueJwt(user: UserInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(logInDto: LogInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logInDto\n                                    \n                                                LogInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logInWithAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    logInWithAccount(connectAccountDto: ConnectAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connectAccountDto\n                                    \n                                                ConnectAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(user: UserInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AuthService.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { UserInterface } from '../common/interfaces/user.interface';\nimport { omit } from '../common/utilities';\nimport { UsersService } from '../users/users.service';\nimport { ConnectAccountDto } from './dto/connect-account.dto';\nimport { LogInDto } from './dto/log-in.dto';\nimport { SignUpDto } from './dto/sign-up.dto';\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async logIn(logInDto: LogInDto): Promise {\n    const { username, password } = logInDto;\n    const user = await this.usersService.findUserByUsername(username, true);\n    if (!user) {\n      throw new UnauthorizedException('The user does not exist');\n    }\n    const match = await bcrypt.compare(password, user.password);\n    if (!match) {\n      throw new UnauthorizedException('Wrong username or password');\n    }\n    return omit(user, 'password') as UserInterface;\n  }\n\n  async signUp(signUpDto: SignUpDto): Promise {\n    const { username, password, name, email } = signUpDto;\n    const saltRounds = +this.configService.get('PASSWORD_SALT_ROUNDS', 10);\n    const hash = await bcrypt.hash(password, saltRounds);\n    const user = await this.usersService.createUser({ username, password: hash, name, email });\n    if (!user) {\n      throw new BadRequestException('Failed to sign up');\n    }\n    return omit(user, 'password') as UserInterface;\n  }\n\n  async logInWithAccount(connectAccountDto: ConnectAccountDto): Promise {\n    const { type, id, info } = connectAccountDto;\n    const account = await this.usersService.findAccount(type, id);\n    if (!account) {\n      this.logger.log('Creating new user');\n      const user = await this.usersService.createUser(info);\n      if (user) {\n        this.logger.log(`New user #${user.id}: ${user.name} (${user.username})`);\n        const account = await this.usersService.createAccount(user.id, connectAccountDto);\n        if (account) return omit(user, 'password') as UserInterface;\n      }\n    } else {\n      this.logger.log('Authenticating with account');\n      const user = account.user;\n      // account.data = connectUserDto.data;\n      // await this.usersService.updateAccount(account);\n      return omit(user, 'password') as UserInterface;\n    }\n    throw new Error('Something went wrong');\n  }\n\n  async connectAccount(\n    connectAccountDto: ConnectAccountDto,\n    user: UserInterface,\n  ): Promise {\n    const { type, id } = connectAccountDto;\n    const account = await this.usersService.findAccount(type, id);\n    if (account && account.user.id != user.id) {\n      throw new BadRequestException('This account is already connected to another user');\n    } else if (account) {\n      throw new BadRequestException('This account is already connected');\n    } else if (user.accounts.some((account) => account.type === type)) {\n      throw new BadRequestException('Another account of this service is already connected');\n    }\n    const newAccount = await this.usersService.createAccount(user.id, connectAccountDto);\n    if (newAccount) return user;\n    throw new Error('Something went wrong');\n  }\n\n  async issueJwt(user: UserInterface): Promise {\n    const payload = { name: user.name, username: user.username, sub: user.id };\n    return this.jwtService.sign(payload);\n  }\n\n  async findUserById(id: number) {\n    const user = await this.usersService.findUserById(id);\n    if (!user) {\n      throw new BadRequestException('User not found');\n    }\n    return user;\n  }\n\n  async logOut(user: UserInterface) {\n    throw new Error('Method not implemented');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/authentication.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private readonly logger = new Logger(AuthenticationGuard.name);\n\n  canActivate(context: ExecutionContext): boolean {\n    const req = context.switchToHttp().getRequest();\n    const isAuthenticated = req.isAuthenticated();\n    this.logger.verbose(isAuthenticated ? '✔ Authenticated' : '✖ Not authenticated');\n    return isAuthenticated;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthorizationGuard.html":{"url":"guards/AuthorizationGuard.html","title":"guard - AuthorizationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthorizationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authorization.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authorization.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/authorization.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { UserInterface, UserRole } from '../../common/interfaces/user.interface';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class AuthorizationGuard implements CanActivate {\n  private readonly logger = new Logger(AuthorizationGuard.name);\n\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!roles || roles.length === 0) {\n      return true;\n    }\n    const req = context.switchToHttp().getRequest();\n    const user = req.user as UserInterface;\n    const isAuthorized = user && roles.includes(user.role);\n    this.logger.verbose(isAuthorized ? '✔ Authorized' : '✖ Not authorized');\n    return isAuthorized;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConnectAccountDto.html":{"url":"classes/ConnectAccountDto.html","title":"class - ConnectAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConnectAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/connect-account.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                info\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/connect-account.dto.ts:28\n                        \n                    \n\n            \n                \n                    Any additional data for the account\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/connect-account.dto.ts:22\n                        \n                    \n\n            \n                \n                    An id of the account to connect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/connect-account.dto.ts:34\n                        \n                    \n\n            \n                \n                    Basic user info to assign to the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(accountTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/connect-account.dto.ts:15\n                        \n                    \n\n            \n                \n                    A type of the account to connect\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional } from 'class-validator';\nimport {\n  AccountInterface,\n  AccountType,\n  accountTypes,\n} from '../../common/interfaces/account.interface';\nimport { UserInterface } from '../../common/interfaces/user.interface';\n\nexport class ConnectAccountDto implements Pick {\n  /**\n   * A type of the account to connect\n   * @example vkontakte\n   */\n  @IsIn(accountTypes)\n  readonly type: AccountType;\n\n  /**\n   * An id of the account to connect\n   * @example 49899993\n   */\n  @IsNotEmpty()\n  readonly id: string;\n\n  /**\n   * Any additional data for the account\n   */\n  @IsOptional()\n  readonly data: any;\n\n  /**\n   * Basic user info to assign to the user\n   */\n  @IsOptional()\n  readonly info: Partial;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDto.html":{"url":"classes/CreateAccountDto.html","title":"class - CreateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-account.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                info\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-account.dto.ts:28\n                        \n                    \n\n            \n                \n                    Any additional data for the account\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-account.dto.ts:22\n                        \n                    \n\n            \n                \n                    An id of the account to connect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-account.dto.ts:34\n                        \n                    \n\n            \n                \n                    Basic user info to assign to the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(accountTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-account.dto.ts:15\n                        \n                    \n\n            \n                \n                    A type of the account to connect\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional } from 'class-validator';\nimport {\n  AccountInterface,\n  AccountType,\n  accountTypes,\n} from '../../common/interfaces/account.interface';\nimport { UserInterface } from '../../common/interfaces/user.interface';\n\nexport class CreateAccountDto implements Pick {\n  /**\n   * A type of the account to connect\n   * @example vkontakte\n   */\n  @IsIn(accountTypes)\n  readonly type: AccountType;\n\n  /**\n   * An id of the account to connect\n   * @example 49899993\n   */\n  @IsNotEmpty()\n  readonly id: string;\n\n  /**\n   * Any additional data for the account\n   */\n  @IsOptional()\n  readonly data: any;\n\n  /**\n   * Basic user info to assign to the user\n   */\n  @IsOptional()\n  readonly info: Partial;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Public\n                                    Readonly\n                                list\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, MaxLength } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsString()\n  @MaxLength(255)\n  public readonly title: string;\n\n  @IsString()\n  public readonly description: string;\n\n  @IsInt()\n  public readonly list: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskListDto.html":{"url":"classes/CreateTaskListDto.html","title":"class - CreateTaskListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task-list.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MaxLength } from 'class-validator';\n\nexport class CreateTaskListDto {\n  @IsString()\n  @MaxLength(255)\n  public readonly title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Partial\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                password\n                            \n                            \n                                    Readonly\n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty({message: 'Please enter an email address'})@IsEmail(undefined, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:41\n                        \n                    \n\n            \n                \n                    An email address of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty({message: 'Please enter a name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:32\n                        \n                    \n\n            \n                \n                    A name of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty({message: 'Password should not be empty'})@MinLength(8, {message: 'Password should contain at least 8 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    A password of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty({message: 'Username should not be empty'})@Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {message: 'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:15\n                        \n                    \n\n            \n                \n                    An username of the user\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, Matches, MinLength } from 'class-validator';\nimport { UserPasswordInterface } from '../../common/interfaces/user-password.interface';\n\nexport class CreateUserDto implements Partial {\n  /**\n   * An username of the user\n   * @example john\n   */\n  @IsOptional()\n  @IsNotEmpty({ message: 'Username should not be empty' })\n  @Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {\n    message:\n      'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen',\n  })\n  readonly username?: string;\n\n  /**\n   * A password of the user\n   * @example 12345678\n   */\n  @IsOptional()\n  @IsNotEmpty({ message: 'Password should not be empty' })\n  @MinLength(8, { message: 'Password should contain at least 8 characters' })\n  readonly password?: string;\n\n  /**\n   * A name of the user\n   * @example John Doe\n   */\n  @IsOptional()\n  @IsNotEmpty({ message: 'Please enter a name' })\n  readonly name?: string;\n\n  /**\n   * An email address of the user\n   * @example john@example.com\n   */\n  @IsOptional()\n  @IsNotEmpty({ message: 'Please enter an email address' })\n  @IsEmail(undefined, { message: 'Please provide a valid email address' })\n  readonly email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthGuard.html":{"url":"injectables/GoogleAuthGuard.html","title":"injectable - GoogleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/google-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/google-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/google-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/google-auth.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GoogleAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/google-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard('google') {\n  private readonly logger = new Logger(GoogleAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isAuthenticated = !err && user;\n    this.logger.verbose(\n      isAuthenticated ? '✔ Authenticated with Google' : '✖ Not authenticated with Google',\n    );\n    if (!isAuthenticated) {\n      throw err || new UnauthorizedException(info?.message);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/strategies/google.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, accessToken: string, refreshToken: string, profile: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/strategies/google.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GoogleStrategy.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/strategies/google.strategy.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { Strategy } from 'passport-google-oauth20';\nimport { UserInterface } from '../../../common/interfaces/user.interface';\nimport { AuthService } from '../../auth.service';\nimport { ConnectAccountDto } from '../../dto/connect-account.dto';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  private readonly logger = new Logger(GoogleStrategy.name);\n\n  constructor(private readonly authService: AuthService, readonly configService: ConfigService) {\n    super({\n      clientID: configService.get('GOOGLE_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_CALLBACK_URL'),\n      scope: configService.get('GOOGLE_SCOPE', '').split(','),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(\n    req: Request,\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n  ): Promise {\n    const { id, ...data } = profile;\n    const info: Partial = {\n      name: profile.displayName,\n    };\n    const connectAccountDto: ConnectAccountDto = {\n      type: 'google',\n      id,\n      info,\n      data: {\n        ...data,\n        accessToken,\n        refreshToken,\n      },\n    };\n    if (req.isAuthenticated()) {\n      const user = req.user as UserInterface;\n      return this.authService.connectAccount(connectAccountDto, user);\n    } else {\n      return this.authService.logInWithAccount(connectAccountDto);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/jwt-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/jwt-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/jwt-auth.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JwtAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/jwt-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  private readonly logger = new Logger(JwtAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isValidJwt = !err && user;\n    this.logger.verbose(isValidJwt ? '✔ Valid JWT' : '✖ Invalid JWT');\n    if (!isValidJwt) {\n      throw err || new BadRequestException(info?.message);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/strategies/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserInterface } from '../../../common/interfaces/user.interface';\nimport { AuthService } from '../../auth.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService, private authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any): Promise {\n    const id = payload.sub;\n    return this.authService.findUserById(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/local-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/local-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/local-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/local-auth.guard.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LocalAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/local-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {\n  private readonly logger = new Logger(LocalAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super({\n      badRequestMessage: 'Please provide username and password',\n    });\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isValidPassword = !err && user;\n    this.logger.verbose(isValidPassword ? '✔ Valid password' : '✖ Invalid password');\n    if (!isValidPassword) {\n      throw err || new BadRequestException(info?.message);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/strategies/local.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { UserInterface } from '../../../common/interfaces/user.interface';\nimport { AuthService } from '../../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'username',\n      passwordField: 'password',\n    });\n  }\n\n  async validate(username: string, password: string): Promise {\n    return this.authService.logIn({ username, password });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/log-in.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password should not be empty'})@MinLength(8, {message: 'Password should contain at least 8 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/log-in.dto.ts:22\n                        \n                    \n\n            \n                \n                    A password of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Username should not be empty'})@Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {message: 'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/log-in.dto.ts:14\n                        \n                    \n\n            \n                \n                    An username of the user\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, Matches, MinLength } from 'class-validator';\nimport { UserPasswordInterface } from '../../common/interfaces/user-password.interface';\n\nexport class LogInDto implements Pick {\n  /**\n   * An username of the user\n   * @example john\n   */\n  @IsNotEmpty({ message: 'Username should not be empty' })\n  @Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {\n    message:\n      'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen',\n  })\n  readonly username: string;\n\n  /**\n   * A password of the user\n   * @example 12345678\n   */\n  @IsNotEmpty({ message: 'Password should not be empty' })\n  @MinLength(8, { message: 'Password should contain at least 8 characters' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/NoAuthenticationGuard.html":{"url":"guards/NoAuthenticationGuard.html","title":"guard - NoAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    NoAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/no-authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/no-authentication.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Injectable()\nexport class NoAuthenticationGuard implements CanActivate {\n  private readonly logger = new Logger(NoAuthenticationGuard.name);\n\n  canActivate(context: ExecutionContext): boolean {\n    const req = context.switchToHttp().getRequest();\n    const isUnauthenticated = req.isUnauthenticated();\n    this.logger.verbose(isUnauthenticated ? '✔ Not authenticated' : '✖ Authenticated');\n    return isUnauthenticated;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OptionalJwtAuthGuard.html":{"url":"injectables/OptionalJwtAuthGuard.html","title":"injectable - OptionalJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OptionalJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/optional-jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/optional-jwt-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/optional-jwt-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/optional-jwt-auth.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(OptionalJwtAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/optional-jwt-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class OptionalJwtAuthGuard extends AuthGuard('jwt') {\n  private readonly logger = new Logger(OptionalJwtAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isValidJwt = !err && user;\n    this.logger.verbose(isValidJwt ? '✔ Valid JWT' : '✔ Skipping JWT');\n    return isValidJwt ? user : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostgresqlContainerDatabase.html":{"url":"classes/PostgresqlContainerDatabase.html","title":"class - PostgresqlContainerDatabase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostgresqlContainerDatabase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/test-database.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TestDatabase\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                isContainerized\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConnectionOptions\n                            \n                            \n                                    Static\n                                    Async\n                                start\n                            \n                            \n                                    Async\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor(container: StartedPostgreSqlContainer)\n                    \n                \n                        \n                            \n                                Defined in test/test-database.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        container\n                                                  \n                                                        \n                                                                    StartedPostgreSqlContainer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        isContainerized\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in test/test-database.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionOptions\n                        \n                    \n                \n            \n            \n                \ngetConnectionOptions()\n                \n            \n\n\n            \n                \n                    Defined in test/test-database.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ConnectionOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        start\n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in test/test-database.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stop\n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in test/test-database.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectionOptions } from 'typeorm';\nimport { PostgreSqlContainer, StartedPostgreSqlContainer } from 'testcontainers';\n\nexport interface TestDatabase {\n  readonly isContainerized: boolean;\n  getConnectionOptions(): ConnectionOptions;\n  stop(): Promise;\n}\n\nexport async function getTestDatabase(): Promise {\n  if (process.env.USE_TESTCONTAINERS) {\n    return PostgresqlContainerDatabase.start();\n  } else {\n    return SqliteInMemoryDatabase.start();\n  }\n}\n\nexport class PostgresqlContainerDatabase implements TestDatabase {\n  private constructor(private container: StartedPostgreSqlContainer) {}\n\n  readonly isContainerized = true;\n\n  static async start() {\n    const container = await new PostgreSqlContainer().start();\n    return new PostgresqlContainerDatabase(container);\n  }\n\n  getConnectionOptions(): ConnectionOptions {\n    return {\n      type: 'postgres',\n      host: this.container.getHost(),\n      port: this.container.getPort(),\n      database: this.container.getDatabase(),\n      username: this.container.getUsername(),\n      password: this.container.getPassword(),\n    };\n  }\n\n  async stop(): Promise {\n    await this.container.stop();\n  }\n}\n\nexport class SqliteInMemoryDatabase implements TestDatabase {\n  private constructor() {}\n\n  readonly isContainerized = false;\n\n  static async start() {\n    return new SqliteInMemoryDatabase();\n  }\n\n  getConnectionOptions(): ConnectionOptions {\n    return {\n      type: 'sqlite',\n      database: ':memory:',\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async stop(): Promise {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/sign-up.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        LogInDto\n            \n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Please enter an email address'})@IsEmail(undefined, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-up.dto.ts:22\n                        \n                    \n\n            \n                \n                    An email address of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Please enter a name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-up.dto.ts:14\n                        \n                    \n\n            \n                \n                    A name of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password should not be empty'})@MinLength(8, {message: 'Password should contain at least 8 characters'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogInDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogInDto:22\n\n                        \n                    \n\n            \n                \n                    A password of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Username should not be empty'})@Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {message: 'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogInDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogInDto:14\n\n                        \n                    \n\n            \n                \n                    An username of the user\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { UserPasswordInterface } from '../../common/interfaces/user-password.interface';\nimport { LogInDto } from './log-in.dto';\n\nexport class SignUpDto\n  extends LogInDto\n  implements Pick\n{\n  /**\n   * A name of the user\n   * @example John Doe\n   */\n  @IsNotEmpty({ message: 'Please enter a name' })\n  readonly name: string;\n\n  /**\n   * An email address of the user\n   * @example john@example.com\n   */\n  @IsNotEmpty({ message: 'Please enter an email address' })\n  @IsEmail(undefined, { message: 'Please provide a valid email address' })\n  readonly email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SqliteInMemoryDatabase.html":{"url":"classes/SqliteInMemoryDatabase.html","title":"class - SqliteInMemoryDatabase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SqliteInMemoryDatabase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/test-database.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TestDatabase\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                isContainerized\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConnectionOptions\n                            \n                            \n                                    Static\n                                    Async\n                                start\n                            \n                            \n                                    Async\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in test/test-database.ts:44\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        isContainerized\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in test/test-database.ts:47\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionOptions\n                        \n                    \n                \n            \n            \n                \ngetConnectionOptions()\n                \n            \n\n\n            \n                \n                    Defined in test/test-database.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ConnectionOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        Async\n                        start\n                        \n                    \n                \n            \n            \n                \n                    \n                    start()\n                \n            \n\n\n            \n                \n                    Defined in test/test-database.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stop\n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in test/test-database.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectionOptions } from 'typeorm';\nimport { PostgreSqlContainer, StartedPostgreSqlContainer } from 'testcontainers';\n\nexport interface TestDatabase {\n  readonly isContainerized: boolean;\n  getConnectionOptions(): ConnectionOptions;\n  stop(): Promise;\n}\n\nexport async function getTestDatabase(): Promise {\n  if (process.env.USE_TESTCONTAINERS) {\n    return PostgresqlContainerDatabase.start();\n  } else {\n    return SqliteInMemoryDatabase.start();\n  }\n}\n\nexport class PostgresqlContainerDatabase implements TestDatabase {\n  private constructor(private container: StartedPostgreSqlContainer) {}\n\n  readonly isContainerized = true;\n\n  static async start() {\n    const container = await new PostgreSqlContainer().start();\n    return new PostgresqlContainerDatabase(container);\n  }\n\n  getConnectionOptions(): ConnectionOptions {\n    return {\n      type: 'postgres',\n      host: this.container.getHost(),\n      port: this.container.getPort(),\n      database: this.container.getDatabase(),\n      username: this.container.getUsername(),\n      password: this.container.getPassword(),\n    };\n  }\n\n  async stop(): Promise {\n    await this.container.stop();\n  }\n}\n\nexport class SqliteInMemoryDatabase implements TestDatabase {\n  private constructor() {}\n\n  readonly isContainerized = false;\n\n  static async start() {\n    return new SqliteInMemoryDatabase();\n  }\n\n  getConnectionOptions(): ConnectionOptions {\n    return {\n      type: 'sqlite',\n      database: ':memory:',\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async stop(): Promise {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/entities/task.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdDate\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isDone\n                            \n                            \n                                list\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskList\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { TaskList } from './task-list.entity';\n\n@Entity('task', {\n  orderBy: {\n    id: 'ASC',\n  },\n})\nexport class Task {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ length: 255 })\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column('boolean')\n  isDone: boolean;\n\n  @ManyToOne((_type) => TaskList, (list) => list.tasks)\n  list: TaskList;\n\n  @CreateDateColumn()\n  createdDate: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskList.html":{"url":"classes/TaskList.html","title":"class - TaskList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/entities/task-list.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                tasks\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task-list.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {cascade: true, onDelete: 'CASCADE', onUpdate: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task-list.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task-list.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Task } from './task.entity';\n\n@Entity('task-list', {\n  orderBy: {\n    id: 'ASC',\n  },\n})\nexport class TaskList {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ length: 255 })\n  public title: string;\n\n  @OneToMany((_type) => Task, (task) => task.list, {\n    cascade: true,\n    onDelete: 'CASCADE',\n    onUpdate: 'CASCADE',\n  })\n  public tasks: Task[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createList\n                            \n                            \n                                createTask\n                            \n                            \n                                findAllLists\n                            \n                            \n                                findAllTasks\n                            \n                            \n                                findOneList\n                            \n                            \n                                findOneTask\n                            \n                            \n                                removeList\n                            \n                            \n                                removeTask\n                            \n                            \n                                updateList\n                            \n                            \n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createList\n                        \n                    \n                \n            \n            \n                \ncreateList(createTaskListDto: CreateTaskListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('list')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskListDto\n                                    \n                                                CreateTaskListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTask\n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('task')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllLists\n                        \n                    \n                \n            \n            \n                \nfindAllLists()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllTasks\n                        \n                    \n                \n            \n            \n                \nfindAllTasks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('task')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneList\n                        \n                    \n                \n            \n            \n                \nfindOneList(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneTask\n                        \n                    \n                \n            \n            \n                \nfindOneTask(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('task/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeList\n                        \n                    \n                \n            \n            \n                \nremoveList(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('list/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeTask\n                        \n                    \n                \n            \n            \n                \nremoveTask(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('task/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateList\n                        \n                    \n                \n            \n            \n                \nupdateList(id: number, updateTaskListDto: UpdateTaskListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('list/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskListDto\n                                    \n                                                UpdateTaskListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTask\n                        \n                    \n                \n            \n            \n                \nupdateTask(id: number, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('task/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDto\n                                    \n                                                UpdateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Auth } from '../auth/decorators/auth.decorator';\nimport { CreateTaskListDto } from './dto/create-task-list.dto';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskListDto } from './dto/update-task-list.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TasksService } from './tasks.service';\n\n@Controller('tasks')\n@ApiTags('tasks')\n@Auth()\nexport class TasksController {\n  constructor(private readonly tasksService: TasksService) {}\n\n  @Post('task')\n  createTask(@Body() createTaskDto: CreateTaskDto) {\n    return this.tasksService.createTask(createTaskDto);\n  }\n\n  @Get('task')\n  findAllTasks() {\n    return this.tasksService.findAllTasks();\n  }\n\n  @Get('task/:id')\n  findOneTask(@Param('id') id: number) {\n    return this.tasksService.findOneTask(id);\n  }\n\n  @Patch('task/:id')\n  updateTask(@Param('id') id: number, @Body() updateTaskDto: UpdateTaskDto) {\n    return this.tasksService.updateTask(id, updateTaskDto);\n  }\n\n  @Delete('task/:id')\n  removeTask(@Param('id') id: number) {\n    return this.tasksService.removeTask(id);\n  }\n\n  @Post('list')\n  createList(@Body() createTaskListDto: CreateTaskListDto) {\n    return this.tasksService.createList(createTaskListDto);\n  }\n\n  @Get('list')\n  findAllLists() {\n    return this.tasksService.findAllLists();\n  }\n\n  @Get('list/:id')\n  findOneList(@Param('id') id: number) {\n    return this.tasksService.findOneList(id);\n  }\n\n  @Patch('list/:id')\n  updateList(@Param('id') id: number, @Body() updateTaskListDto: UpdateTaskListDto) {\n    return this.tasksService.updateList(id, updateTaskListDto);\n  }\n\n  @Delete('list/:id')\n  removeList(@Param('id') id: number) {\n    return this.tasksService.removeList(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskList } from './entities/task-list.entity';\nimport { Task } from './entities/task.entity';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task, TaskList])],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createList\n                            \n                            \n                                    Public\n                                    Async\n                                createTask\n                            \n                            \n                                    Public\n                                    Async\n                                findAllLists\n                            \n                            \n                                    Public\n                                    Async\n                                findAllTasks\n                            \n                            \n                                    Public\n                                    Async\n                                findOneList\n                            \n                            \n                                    Public\n                                    Async\n                                findOneTask\n                            \n                            \n                                    Public\n                                    Async\n                                removeList\n                            \n                            \n                                    Public\n                                    Async\n                                removeTask\n                            \n                            \n                                    Public\n                                    Async\n                                updateList\n                            \n                            \n                                    Public\n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, listRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        listRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                    \n                    createList(createTaskListDto: CreateTaskListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskListDto\n                                    \n                                                CreateTaskListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllLists\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllLists()\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllTasks\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTasks()\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOneList\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneList(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOneTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneTask(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        removeList\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeList(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        removeTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTask(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateList\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateList(id: number, updateTaskListDto: UpdateTaskListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskListDto\n                                    \n                                                UpdateTaskListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(id: number, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDto\n                                    \n                                                UpdateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateTaskListDto } from './dto/create-task-list.dto';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskListDto } from './dto/update-task-list.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TaskList } from './entities/task-list.entity';\nimport { Task } from './entities/task.entity';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(Task)\n    private readonly taskRepository: Repository,\n    @InjectRepository(TaskList)\n    private readonly listRepository: Repository,\n  ) {}\n\n  public async createTask(createTaskDto: CreateTaskDto) {\n    const task = new Task();\n    task.title = createTaskDto.title;\n    task.description = createTaskDto.description;\n    task.isDone = false;\n    const list = await this.listRepository.findOneOrFail(createTaskDto.list, {\n      relations: ['tasks'],\n    });\n    list.tasks.push(task);\n    return this.listRepository.save(list);\n  }\n\n  public async findAllTasks() {\n    return this.taskRepository.find();\n  }\n\n  public async findOneTask(id: number) {\n    return this.taskRepository.findOne(id);\n  }\n\n  public async updateTask(id: number, updateTaskDto: UpdateTaskDto) {\n    return this.taskRepository.update(id, {\n      title: updateTaskDto.title,\n      description: updateTaskDto.description,\n      isDone: updateTaskDto.isDone,\n    });\n  }\n\n  public async removeTask(id: number) {\n    return this.taskRepository.delete(id);\n  }\n\n  public async createList(createTaskListDto: CreateTaskListDto) {\n    const list = new TaskList();\n    list.title = createTaskListDto.title;\n    list.tasks = [];\n    return this.listRepository.save(list);\n  }\n\n  public async findAllLists() {\n    const lists = await this.listRepository.find({ relations: ['tasks'] });\n    lists.forEach((list) => {\n      list.tasks.sort((a, b) => a.id - b.id);\n    });\n    return lists;\n  }\n\n  public async findOneList(id: number) {\n    return this.listRepository.findOne(id, { relations: ['tasks'] });\n  }\n\n  public async updateList(id: number, updateTaskListDto: UpdateTaskListDto) {\n    return this.listRepository.update(id, { title: updateTaskListDto.title });\n  }\n\n  public async removeList(id: number) {\n    return this.listRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TestDatabase.html":{"url":"interfaces/TestDatabase.html","title":"interface - TestDatabase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TestDatabase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/test-database.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isContainerized\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getConnectionOptions\n                                    \n                                \n                                \n                                    \n                                        stop\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionOptions\n                        \n                    \n                \n            \n            \n                \ngetConnectionOptions()\n                \n            \n\n\n            \n                \n                    Defined in test/test-database.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     ConnectionOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stop\n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n            \n                \n                    Defined in test/test-database.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isContainerized\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isContainerized:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionOptions } from 'typeorm';\nimport { PostgreSqlContainer, StartedPostgreSqlContainer } from 'testcontainers';\n\nexport interface TestDatabase {\n  readonly isContainerized: boolean;\n  getConnectionOptions(): ConnectionOptions;\n  stop(): Promise;\n}\n\nexport async function getTestDatabase(): Promise {\n  if (process.env.USE_TESTCONTAINERS) {\n    return PostgresqlContainerDatabase.start();\n  } else {\n    return SqliteInMemoryDatabase.start();\n  }\n}\n\nexport class PostgresqlContainerDatabase implements TestDatabase {\n  private constructor(private container: StartedPostgreSqlContainer) {}\n\n  readonly isContainerized = true;\n\n  static async start() {\n    const container = await new PostgreSqlContainer().start();\n    return new PostgresqlContainerDatabase(container);\n  }\n\n  getConnectionOptions(): ConnectionOptions {\n    return {\n      type: 'postgres',\n      host: this.container.getHost(),\n      port: this.container.getPort(),\n      database: this.container.getDatabase(),\n      username: this.container.getUsername(),\n      password: this.container.getPassword(),\n    };\n  }\n\n  async stop(): Promise {\n    await this.container.stop();\n  }\n}\n\nexport class SqliteInMemoryDatabase implements TestDatabase {\n  private constructor() {}\n\n  readonly isContainerized = false;\n\n  static async start() {\n    return new SqliteInMemoryDatabase();\n  }\n\n  getConnectionOptions(): ConnectionOptions {\n    return {\n      type: 'sqlite',\n      database: ':memory:',\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async stop(): Promise {}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAccountDto.html":{"url":"classes/UpdateAccountDto.html","title":"class - UpdateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-account.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateAccountDto } from './create-account.dto';\n\nexport class UpdateAccountDto extends PartialType(CreateAccountDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Public\n                                    Readonly\n                                isDone\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsBoolean, IsString, MaxLength } from 'class-validator';\nimport { CreateTaskDto } from './create-task.dto';\n\nexport class UpdateTaskDto extends PartialType(CreateTaskDto) {\n  @IsString()\n  @MaxLength(255)\n  public readonly title: string;\n\n  @IsString()\n  public readonly description: string;\n\n  @IsBoolean()\n  public readonly isDone: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskListDto.html":{"url":"classes/UpdateTaskListDto.html","title":"class - UpdateTaskListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-task-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task-list.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task-list.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, MaxLength } from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskListDto } from './create-task-list.dto';\n\nexport class UpdateTaskListDto extends PartialType(CreateTaskListDto) {\n  @IsInt()\n  public readonly id: number;\n\n  @IsString()\n  @MaxLength(255)\n  public readonly title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            UserPasswordInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accounts\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Account[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({length: 256, nullable: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({length: 32, nullable: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, Index, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { UserPasswordInterface } from '../../common/interfaces/user-password.interface';\nimport { UserRole } from '../../common/interfaces/user.interface';\nimport { Account } from './account.entity';\n\n@Entity('users')\nexport class User implements UserPasswordInterface {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Index()\n  @Column({ length: 256, nullable: true, unique: true })\n  email: string;\n\n  @Index()\n  @Column({ length: 32, nullable: true, unique: true })\n  username: string;\n\n  @Column({ length: 64, nullable: true, select: false })\n  password: string;\n\n  @Column({ default: 'user' })\n  role: UserRole;\n\n  @Column({ length: 64, nullable: true })\n  name: string;\n\n  @OneToMany(() => Account, (account) => account.user)\n  accounts: Account[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInterface.html":{"url":"interfaces/UserInterface.html","title":"interface - UserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/user.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface of a user\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accounts\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accounts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accounts:         AccountInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayElement } from '../utilities';\nimport { AccountInterface } from './account.interface';\n\nexport const userRoles = ['user', 'moderator', 'admin'] as const;\n\nexport type UserRole = ArrayElement;\n\n/**\n * An interface of a user\n */\nexport interface UserInterface {\n  id: number;\n  name: string;\n  email: string;\n  username: string;\n  role: UserRole;\n  accounts: AccountInterface[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPasswordInterface.html":{"url":"interfaces/UserPasswordInterface.html","title":"interface - UserPasswordInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPasswordInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/user-password.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        UserInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserInterface } from './user.interface';\n\nexport interface UserPasswordInterface extends UserInterface {\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getProfileById\n                            \n                            \n                                    Async\n                                getProfileByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Auth()@Roles('moderator', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfileById(id: number, user?: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@OptionalAuth()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfileByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfileByUsername(username: string, user?: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('@:username')@OptionalAuth()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Auth } from '../auth/decorators/auth.decorator';\nimport { OptionalAuth } from '../auth/decorators/optional-auth.decorator';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { User } from '../auth/decorators/user.decorator';\nimport { UserInterface } from '../common/interfaces/user.interface';\nimport { UsersService } from './users.service';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @Auth()\n  @Roles('moderator', 'admin')\n  async getAll() {\n    const users = await this.usersService.findAllUsers();\n    return { users };\n  }\n\n  @Get(':id')\n  @OptionalAuth()\n  async getProfileById(@Param('id') id: number, @User() user?: UserInterface) {\n    if (user?.id !== id) {\n      user = await this.usersService.findUserById(id);\n    }\n    return { user };\n  }\n\n  @Get('@:username')\n  @OptionalAuth()\n  async getProfileByUsername(@Param('username') username: string, @User() user?: UserInterface) {\n    if (user?.username !== username) {\n      user = await this.usersService.findUserByUsername(username);\n    }\n    return { user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Account } from './entities/account.entity';\nimport { User } from './entities/user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Account])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAccount\n                            \n                            \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                findUserByUsername\n                            \n                            \n                                    Async\n                                removeAccount\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, accountsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(id: number, createAccountDto: CreateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAccount(type: string, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string, withPassword)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withPassword\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByUsername(username: string, withPassword)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withPassword\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeAccount(type, id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUser(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(type, id, updateAccountDto: UpdateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Account } from './entities/account.entity';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    @InjectRepository(Account)\n    private readonly accountsRepository: Repository,\n  ) {}\n\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const user = this.usersRepository.create(createUserDto);\n    return this.usersRepository.save(user).catch(({ message }) => {\n      if (/unique/i.test(message) && /username/i.test(message)) {\n        throw new BadRequestException('This username is already taken.');\n      }\n      if (/unique/i.test(message) && /email/i.test(message)) {\n        throw new BadRequestException('This email is already used by another account.');\n      }\n      throw new BadRequestException(`Error while creating a user: ${message}`);\n    });\n  }\n\n  async findUserById(id: number): Promise {\n    const user = await this.usersRepository.findOne(id, { relations: ['accounts'] });\n    if (!user) {\n      throw new NotFoundException(`User #${id} was not found`);\n    }\n    return user;\n  }\n\n  async findUserByUsername(username: string, withPassword = false): Promise {\n    let query = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.accounts', 'account')\n      .where('user.username = :username', { username });\n    if (withPassword) {\n      query = query.addSelect('user.password');\n    }\n    const user = await query.getOne();\n    if (!user) {\n      throw new NotFoundException(`User \"${username}\" was not found`);\n    }\n    return user;\n  }\n\n  async findUserByEmail(email: string, withPassword = false) {\n    let query = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.accounts', 'account')\n      .where('user.email = :email', { email });\n    if (withPassword) {\n      query = query.addSelect('user.password');\n    }\n    const user = await query.getOne();\n    if (!user) {\n      throw new NotFoundException(`User with email ${email} was not found`);\n    }\n    return user;\n  }\n\n  async updateUser(id: number, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.usersRepository.preload({\n      id,\n      ...updateUserDto,\n    });\n    if (!user) {\n      throw new NotFoundException(`User #${id} was not found`);\n    }\n    return this.usersRepository.save(user).catch(({ message }) => {\n      if (/unique/i.test(message) && /username/i.test(message)) {\n        throw new BadRequestException('This username is already taken.');\n      }\n      if (/unique/i.test(message) && /email/i.test(message)) {\n        throw new BadRequestException('This email is already used by another account.');\n      }\n      throw new BadRequestException(`Error while updating a user: ${message}`);\n    });\n  }\n\n  async removeUser(id: number): Promise {\n    const user = await this.findUserById(id);\n    return this.usersRepository.remove(user).catch(({ message }) => {\n      throw new BadRequestException(`Error while deleting a user: ${message}`);\n    });\n  }\n\n  async createAccount(id: number, createAccountDto: CreateAccountDto): Promise {\n    const user = await this.findUserById(id);\n    const account = this.accountsRepository.create({ ...createAccountDto, user });\n    this.logger.debug(`Create account: ${JSON.stringify(account)}`);\n    return this.accountsRepository.save(account).catch((error) => {\n      const { message } = error;\n      throw new BadRequestException(`Error while creating an account: ${message}`);\n    });\n  }\n\n  async updateAccount(\n    type: Account['type'],\n    id: Account['id'],\n    updateAccountDto: UpdateAccountDto,\n  ) {\n    return this.accountsRepository.update({ type, id }, updateAccountDto).catch((error) => {\n      const { message } = error;\n      throw new BadRequestException(`Error while updating an account: ${message}`);\n    });\n  }\n\n  async removeAccount(type: Account['type'], id: Account['id']): Promise {\n    return this.accountsRepository.delete({ type, id }).catch((error) => {\n      const { message } = error;\n      throw new BadRequestException(`Error while removing an account: ${message}`);\n    });\n  }\n\n  async findAllUsers(): Promise {\n    return this.usersRepository.find({ relations: ['accounts'] }).catch(({ message }) => {\n      throw new BadRequestException(`Error while finding the users: ${message}`);\n    });\n  }\n\n  async findAccount(type: string, id: string) {\n    const account = await this.accountsRepository.findOne({\n      where: { type, id },\n      relations: ['user'],\n    });\n    if (!account) {\n      throw new NotFoundException(`Account ${id}@${type} was not found`);\n    }\n    return account;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VkontakteAuthGuard.html":{"url":"injectables/VkontakteAuthGuard.html","title":"injectable - VkontakteAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  VkontakteAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/vkontakte-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/vkontakte-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/vkontakte-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/vkontakte-auth.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(VkontakteAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/vkontakte-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class VkontakteAuthGuard extends AuthGuard('vkontakte') {\n  private readonly logger = new Logger(VkontakteAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isAuthenticated = !err && user;\n    this.logger.verbose(\n      isAuthenticated ? '✔ Authenticated with Vkontakte' : '✖ Not authenticated with Vkontakte',\n    );\n    if (!isAuthenticated) {\n      throw err || new UnauthorizedException(info?.message);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VkontakteStrategy.html":{"url":"injectables/VkontakteStrategy.html","title":"injectable - VkontakteStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  VkontakteStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/strategies/vkontakte.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/strategies/vkontakte.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, accessToken: string, refreshToken: string, profile: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/strategies/vkontakte.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(VkontakteStrategy.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/strategies/vkontakte.strategy.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { Strategy } from 'passport-vkontakte';\nimport { UserInterface } from '../../../common/interfaces/user.interface';\nimport { AuthService } from '../../auth.service';\nimport { ConnectAccountDto } from '../../dto/connect-account.dto';\n\n@Injectable()\nexport class VkontakteStrategy extends PassportStrategy(Strategy, 'vkontakte') {\n  private readonly logger = new Logger(VkontakteStrategy.name);\n\n  constructor(private readonly authService: AuthService, readonly configService: ConfigService) {\n    super({\n      clientID: configService.get('VKONTAKTE_CLIENT_ID'),\n      clientSecret: configService.get('VKONTAKTE_CLIENT_SECRET'),\n      callbackURL: configService.get('VKONTAKTE_CALLBACK_URL'),\n      scope: configService.get('VKONTAKTE_SCOPE', '').split(','),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(\n    req: Request,\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n  ): Promise {\n    const { id, ...data } = profile;\n    const info: Partial = {\n      name: profile.displayName,\n    };\n    const connectAccountDto: ConnectAccountDto = {\n      type: 'vkontakte',\n      id,\n      info,\n      data: {\n        ...data,\n        accessToken,\n        refreshToken,\n      },\n    };\n    if (req.isAuthenticated()) {\n      const user = req.user as UserInterface;\n      return this.authService.connectAccount(connectAccountDto, user);\n    } else {\n      return this.authService.logInWithAccount(connectAccountDto);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/angular-universal.filter.ts\n            \n            class\n            AngularUniversalFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app-validation.pipe.ts\n            \n            class\n            AppValidationPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/decorators/allow-no-auth.decorator.ts\n            \n            variable\n            AllowNoAuth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/allow-no-auth.decorator.ts\n            \n            variable\n            PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/no-auth.decorator.ts\n            \n            variable\n            NoAuth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/optional-auth.decorator.ts\n            \n            variable\n            OptionalAuth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/connect-account.dto.ts\n            \n            class\n            ConnectAccountDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/dto/log-in.dto.ts\n            \n            class\n            LogInDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/authorization.guard.ts\n            \n            guard\n            AuthorizationGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/no-authentication.guard.ts\n            \n            guard\n            NoAuthenticationGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/google-auth.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/optional-jwt-auth.guard.ts\n            \n            injectable\n            OptionalJwtAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/vkontakte-auth.guard.ts\n            \n            injectable\n            VkontakteAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/passport/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/strategies/vkontakte.strategy.ts\n            \n            injectable\n            VkontakteStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/account.interface.ts\n            \n            interface\n            AccountInterface\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/common/interfaces/account.interface.ts\n            \n            variable\n            accountTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interfaces/user-password.interface.ts\n            \n            interface\n            UserPasswordInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/user.interface.ts\n            \n            interface\n            UserInterface\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/common/interfaces/user.interface.ts\n            \n            variable\n            userRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/testing.ts\n            \n            function\n            createMockObj\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/testing.ts\n            \n            function\n            normalize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/utilities.ts\n            \n            function\n            omit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/utilities.ts\n            \n            function\n            pick\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task-list.dto.ts\n            \n            class\n            CreateTaskListDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-task-list.dto.ts\n            \n            class\n            UpdateTaskListDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/entities/task-list.entity.ts\n            \n            class\n            TaskList\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/entities/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/create-account.dto.ts\n            \n            class\n            CreateAccountDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-account.dto.ts\n            \n            class\n            UpdateAccountDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/account.entity.ts\n            \n            class\n            Account\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                test/config-service.mock.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/swagger.transformer.ts\n            \n            variable\n            factory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/swagger.transformer.ts\n            \n            variable\n            name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/swagger.transformer.ts\n            \n            variable\n            version\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-database.ts\n            \n            class\n            PostgresqlContainerDatabase\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                test/test-database.ts\n            \n            class\n            SqliteInMemoryDatabase\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                test/test-database.ts\n            \n            interface\n            TestDatabase\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                test/test-database.ts\n            \n            function\n            getTestDatabase\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.0.2\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.1.0\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            helmet : ^4.6.0\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            passport-vkontakte : ^0.5.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sqlite3 : ^5.0.2\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.38\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createMockObj   (src/.../testing.ts)\n                        \n                        \n                            getTestDatabase   (test/.../test-database.ts)\n                        \n                        \n                            normalize   (src/.../testing.ts)\n                        \n                        \n                            omit   (src/.../utilities.ts)\n                        \n                        \n                            pick   (src/.../utilities.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/testing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockObj\n                        \n                    \n                \n            \n            \n                \ncreateMockObj(methodNames?, propertyNames?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    methodNames\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    propertyNames\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     jest.Mocked\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        normalize\n                        \n                    \n                \n            \n            \n                \nnormalize(collection)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    test/test-database.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getTestDatabase\n                        \n                    \n                \n            \n            \n                \ngetTestDatabase()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    src/common/utilities.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        omit\n                        \n                    \n                \n            \n            \n                \nomit(obj: T, ...props: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    props\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Omit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pick\n                        \n                    \n                \n            \n            \n                \npick(obj: T, ...props: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    props\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Pick\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nVkontakteStrategy\n\nVkontakteStrategy\n\nAuthModule -->\n\nVkontakteStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccountType   (src/.../account.interface.ts)\n                        \n                        \n                            ArrayElement   (src/.../utilities.ts)\n                        \n                        \n                            MethodNames   (src/.../utilities.ts)\n                        \n                        \n                            PropertyNames   (src/.../utilities.ts)\n                        \n                        \n                            UserRole   (src/.../user.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/interfaces/account.interface.ts\n    \n    \n        \n            \n                \n                    \n                    AccountType\n                \n            \n            \n                \n                            ArrayElement<>\n\n                \n            \n        \n    \n    src/common/utilities.ts\n    \n    \n        \n            \n                \n                    \n                    ArrayElement\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodNames\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PropertyNames\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/common/interfaces/user.interface.ts\n    \n    \n        \n            \n                \n                    \n                    UserRole\n                \n            \n            \n                \n                            ArrayElement<>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accountTypes   (src/.../account.interface.ts)\n                        \n                        \n                            AllowNoAuth   (src/.../allow-no-auth.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            factory   (test/.../swagger.transformer.ts)\n                        \n                        \n                            mockedConfigService   (test/.../config-service.mock.ts)\n                        \n                        \n                            name   (test/.../swagger.transformer.ts)\n                        \n                        \n                            NoAuth   (src/.../no-auth.decorator.ts)\n                        \n                        \n                            OptionalAuth   (src/.../optional-auth.decorator.ts)\n                        \n                        \n                            PUBLIC_KEY   (src/.../allow-no-auth.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            userRoles   (src/.../user.interface.ts)\n                        \n                        \n                            version   (test/.../swagger.transformer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/interfaces/account.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        accountTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ['facebook', 'google', 'vkontakte'] as const\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/allow-no-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AllowNoAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Mark a route as public, so that it could be accessed even if\nauthentication is required by an outer context.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public'\n                    \n                \n\n            \n                \n                    Metadata key used to mark routes as public\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...guards: Parameters) =>\n  applyDecorators(\n    UseGuards(JwtAuthGuard, AuthenticationGuard, AuthorizationGuard, ...guards),\n    ApiBearerAuth(),\n    ApiUnauthorizedResponse({ description: 'Unauthorized' }),\n  )\n                    \n                \n\n            \n                \n                    Require the user to be authenticated to access the route.\n\n                \n            \n\n        \n    \n\n    test/swagger.transformer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        factory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (cs: TsCompilerInstance) => {\n  return transformer.before(\n    { introspectComments: true },\n    cs.program, // \"cs.tsCompiler.program\" for older versions of Jest (\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs-swagger-transformer'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n\n\n        \n    \n\n    test/config-service.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (values: Record) => ({\n  get(key: string, value?: T) {\n    return values[key] ?? value;\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/no-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NoAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...guards: Parameters) =>\n  UseGuards(NoAuthenticationGuard, ...guards)\n                    \n                \n\n            \n                \n                    Require the user to be not authenticated to access the route.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/optional-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OptionalAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...guards: Parameters) =>\n  applyDecorators(UseGuards(OptionalJwtAuthGuard, ...guards), ApiSecurity({}), ApiBearerAuth())\n                    \n                \n\n            \n                \n                    Optionally allow the user to be authenticated to access the route.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: UserRole[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    Set the roles that have access to the route\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: keyof UserInterface, context: ExecutionContext) => {\n    const req = context.switchToHttp().getRequest();\n    const user = req.user as UserInterface | undefined;\n    return data ? user?.[data] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Get the user or its specific property from an express request object.\n\n                \n            \n\n        \n    \n\n    src/common/interfaces/user.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userRoles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ['user', 'moderator', 'admin'] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
