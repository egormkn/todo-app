var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Account.html",[0,0.123,1,1.612]],["body/classes/Account.html",[0,0.141,1,2.412,2,1.185,3,0.213,4,0.186,5,0.186,6,3.524,7,2.273,8,3.258,9,0.299,10,0.888,11,3.258,12,1.928,13,0.499,14,1.389,15,0.021,16,2.034,17,5.382,18,5.382,19,0.757,20,4.121,21,1.183,22,6.594,23,4.121,24,3.786,25,4.121,26,3.524,27,2.24,28,4.121,29,0.31,30,2.837,31,2.837,32,4.603,33,3.524,34,2.094,35,3.131,36,4.121,37,4.121,38,5.382,39,0.213,40,4.121,41,0.015,42,0.015]],["title/interfaces/AccountInterface.html",[8,1.955,43,1.955]],["body/interfaces/AccountInterface.html",[1,2.512,3,0.227,4,0.198,5,0.198,8,3.047,9,0.318,10,0.925,11,3.538,12,1.974,13,0.518,14,1.279,15,0.021,21,1.357,24,4.11,29,0.29,39,0.319,41,0.016,42,0.016,43,3.357,44,3.02,45,3.02,46,2.229,47,5.605,48,2.083,49,4.258,50,3.752,51,3.752,52,1.449,53,2.771,54,3.752,55,2.771,56,2.385]],["title/classes/AngularUniversalFilter.html",[0,0.123,57,2.732]],["body/classes/AngularUniversalFilter.html",[0,0.129,2,1.082,3,0.194,4,0.17,5,0.17,7,2.14,9,0.273,13,0.367,15,0.021,19,0.604,21,1.259,29,0.296,39,0.194,41,0.014,42,0.014,52,1.584,57,3.849,58,4.899,59,3.217,60,1.537,61,5.729,62,5.729,63,1.381,64,4.899,65,1.711,66,3.762,67,6.398,68,5.729,69,6.13,70,3.762,71,1.241,72,0.941,73,1.241,74,5.729,75,1.911,76,5.067,77,5.242,78,5.729,79,6.13,80,3.762,81,3.762,82,0.972,83,3.762,84,0.739,85,1.793,86,2.045,87,3.762,88,1.911,89,3.762,90,1.711,91,0.941,92,3.762,93,3.762,94,3.762,95,2.754,96,3.762,97,3.762,98,3.762,99,3.762,100,2.376,101,2.376,102,3.762,103,3.762]],["title/modules/AppModule.html",[104,1.827,105,2.476]],["body/modules/AppModule.html",[0,0.132,3,0.2,4,0.174,5,0.174,15,0.021,29,0.361,34,1.963,39,0.2,41,0.014,42,0.014,84,0.759,85,1.841,100,2.44,101,2.44,104,2.621,105,4.852,106,2.1,107,2.804,108,3.304,109,3.304,110,4.195,111,4.195,112,3.88,113,3.258,114,2.44,115,2.44,116,3.864,117,3.551,118,3.304,119,2.1,120,5.158,121,2.935,122,2.257,123,5.158,124,3.551,125,3.304,126,3.864,127,3.864,128,3.864,129,3.304,130,3.864,131,3.864,132,3.864,133,3.864,134,3.864,135,2.767,136,3.864,137,3.864,138,3.304,139,1.632,140,3.864,141,3.864,142,3.864]],["title/classes/AppValidationPipe.html",[0,0.123,124,2.476]],["body/classes/AppValidationPipe.html",[0,0.168,2,1.409,3,0.253,4,0.221,5,0.221,15,0.021,19,0.584,29,0.253,39,0.253,41,0.017,42,0.017,60,1.822,65,2.194,84,0.963,124,4.135,135,3.311,143,5.136,144,4.19,145,6.495,146,4.9,147,2.196,148,4.9,149,4.9,150,4.9,151,4.9,152,3.095,153,4.9,154,4.9,155,4.9]],["title/controllers/AuthController.html",[156,1.955,157,2.476]],["body/controllers/AuthController.html",[0,0.09,3,0.136,4,0.119,5,0.119,9,0.191,13,0.425,14,1.277,15,0.021,16,1.789,19,0.666,29,0.349,39,0.136,41,0.011,42,0.011,48,2.16,52,1.445,63,1.074,71,1.369,72,1.038,73,1.369,82,1.445,84,0.519,91,0.49,139,2.902,156,1.435,157,2.712,158,1.435,159,2.257,160,2.005,161,2.976,162,3.368,163,3.939,164,3.939,165,3.368,166,3.368,167,2.639,168,2.639,169,2.753,170,2.639,171,3.53,172,2.639,173,2.639,174,2.639,175,2.639,176,2.639,177,2.639,178,2.257,179,2.639,180,2.639,181,2.257,182,3.703,183,2.639,184,2.639,185,2.257,186,2.257,187,3.939,188,2.005,189,1.542,190,1.115,191,2.112,192,1.542,193,2.639,194,2.992,195,2.639,196,2.141,197,1.817,198,2.639,199,2.639,200,2.257,201,2.005,202,2.257,203,2.257,204,1.817,205,2.639,206,4.712,207,1.817,208,2.639,209,1.817,210,2.639,211,2.639,212,2.639,213,0.995,214,2.639,215,2.639,216,2.639,217,6.244,218,3.53,219,5.225,220,1.524,221,5.225,222,2.639,223,2.639,224,2.639,225,2.639,226,2.639,227,2.639,228,2.639,229,2.639,230,2.639,231,2.639,232,2.639,233,2.639]],["title/modules/AuthModule.html",[104,1.827,110,2.271]],["body/modules/AuthModule.html",[0,0.117,3,0.177,4,0.155,5,0.155,15,0.021,29,0.36,39,0.177,41,0.013,42,0.013,84,0.674,100,3.002,104,2.415,106,1.863,107,2.584,110,4.561,112,3.743,113,3.002,114,2.164,115,2.164,117,3.758,118,4.668,119,1.863,129,2.93,138,2.93,139,1.447,157,3.758,158,2.584,191,3.146,192,2.002,234,2.93,235,3.427,236,2.93,237,2.93,238,4.047,239,4.047,240,4.047,241,4.047,242,3.427,243,4.065,244,3.723,245,3.427,246,2.603,247,4.754,248,1.447,249,3.427,250,3.427,251,3.427,252,3.427,253,3.427,254,3.427,255,3.427,256,2.93,257,3.427,258,3.427,259,3.427,260,3.427,261,3.427]],["title/injectables/AuthService.html",[191,1.612,262,0.593]],["body/injectables/AuthService.html",[0,0.062,1,2.674,3,0.151,4,0.081,5,0.081,9,0.131,10,0.483,12,1.417,13,0.432,14,1.309,15,0.021,19,0.677,29,0.302,39,0.093,41,0.008,42,0.008,48,2.009,52,1.679,63,0.798,65,0.989,71,1.345,72,1.108,73,1.345,82,1.363,84,0.355,90,1.69,91,0.929,119,0.981,135,0.86,139,2.832,162,2.503,165,2.503,166,2.503,169,2.924,171,1.139,178,2.503,181,2.503,182,3.161,190,0.762,191,1.312,200,1.543,201,1.37,202,1.543,203,1.543,218,3.769,220,1.437,244,3.161,246,1.37,262,0.483,263,0.68,264,1.543,265,1.695,266,3.694,267,2.503,268,2.927,269,2.927,270,1.543,271,5.272,272,2.866,273,2.927,274,1.804,275,3.667,276,1.804,277,3.407,278,2.503,279,1.473,280,1.804,281,2.927,282,1.804,283,2.927,284,1.804,285,2.927,286,1.804,287,1.804,288,1.804,289,0.762,290,0.808,291,2.207,292,2.927,293,1.242,294,1.37,295,2.503,296,1.37,297,1.804,298,1.804,299,1.37,300,1.139,301,2.094,302,2.791,303,1.543,304,3.407,305,1.804,306,1.804,307,2.927,308,1.804,309,1.804,310,1.804,311,4.251,312,1.71,313,2.927,314,1.804,315,1.804,316,2.927,317,1.804,318,1.804,319,1.804,320,1.804,321,1.804,322,2.927,323,1.804,324,1.804,325,1.804,326,3.694,327,2.927,328,2.927,329,2.927,330,1.804,331,1.543,332,1.804,333,1.804,334,1.804,335,2.927,336,2.927,337,2.927,338,1.804,339,2.503,340,3.159,341,3.694,342,1.543,343,1.804,344,1.804,345,1.804,346,1.804,347,2.927,348,1.543,349,1.804,350,1.804,351,1.543,352,1.804,353,1.543,354,1.804,355,1.804]],["title/guards/AuthenticationGuard.html",[356,2.476,357,2.476]],["body/guards/AuthenticationGuard.html",[0,0.151,3,0.228,4,0.199,5,0.199,7,1.865,9,0.32,10,0.728,13,0.32,15,0.021,19,0.526,29,0.291,39,0.228,41,0.016,42,0.016,52,1.454,63,1.534,71,1.081,72,0.82,73,1.081,82,1.141,84,0.868,86,2.4,88,2.243,90,1.9,91,1.045,95,2.4,220,1.204,262,0.929,265,2.47,291,1.574,357,3.874,358,2.788,359,3.775,360,3.314,361,2.859,362,3.109,363,4.414,364,2.104,365,3.554,366,4.414,367,3.039,368,4.275,369,3.354,370,4.414,371,3.554]],["title/guards/AuthorizationGuard.html",[356,2.476,372,2.476]],["body/guards/AuthorizationGuard.html",[0,0.128,3,0.194,4,0.169,5,0.169,7,1.585,9,0.272,10,0.619,13,0.366,14,0.994,15,0.021,19,0.603,29,0.331,39,0.194,41,0.014,42,0.014,48,1.618,52,1.583,63,1.379,65,1.267,71,1.239,72,0.939,73,1.239,82,0.97,84,0.737,85,1.788,86,2.039,88,1.906,90,1.708,91,1.062,95,2.039,135,1.788,190,1.585,213,1.414,220,1.379,262,0.835,265,2.281,291,1.338,358,2.369,360,3.111,361,2.57,362,2.918,364,1.788,365,3.194,367,2.583,372,3.482,373,3.208,374,2.192,375,3.847,376,3.752,377,3.752,378,2.369,379,2.85,380,3.752,381,3.752,382,3.482,383,3.752,384,2.192,385,2.192,386,3.752,387,3.208,388,2.583,389,5.058,390,3.752,391,3.752,392,5.058]],["title/classes/ConnectAccountDto.html",[0,0.123,275,2.101]],["body/classes/ConnectAccountDto.html",[0,0.168,1,2.916,2,1.035,3,0.336,4,0.162,5,0.162,7,2.077,8,1.957,9,0.261,10,0.812,11,3.426,12,1.912,13,0.498,14,1.183,15,0.021,16,1.926,19,0.717,21,1.081,24,3.538,29,0.29,35,2.735,39,0.186,41,0.014,42,0.014,48,1.152,53,2.274,56,1.957,91,1.314,190,1.521,275,2.873,393,5.389,394,2.478,395,2.873,396,4.788,397,3.078,398,4.205,399,3.538,400,3.078,401,5.148,402,3.106,403,3.078,404,4.205,405,4.205,406,4.205,407,3.078,408,3.078,409,1.613,410,3.106,411,3.078]],["title/classes/CreateAccountDto.html",[0,0.123,412,2.271]],["body/classes/CreateAccountDto.html",[0,0.168,1,2.916,2,1.035,3,0.336,4,0.162,5,0.162,7,2.077,8,1.957,9,0.261,10,0.812,11,3.426,12,1.912,13,0.498,14,1.183,15,0.021,16,1.926,19,0.717,21,1.081,24,3.538,29,0.29,35,2.735,39,0.186,41,0.014,42,0.014,48,1.152,53,2.274,56,1.957,91,1.314,190,1.521,394,2.478,395,2.873,396,4.788,397,3.078,398,4.205,399,3.538,400,3.078,401,5.148,402,3.106,403,3.078,404,4.205,405,4.205,406,4.205,407,3.078,408,3.078,409,1.613,410,3.106,411,3.078,412,3.106,413,4.788]],["title/classes/CreateTaskDto.html",[0,0.123,414,2.101]],["body/classes/CreateTaskDto.html",[0,0.19,2,1.246,3,0.224,4,0.195,5,0.195,9,0.314,10,0.918,13,0.445,15,0.02,16,1.965,19,0.732,21,1.423,29,0.224,39,0.224,41,0.016,42,0.016,46,3.12,91,1.324,279,2.217,409,1.942,414,3.249,415,4.922,416,3.292,417,3.877,418,4.228,419,3.338,420,4.46,421,4.334,422,5.251,423,4.334,424,2.984,425,4.334,426,2.984,427,2.984]],["title/classes/CreateTaskListDto.html",[0,0.123,428,2.101]],["body/classes/CreateTaskListDto.html",[0,0.206,2,1.414,3,0.254,4,0.222,5,0.222,9,0.356,10,0.993,13,0.356,15,0.02,16,1.574,19,0.586,21,1.323,29,0.254,39,0.254,41,0.017,42,0.017,91,1.208,409,2.204,415,4.573,417,3.536,419,3.536,420,4.144,424,3.385,426,3.385,427,3.385,428,3.516,429,2.869,430,3.736,431,4.917]],["title/classes/CreateUserDto.html",[0,0.123,432,2.271]],["body/classes/CreateUserDto.html",[0,0.144,2,0.833,3,0.15,4,0.131,5,0.131,7,1.782,9,0.21,10,0.696,13,0.396,14,1.261,15,0.021,16,1.749,19,0.651,21,1.409,29,0.218,39,0.15,41,0.012,42,0.012,72,1.162,73,1.571,91,1.264,101,2.664,301,2.931,302,3.322,312,3.82,396,4.413,399,3.669,402,2.664,409,1.298,410,3.452,413,4.413,432,2.664,433,2.201,434,5.465,435,4.174,436,4.674,437,2.477,438,4.574,439,2.664,440,4.967,441,2.897,442,2.897,443,2.201,444,4.152,445,3.205,446,4.152,447,2.897,448,2.201,449,4.152,450,3.205,451,3.205,452,3.205,453,3.205,454,3.205,455,3.205,456,3.205,457,3.205,458,2.897,459,2.477,460,2.477,461,2.477,462,1.575,463,1.995,464,1.995,465,3.205,466,3.608,467,2.477,468,2.477,469,2.477,470,2.477,471,2.477,472,2.477]],["title/injectables/GoogleAuthGuard.html",[204,2.476,262,0.593]],["body/injectables/GoogleAuthGuard.html",[0,0.117,3,0.304,4,0.154,5,0.154,9,0.247,10,0.782,13,0.395,14,1.215,15,0.021,19,0.701,29,0.304,39,0.176,41,0.013,42,0.013,52,1.225,55,2.992,60,1.034,63,1.292,65,1.152,71,1.334,72,1.011,73,1.334,75,1.733,82,1.225,84,0.67,85,1.625,90,1.839,91,1.092,147,1.528,196,1.854,204,3.262,213,1.285,220,1.292,248,1.44,262,0.782,263,1.285,265,2.346,289,1.44,290,1.528,291,1.942,294,2.591,304,1.992,360,2.407,361,2.407,362,2.804,364,2.804,368,4.136,371,2.992,374,1.992,375,3.738,384,1.992,385,1.992,473,5.286,474,1.992,475,2.992,476,2.992,477,2.348,478,2.992,479,3.438,480,2.348,481,3.438,482,4.738,483,2.154,484,1.854,485,2.154,486,3.41,487,2.992,488,2.154,489,2.154,490,2.916,491,2.916]],["title/injectables/GoogleStrategy.html",[238,2.271,262,0.593]],["body/injectables/GoogleStrategy.html",[0,0.108,3,0.269,4,0.142,5,0.142,9,0.228,10,0.739,11,2.833,12,1.358,13,0.378,14,0.88,15,0.021,19,0.621,21,1.37,29,0.339,39,0.163,41,0.013,42,0.013,48,1.433,52,1.467,55,3.292,60,0.954,63,1.221,65,1.063,71,1.097,72,0.968,73,1.097,82,0.813,84,0.619,86,3.086,88,1.599,90,1.76,91,1.114,95,2.434,119,1.711,135,1.5,139,2.201,147,1.41,190,1.329,191,2.794,192,1.838,213,1.186,220,1.221,238,2.828,244,4.051,248,1.329,262,0.739,263,1.186,265,2.264,275,3.045,277,2.616,289,1.329,290,1.41,291,1.597,299,2.391,300,1.987,369,2.391,388,2.166,402,1.987,492,2.691,493,3.588,494,2.391,495,4.477,496,2.691,497,4.855,498,4.855,499,4.855,500,3.147,501,4.477,502,2.166,503,2.166,504,1.987,505,2.691,506,2.166,507,2.691,508,3.147,509,2.691,510,3.147,511,2.691,512,3.147,513,2.691,514,3.147,515,2.691,516,2.691,517,2.691,518,2.691,519,2.691]],["title/injectables/JwtAuthGuard.html",[262,0.593,520,2.732]],["body/injectables/JwtAuthGuard.html",[0,0.117,3,0.305,4,0.155,5,0.155,9,0.248,10,0.784,13,0.396,14,1.217,15,0.021,19,0.703,29,0.305,39,0.177,41,0.013,42,0.013,52,1.229,60,1.039,63,1.296,65,1.157,71,1.337,72,1.013,73,1.337,75,1.741,82,1.229,84,0.674,85,1.633,90,1.843,91,1.094,147,1.536,196,1.863,213,1.292,220,1.296,248,1.447,262,0.784,263,1.292,265,2.351,289,1.447,290,1.536,291,1.947,293,2.359,304,2.002,360,2.415,361,2.415,362,2.809,364,2.809,374,2.002,375,3.743,384,2.002,385,2.002,439,2.164,474,2.002,475,3.002,476,3.002,477,2.359,478,3.002,479,3.447,480,2.359,481,3.447,483,2.164,484,1.863,485,2.164,487,3.002,488,2.164,489,2.164,520,3.612,521,5.296,522,4.754,523,2.93,524,4.065,525,2.93,526,3.002,527,2.93,528,2.93]],["title/injectables/JwtStrategy.html",[239,2.271,262,0.593]],["body/injectables/JwtStrategy.html",[0,0.138,3,0.209,4,0.182,5,0.182,9,0.293,12,1.225,13,0.385,15,0.021,19,0.633,29,0.348,39,0.209,41,0.015,42,0.015,48,1.292,52,1.044,60,1.225,63,1.448,65,1.364,71,1.301,72,0.986,73,1.301,82,1.044,84,0.794,90,1.364,119,2.196,139,2.507,147,1.81,152,2.551,190,1.706,191,3.073,192,2.359,213,1.522,220,1.101,239,3.355,244,4.248,248,1.706,256,3.454,262,0.877,263,1.522,270,3.454,277,3.103,348,3.454,493,3.657,502,2.781,503,2.781,504,2.551,506,2.781,526,2.551,529,3.454,530,4.039,531,5.312,532,4.039,533,4.039,534,4.039,535,4.039,536,4.039,537,4.039,538,4.039,539,4.039]],["title/injectables/LocalAuthGuard.html",[207,2.476,262,0.593]],["body/injectables/LocalAuthGuard.html",[0,0.116,3,0.303,4,0.152,5,0.152,9,0.245,10,0.777,13,0.393,14,1.211,15,0.021,19,0.698,29,0.303,39,0.175,41,0.013,42,0.013,52,1.216,60,1.025,63,1.283,65,1.141,71,1.327,72,1.006,73,1.327,75,1.716,82,1.216,84,0.664,85,1.61,90,1.829,91,1.088,101,2.133,147,1.514,196,1.836,207,3.24,213,1.273,220,1.283,248,1.427,262,0.777,263,1.273,265,2.336,289,1.427,290,1.514,291,1.932,293,2.326,301,1.514,302,2.752,304,1.973,360,2.391,361,2.391,362,2.792,364,2.792,374,1.973,375,3.727,384,1.973,385,1.973,435,2.326,439,2.133,474,1.973,475,2.972,476,2.972,478,2.972,479,3.421,481,3.421,483,2.133,484,1.836,485,2.133,487,2.972,488,2.133,489,2.133,527,2.889,528,2.889,540,5.268,541,3.378,542,3.378,543,4.707,544,3.378,545,3.378,546,4.707,547,3.378]],["title/injectables/LocalStrategy.html",[240,2.271,262,0.593]],["body/injectables/LocalStrategy.html",[0,0.141,3,0.213,4,0.186,5,0.186,9,0.299,13,0.39,15,0.021,19,0.641,21,1.486,29,0.341,39,0.213,41,0.015,42,0.015,48,1.319,60,1.25,63,1.467,65,1.392,71,1.318,72,0.999,73,1.318,82,1.065,84,0.81,139,2.532,147,1.847,190,1.74,191,3.031,192,2.407,213,1.553,220,1.123,240,3.399,248,1.74,262,0.888,263,1.553,277,3.144,301,2.687,302,3.35,493,3.706,494,3.131,502,2.837,503,2.837,504,2.602,506,2.837,548,3.524,549,4.121,550,5.382,551,4.121,552,3.524,553,4.121,554,4.121,555,4.121]],["title/classes/LogInDto.html",[0,0.123,169,2.101]],["body/classes/LogInDto.html",[0,0.171,2,1.057,3,0.19,4,0.166,5,0.166,7,2.106,9,0.266,10,0.823,13,0.361,14,1.193,15,0.021,16,1.596,19,0.594,21,1.334,29,0.258,39,0.19,41,0.014,42,0.014,91,1.215,169,2.913,301,3.095,302,3.509,395,2.913,399,3.575,409,1.647,410,3.149,438,4.506,443,2.791,444,4.612,445,3.789,446,4.612,448,2.791,449,4.612,450,3.789,451,3.789,452,3.789,453,3.789,454,3.789,455,3.789,456,3.789,457,3.789,460,3.142,461,3.142,462,1.997,463,2.53,464,2.53,465,2.791,466,4.264,467,3.142,468,3.142,469,3.142,556,4.841,557,3.142,558,4.264,559,3.674,560,3.674]],["title/guards/NoAuthenticationGuard.html",[356,2.476,561,2.732]],["body/guards/NoAuthenticationGuard.html",[0,0.15,3,0.227,4,0.198,5,0.198,7,1.853,9,0.318,10,0.724,13,0.318,15,0.021,19,0.523,29,0.29,39,0.227,41,0.016,42,0.016,52,1.449,63,1.528,71,1.075,72,0.814,73,1.075,82,1.134,84,0.862,86,2.385,88,2.229,90,1.893,91,1.041,95,2.385,220,1.196,262,0.925,265,2.463,291,1.565,358,2.771,360,3.307,361,2.848,362,3.101,364,2.091,365,3.54,367,3.02,371,3.54,561,4.258,562,4.793,563,3.752,564,4.387,565,4.387,566,5.605,567,4.387,568,4.387]],["title/injectables/OptionalJwtAuthGuard.html",[262,0.593,569,2.732]],["body/injectables/OptionalJwtAuthGuard.html",[0,0.117,3,0.305,4,0.155,5,0.155,9,0.248,10,0.784,13,0.396,14,1.217,15,0.021,19,0.703,27,1.863,29,0.305,39,0.177,41,0.013,42,0.013,52,1.229,60,1.039,63,1.296,65,1.157,71,1.337,72,1.013,73,1.337,75,1.741,82,1.229,84,0.674,85,1.633,90,1.843,91,1.094,147,1.536,196,1.863,213,1.292,220,1.296,248,1.447,262,0.784,263,1.292,265,2.351,289,1.447,290,1.536,291,1.695,360,2.415,361,2.415,362,2.809,364,2.809,374,2.002,375,3.743,384,2.002,385,2.002,439,2.164,474,2.002,475,3.002,476,3.002,477,2.359,478,3.002,479,3.447,480,2.359,481,3.002,483,2.164,484,1.863,485,2.164,487,3.002,488,2.164,489,2.164,523,2.93,524,4.065,525,2.93,526,4.15,569,3.612,570,5.296,571,4.754,572,3.427]],["title/classes/SignUpDto.html",[0,0.123,182,2.271]],["body/classes/SignUpDto.html",[0,0.158,2,0.949,3,0.171,4,0.149,5,0.149,7,1.956,9,0.239,10,0.764,13,0.42,14,1.245,15,0.021,16,1.856,19,0.691,21,1.391,29,0.277,39,0.171,41,0.013,42,0.013,60,1.404,72,1.207,91,1.269,101,2.924,169,3.568,182,2.924,201,2.507,301,2.737,302,3.103,312,3.941,395,2.705,399,3.378,409,1.479,410,2.924,435,4.359,436,4.959,437,2.822,438,4.359,439,2.924,440,5.223,443,2.507,444,3.518,445,2.507,446,3.518,448,2.507,449,3.518,450,2.507,451,2.507,452,2.507,453,2.507,454,2.507,455,2.507,456,2.507,457,2.507,459,2.822,462,1.794,463,2.272,464,2.272,465,2.507,470,2.822,471,2.822,472,2.822,558,4.959,573,4.574,574,2.822,575,3.3,576,3.3,577,4.63,578,3.3,579,3.3,580,3.3]],["title/classes/Task.html",[0,0.123,429,1.714]],["body/classes/Task.html",[0,0.132,2,1.108,3,0.199,4,0.174,5,0.174,9,0.279,10,0.85,12,1.877,13,0.481,15,0.021,16,2.124,19,0.791,21,1.36,26,3.295,27,2.095,29,0.266,30,4.261,31,2.653,32,3.295,34,1.958,39,0.199,41,0.014,42,0.014,46,2.947,279,2.468,365,3.252,418,4.261,419,3.152,429,2.764,581,3.295,582,5.799,583,4.406,584,5.799,585,3.853,586,3.853,587,4.406,588,3.853,589,5.149,590,3.853,591,3.616,592,3.853,593,2.927,594,4.403,595,3.853,596,2.927,597,3.295,598,3.295,599,3.295,600,2.927,601,3.853,602,3.295]],["title/classes/TaskList.html",[0,0.123,591,2.101]],["body/classes/TaskList.html",[0,0.137,2,1.148,3,0.206,4,0.18,5,0.18,9,0.289,10,0.87,12,1.904,13,0.428,15,0.021,16,1.889,19,0.704,21,1.159,27,2.171,29,0.273,30,3.63,31,2.749,34,2.029,39,0.206,41,0.015,42,0.015,135,2.513,279,2.102,417,3.817,418,2.749,419,3.209,429,3.111,587,4.485,591,3.08,593,3.034,594,4.509,597,3.415,598,3.415,599,3.415,600,3.034,603,5.369,604,3.415,605,4.485,606,3.994,607,3.415,608,6.705,609,5.273,610,5.273,611,3.994,612,3.994,613,3.415,614,3.994,615,3.994,616,3.994]],["title/controllers/TasksController.html",[156,1.955,617,2.476]],["body/controllers/TasksController.html",[0,0.085,3,0.128,4,0.112,5,0.112,9,0.179,12,1.998,13,0.444,15,0.021,16,2.046,19,0.762,29,0.317,39,0.128,41,0.01,42,0.01,63,1.023,71,1.5,72,1.137,73,1.5,82,1.652,84,0.486,91,0.459,156,1.345,158,1.345,160,1.88,161,2.37,185,3.876,186,2.116,188,1.88,189,1.445,213,0.933,220,1.743,279,2.765,414,3.343,428,3.343,429,1.788,605,1.88,617,2.583,618,2.116,619,3.209,620,3.209,621,4.325,622,4.325,623,3.209,624,3.209,625,3.209,626,3.209,627,3.209,628,3.209,629,2.116,630,3.752,631,2.474,632,2.116,633,3.752,634,2.474,635,3.752,636,2.474,637,3.752,638,2.474,639,2.116,640,3.752,641,2.474,642,2.116,643,3.752,644,2.474,645,2.116,646,3.752,647,2.474,648,2.116,649,3.752,650,2.474,651,2.116,652,3.867,653,3.752,654,2.474,655,2.116,656,3.867,657,3.752,658,2.474,659,2.474,660,2.116,661,2.474,662,2.116,663,2.851,664,2.851,665,2.851,666,2.851,667,2.648,668,2.116,669,2.474,670,2.474,671,2.474,672,2.474,673,2.474,674,2.474,675,2.474,676,2.474,677,2.474,678,2.474,679,2.474,680,2.474,681,2.474,682,2.474,683,2.474,684,2.474,685,2.474,686,2.474,687,2.474,688,2.474]],["title/modules/TasksModule.html",[104,1.827,111,2.271]],["body/modules/TasksModule.html",[0,0.155,3,0.234,4,0.204,5,0.204,15,0.021,29,0.358,39,0.234,41,0.016,42,0.016,84,0.89,100,3.611,104,2.905,106,2.461,107,3.108,111,4.379,113,3.611,114,2.859,115,2.859,117,3.116,121,3.439,122,2.644,158,3.108,429,2.157,591,3.34,596,3.439,617,4.314,667,4.05,668,3.871,689,3.871,690,3.871,691,4.527,692,3.871,693,3.871,694,4.527,695,4.527]],["title/injectables/TasksService.html",[262,0.593,667,2.101]],["body/injectables/TasksService.html",[0,0.071,3,0.108,4,0.094,5,0.094,9,0.151,12,1.62,13,0.432,15,0.021,19,0.741,29,0.308,34,1.06,39,0.108,41,0.009,42,0.009,46,1.06,52,1.194,63,0.897,65,1.111,71,1.46,72,1.106,73,1.46,82,1.577,84,0.41,90,1.111,91,0.611,122,1.219,139,3.005,152,1.318,171,3.852,218,2.077,220,1.663,262,0.543,263,0.786,279,2.688,291,1.173,414,2.936,417,3.867,418,2.264,419,1.788,428,2.936,429,2.395,583,1.585,591,1.921,596,1.585,602,1.784,605,3.092,619,2.812,620,2.812,621,3.95,622,3.95,623,2.812,624,2.812,625,2.812,626,2.812,627,2.812,628,2.812,629,2.812,632,2.812,639,2.812,642,2.812,645,2.812,648,2.812,651,2.812,652,3.529,655,2.812,656,3.529,663,2.498,664,2.498,665,2.498,666,2.498,667,1.921,692,1.784,693,1.784,696,1.784,697,2.087,698,4.245,699,4.07,700,2.087,701,3.289,702,2.087,703,2.087,704,2.087,705,2.087,706,2.087,707,2.087,708,2.087,709,2.087,710,2.087,711,2.087,712,1.784,713,2.087,714,2.087,715,2.087,716,2.087,717,2.087,718,2.087,719,2.087,720,2.087,721,3.481,722,2.087,723,3.289,724,2.087,725,2.087,726,2.087,727,2.087,728,2.087,729,2.087,730,2.087,731,2.087,732,2.087,733,3.289,734,2.087,735,2.087,736,2.087,737,2.087,738,2.087,739,2.087,740,2.087,741,2.087,742,2.087,743,2.087]],["title/classes/UpdateAccountDto.html",[0,0.123,744,2.476]],["body/classes/UpdateAccountDto.html",[0,0.181,2,1.524,3,0.274,4,0.239,5,0.239,15,0.02,29,0.326,39,0.274,41,0.018,42,0.018,60,1.608,189,3.097,300,3.348,394,3.65,412,3.348,744,4.336,745,4.028,746,3.65,747,3.65,748,5.301]],["title/classes/UpdateTaskDto.html",[0,0.123,656,2.271]],["body/classes/UpdateTaskDto.html",[0,0.185,2,1.195,3,0.215,4,0.187,5,0.187,9,0.301,10,0.893,13,0.436,15,0.021,16,1.926,19,0.717,21,1.401,29,0.311,39,0.215,41,0.015,42,0.015,46,3.059,60,1.261,91,1.314,365,3.419,409,1.863,414,2.428,416,3.158,417,3.847,419,3.272,420,4.39,424,2.862,426,2.862,427,2.862,583,4.573,656,3.419,665,3.158,746,2.862,747,2.862,749,4.845,750,4.157,751,6.02,752,4.157,753,4.157,754,3.555,755,3.555,756,4.157]],["title/classes/UpdateTaskListDto.html",[0,0.123,652,2.271]],["body/classes/UpdateTaskListDto.html",[0,0.191,2,1.254,3,0.225,4,0.197,5,0.197,9,0.316,10,0.921,12,1.868,13,0.405,15,0.021,16,1.787,19,0.665,21,1.227,29,0.318,39,0.225,41,0.016,42,0.016,60,1.323,91,1.275,279,2.226,409,1.954,417,3.732,419,3.348,420,3.844,422,5.266,424,3.002,426,3.002,427,3.002,428,2.547,429,3.094,430,3.313,652,3.526,664,3.313,746,3.002,747,3.002,749,4.679,754,3.729,755,3.729,757,4.36,758,4.36,759,4.36]],["title/classes/UpdateUserDto.html",[0,0.123,760,2.476]],["body/classes/UpdateUserDto.html",[0,0.181,2,1.524,3,0.274,4,0.239,5,0.239,15,0.02,29,0.326,39,0.274,41,0.018,42,0.018,60,1.608,189,3.097,432,3.348,433,4.028,745,4.028,746,3.65,747,3.65,760,4.336,761,4.533,762,5.301]],["title/classes/User.html",[0,0.123,14,0.707]],["body/classes/User.html",[0,0.112,1,2.728,2,0.94,3,0.169,4,0.147,5,0.147,7,1.943,9,0.419,10,0.759,12,1.614,13,0.47,14,1.135,15,0.021,16,2.076,19,0.773,21,1.455,27,1.777,29,0.299,30,4.347,31,2.251,33,4.939,34,1.661,39,0.169,41,0.013,42,0.013,72,0.988,135,3.318,152,2.905,190,1.381,279,1.834,289,1.381,301,2.385,302,2.704,312,3.109,331,2.796,378,3.361,462,2.893,463,2.251,464,2.251,587,4.044,593,3.495,600,4.388,607,2.796,613,3.934,763,2.796,764,4.044,765,4.551,766,3.269,767,4.6,768,4.6,769,6.622,770,3.269,771,3.269,772,5.776,773,3.269,774,4.6,775,3.269,776,3.269,777,3.269,778,4.6,779,3.269,780,3.269,781,3.269]],["title/interfaces/UserInterface.html",[43,1.955,48,1.151]],["body/interfaces/UserInterface.html",[3,0.214,4,0.187,5,0.187,8,3.463,9,0.3,10,0.892,12,1.932,13,0.5,14,1.182,15,0.021,21,1.554,29,0.279,39,0.311,41,0.015,42,0.015,43,3.268,44,2.853,46,2.106,48,1.729,49,4.105,50,3.544,52,1.396,72,1.183,279,2.397,301,2.855,312,3.721,378,4.023,764,4.839,765,5.447,782,2.853,783,4.145,784,3.149,785,3.544,786,3.149]],["title/interfaces/UserPasswordInterface.html",[43,1.955,462,1.955]],["body/interfaces/UserPasswordInterface.html",[3,0.265,4,0.231,5,0.231,9,0.372,10,1.019,13,0.372,15,0.02,21,1.456,29,0.265,39,0.265,41,0.017,42,0.017,43,2.788,44,3.532,48,2.12,51,4.387,60,1.873,302,3.494,462,3.357,787,4.387,788,4.387]],["title/controllers/UsersController.html",[156,1.955,789,2.476]],["body/controllers/UsersController.html",[0,0.111,3,0.168,4,0.146,5,0.146,9,0.235,12,1.606,13,0.331,14,1.377,15,0.021,16,1.695,19,0.631,21,1.164,29,0.342,39,0.168,41,0.013,42,0.013,48,2.07,52,0.837,63,1.246,71,1.12,72,0.849,73,1.12,75,2.322,82,1.369,84,0.637,91,0.601,139,2.837,156,1.761,158,1.761,160,2.461,161,2.887,171,3.345,188,2.461,189,1.893,190,1.368,196,1.761,197,3.646,213,1.221,218,3.345,220,1.444,272,2.879,279,2.112,301,2.374,303,2.77,351,2.77,382,2.23,660,2.77,662,2.77,786,3.472,789,3.147,790,2.77,791,4.529,792,5.752,793,4.571,794,4.571,795,3.24,796,3.24,797,3.24,798,3.24,799,3.24,800,3.24,801,3.24,802,3.24,803,3.24,804,3.24,805,3.24,806,2.77,807,3.24,808,3.24,809,3.24,810,3.24,811,3.24,812,3.24,813,3.24,814,3.24,815,3.24,816,3.24]],["title/modules/UsersModule.html",[104,1.827,112,2.101]],["body/modules/UsersModule.html",[0,0.15,1,2.512,3,0.227,4,0.198,5,0.198,14,0.862,15,0.021,29,0.356,39,0.227,41,0.016,42,0.016,84,0.862,100,3.54,104,2.848,106,2.385,107,3.047,112,4.084,113,3.54,114,2.771,115,2.771,117,3.02,121,3.333,122,2.563,158,3.047,243,4.793,272,3.963,789,4.252,806,3.752,817,3.752,818,3.752,819,3.752,820,4.387,821,3.752,822,3.752,823,4.387,824,4.387]],["title/injectables/UsersService.html",[262,0.593,272,1.955]],["body/injectables/UsersService.html",[0,0.05,1,2.617,3,0.076,4,0.066,5,0.066,9,0.107,10,0.408,12,1.921,13,0.449,14,1.257,15,0.021,19,0.696,21,1.257,29,0.272,34,0.748,39,0.076,41,0.007,42,0.007,52,1.479,63,0.675,64,1.259,65,0.836,71,1.369,72,1.038,73,1.369,77,1.259,82,1.444,84,0.289,90,1.413,91,0.777,122,0.86,139,2.901,152,2.37,171,2.022,218,3.043,220,1.524,262,0.408,263,0.555,265,1.496,267,2.116,272,1.345,277,3.577,278,2.116,279,2.282,289,1.352,290,1.435,291,2.236,293,1.013,300,1.563,301,2.031,304,3.577,312,2.815,339,3.209,340,3.209,342,2.116,353,3.578,412,3.194,432,2.643,438,4.093,663,1.88,666,1.88,698,3.661,712,1.259,721,2.738,744,3.317,760,3.482,761,2.116,764,1.88,791,1.259,821,1.259,822,1.259,825,1.259,826,2.475,827,2.475,828,2.475,829,3.752,830,2.475,831,2.475,832,2.475,833,2.475,834,3.201,835,2.475,836,1.472,837,3.201,838,2.475,839,2.475,840,2.475,841,1.472,842,2.475,843,1.472,844,2.475,845,1.472,846,1.472,847,2.475,848,5.058,849,1.472,850,1.472,851,2.475,852,1.472,853,2.475,854,1.472,855,2.475,856,1.472,857,1.472,858,1.472,859,2.475,860,1.472,861,2.475,862,1.472,863,1.472,864,1.472,865,2.475,866,3.752,867,2.475,868,2.475,869,2.475,870,2.116,871,4.819,872,2.475,873,1.472,874,3.752,875,3.752,876,2.475,877,2.475,878,2.475,879,1.472,880,2.475,881,2.475,882,1.472,883,1.472,884,2.475,885,2.475,886,1.472,887,1.472,888,1.472,889,1.472,890,1.472,891,1.472,892,3.201,893,2.475,894,2.475,895,1.472,896,1.472,897,1.472,898,1.472,899,1.472,900,1.472,901,1.472,902,1.472,903,1.472,904,1.472]],["title/injectables/VkontakteAuthGuard.html",[209,2.476,262,0.593]],["body/injectables/VkontakteAuthGuard.html",[0,0.117,3,0.304,4,0.154,5,0.154,9,0.247,10,0.782,13,0.395,14,1.215,15,0.021,19,0.701,29,0.304,39,0.176,41,0.013,42,0.013,52,1.225,56,2.576,60,1.034,63,1.292,65,1.152,71,1.334,72,1.011,73,1.334,75,1.733,82,1.225,84,0.67,85,1.625,90,1.839,91,1.092,147,1.528,196,1.854,209,3.262,213,1.285,220,1.292,248,1.44,262,0.782,263,1.285,265,2.346,289,1.44,290,1.528,291,1.942,294,2.591,304,1.992,360,2.407,361,2.407,362,2.804,364,2.804,368,4.136,371,2.992,374,1.992,375,3.738,384,1.992,385,1.992,474,1.992,475,2.992,476,2.992,477,2.348,478,2.992,479,3.438,480,2.348,481,3.438,483,2.154,484,1.854,485,2.154,487,2.992,488,2.154,489,2.154,490,2.916,491,2.916,905,5.286,906,4.738,907,3.41]],["title/injectables/VkontakteStrategy.html",[241,2.271,262,0.593]],["body/injectables/VkontakteStrategy.html",[0,0.108,3,0.27,4,0.142,5,0.142,9,0.229,10,0.74,11,2.837,12,1.36,13,0.378,14,0.881,15,0.021,19,0.622,21,1.371,29,0.339,39,0.163,41,0.013,42,0.013,48,1.435,52,1.469,56,2.837,60,0.957,63,1.223,65,1.065,71,1.098,72,0.969,73,1.098,82,0.815,84,0.62,86,3.09,88,1.602,90,1.762,91,1.115,95,2.438,119,1.714,135,1.503,139,2.204,147,1.413,190,1.332,191,2.797,192,1.842,213,1.189,220,1.223,241,2.832,244,4.054,248,1.332,262,0.74,263,1.189,265,2.266,275,3.048,277,2.62,289,1.332,290,1.413,291,1.599,299,2.396,300,1.992,369,2.396,388,2.171,402,1.992,493,3.593,494,2.396,496,2.697,497,4.86,498,4.86,499,4.86,502,2.171,503,2.171,504,1.992,506,2.171,507,2.697,509,2.697,511,2.697,513,2.697,515,2.697,516,2.697,517,2.697,518,2.697,519,2.697,908,2.697,909,4.484,910,3.154,911,4.484,912,3.154,913,3.154,914,3.154,915,3.154]],["title/coverage.html",[916,3.734]],["body/coverage.html",[0,0.233,1,1.022,5,0.103,6,1.95,8,1.24,13,0.165,14,0.693,15,0.021,41,0.01,42,0.01,43,2.342,45,2.427,48,0.73,53,1.44,57,1.732,58,1.95,59,1.95,72,0.423,124,1.57,143,1.95,144,1.95,156,2.342,157,1.57,159,1.95,161,1.44,169,1.332,182,1.44,191,1.022,194,1.732,197,1.57,204,1.57,207,1.57,209,1.57,238,1.44,239,1.44,240,1.44,241,1.44,262,1.067,264,1.95,272,1.24,275,1.332,291,0.813,296,1.732,356,2.966,357,1.57,359,1.95,372,1.57,373,1.95,379,1.732,382,1.57,387,6.283,393,1.95,394,2.966,395,1.332,412,1.44,413,2.678,414,1.332,415,2.678,416,2.678,428,1.332,429,2.053,430,2.678,432,1.44,433,2.678,462,1.24,473,1.95,474,3.061,484,1.24,492,1.95,520,1.732,521,1.95,526,1.44,529,1.95,540,1.95,548,1.95,556,1.95,557,1.95,561,1.732,562,1.95,563,1.95,569,1.732,570,1.95,573,1.95,574,1.95,581,1.95,591,1.332,603,1.95,604,1.95,617,1.57,618,1.95,652,1.44,656,1.44,667,1.332,696,1.95,744,1.57,745,2.678,749,2.678,760,1.57,763,1.95,782,2.427,784,1.732,787,1.95,788,1.95,789,1.57,790,1.95,825,1.95,905,1.95,908,1.95,916,1.732,917,2.28,918,2.28,919,2.28,920,5.54,921,4.308,922,2.28,923,2.28,924,3.014,925,4.145,926,6.622,927,1.95,928,5.776,929,5.776,930,1.95,931,1.95,932,1.95,933,3.014,934,6.622,935,1.95,936,4.847,937,4.847,938,2.28,939,2.28,940,5.776,941,5.54,942,2.28,943,2.28,944,2.28,945,2.28,946,3.014,947,5.24,948,1.95,949,1.95,950,2.678,951,1.95,952,1.95,953,2.28,954,2.28,955,2.28,956,2.28,957,2.28,958,1.95,959,1.95,960,1.95,961,3.684,962,1.95,963,1.95,964,2.28,965,2.28]],["title/dependencies.html",[107,2.352,966,3]],["body/dependencies.html",[0,0.189,15,0.021,34,2.182,41,0.015,42,0.015,55,2.712,56,2.335,84,0.844,85,2.047,88,2.809,107,2.335,119,2.335,122,2.509,189,2.509,246,3.263,248,1.814,295,3.672,409,1.925,504,4.219,505,3.672,526,2.712,552,3.672,967,6.456,968,4.295,969,4.295,970,4.295,971,4.295,972,4.295,973,4.295,974,3.672,975,4.295,976,4.295,977,4.295,978,4.295,979,4.295,980,4.295,981,4.295,982,4.295,983,4.295,984,4.295,985,4.295,986,4.295,987,4.295,988,4.295,989,3.672,990,4.295,991,4.295,992,4.295,993,4.295,994,4.295,995,4.295,996,4.295,997,3.672,998,4.295,999,4.295,1000,4.295]],["title/miscellaneous/functions.html",[1001,1.753,1002,3.7]],["body/miscellaneous/functions.html",[9,0.324,13,0.411,15,0.02,27,3.083,41,0.016,42,0.016,71,1.605,72,1.217,73,1.605,75,2.882,82,1.694,296,4.733,395,3.64,946,3.822,948,4.85,949,4.85,950,3.396,951,3.822,952,5.328,1001,2.611,1002,3.822,1003,4.47,1004,5.672,1005,4.85,1006,4.47,1007,4.85,1008,3.822,1009,4.47,1010,4.47,1011,4.47,1012,4.47,1013,4.47,1014,5.604,1015,6.553,1016,5.672,1017,4.47]],["title/index.html",[9,0.217,1018,3,1019,3]],["body/index.html",[4,0.191,15,0.021,41,0.015,42,0.015,46,2.15,125,3.618,435,2.913,698,3.214,916,3.214,1020,4.231,1021,4.231,1022,5.476,1023,4.231,1024,4.231,1025,4.231,1026,4.231,1027,4.231,1028,4.231,1029,6.071,1030,4.231,1031,4.231,1032,4.231,1033,6.932,1034,4.231,1035,4.231,1036,6.812,1037,4.231,1038,4.231,1039,5.476,1040,4.231,1041,4.231,1042,4.231,1043,4.231,1044,5.476,1045,5.476,1046,4.231,1047,4.231,1048,4.231,1049,5.476,1050,5.476,1051,4.231,1052,4.231,1053,4.231,1054,4.231,1055,4.231,1056,3.618,1057,4.231,1058,4.231,1059,4.231,1060,4.231,1061,4.231,1062,4.231,1063,4.231,1064,4.231,1065,4.231,1066,4.231,1067,4.231,1068,4.231,1069,4.231,1070,4.231,1071,4.231,1072,4.231,1073,4.231]],["title/modules.html",[106,2.672]],["body/modules.html",[15,0.018,41,0.018,42,0.018,105,3.691,106,2.914,110,3.386,111,3.386,112,3.132,1056,5.967,1074,6.978,1075,6.978,1076,6.978]],["title/overview.html",[1077,4.203]],["body/overview.html",[2,1.165,15,0.02,41,0.015,42,0.015,44,2.788,105,4.793,106,2.202,107,2.893,108,3.464,109,3.464,110,4.634,111,4.141,112,4.008,113,3.361,114,2.558,115,2.558,158,2.202,191,3.075,234,3.464,236,3.464,237,3.464,238,3.754,239,3.754,240,3.754,241,3.754,263,1.527,272,3.73,358,2.558,667,3.472,689,3.464,690,3.464,817,3.464,818,3.464,819,3.464,1077,3.464,1078,4.05,1079,5.944,1080,4.05,1081,4.05]],["title/miscellaneous/typealiases.html",[1001,1.753,1082,4.327]],["body/miscellaneous/typealiases.html",[9,0.384,13,0.384,15,0.018,24,3.978,41,0.018,42,0.018,45,3.65,49,5.282,378,3.978,782,3.65,950,4.028,1001,3.097,1005,5.747,1007,5.386,1008,5.386,1083,5.301,1084,4.533,1085,4.533]],["title/miscellaneous/variables.html",[1001,1.753,1086,3.7]],["body/miscellaneous/variables.html",[9,0.202,11,2.227,13,0.389,14,1.272,15,0.021,21,1.178,27,1.513,41,0.011,42,0.011,45,1.917,46,1.415,48,1.311,52,1.386,53,2.588,54,2.381,55,1.758,56,1.513,71,1.191,72,0.761,86,1.513,88,1.415,95,1.513,135,1.953,161,2.588,194,3.113,197,2.821,220,1.326,279,1.11,289,2.906,290,3.128,357,1.917,358,3.775,362,1.327,364,1.953,367,1.917,371,3.071,372,1.917,378,1.758,379,3.113,382,4.115,388,1.917,417,2.643,484,2.227,782,1.917,784,3.113,785,2.381,786,2.115,870,2.381,924,2.381,925,5.285,927,3.504,930,2.381,931,2.381,932,2.381,933,2.381,935,2.381,958,2.381,959,3.504,960,3.504,961,2.381,962,3.504,963,3.504,974,2.381,989,2.381,997,2.381,1001,1.626,1014,2.381,1084,2.381,1085,2.381,1086,2.381,1087,4.097,1088,2.784,1089,4.862,1090,2.784,1091,2.784,1092,2.784,1093,4.097,1094,2.784,1095,2.784,1096,4.097,1097,5.716,1098,2.784,1099,2.784,1100,2.784,1101,2.784,1102,2.784,1103,2.784,1104,2.784,1105,2.784,1106,2.784,1107,4.097,1108,2.784,1109,2.784,1110,4.097,1111,5.363,1112,2.784,1113,2.784,1114,2.784,1115,2.784,1116,2.784,1117,2.784,1118,2.784,1119,2.784,1120,2.784,1121,2.784,1122,2.784,1123,2.784,1124,2.784,1125,2.784,1126,2.784,1127,2.784,1128,2.784,1129,2.784,1130,2.784,1131,2.784,1132,2.784,1133,2.784,1134,2.784,1135,2.784,1136,2.784,1137,2.784,1138,2.784,1139,2.784]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":387,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{}}}],["0.1.13",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["0.2.38",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["100",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1080,"title":{},"body":{"overview.html":{}}}],["12345678",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["14",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":1081,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":594,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{}}}],["256",{"_index":768,"title":{},"body":{"classes/User.html":{}}}],["3",{"_index":1079,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["30m",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["32",{"_index":778,"title":{},"body":{"classes/User.html":{}}}],["4",{"_index":1078,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["49899993",{"_index":411,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["5.0.1",{"_index":973,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":971,"title":{},"body":{"dependencies.html":{}}}],["64",{"_index":772,"title":{},"body":{"classes/User.html":{}}}],["66",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["8.0.0",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":969,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":972,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["9]+$/i",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["a.id",{"_index":738,"title":{},"body":{"injectables/TasksService.html":{}}}],["access",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access_token",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["accessed",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":497,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["account",{"_index":1,"title":{"classes/Account.html":{}},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"injectables/AuthService.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["account.data",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.dto",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"classes/UpdateAccountDto.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{}}}],["account.dto.ts",{"_index":394,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["account.dto.ts:15",{"_index":407,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["account.dto.ts:22",{"_index":400,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["account.dto.ts:28",{"_index":397,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["account.dto.ts:34",{"_index":403,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["account.entity",{"_index":780,"title":{},"body":{"classes/User.html":{}}}],["account.interface",{"_index":783,"title":{},"body":{"interfaces/UserInterface.html":{}}}],["account.type",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["account.user",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["account.user.id",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["account['id",{"_index":894,"title":{},"body":{"injectables/UsersService.html":{}}}],["account['type",{"_index":893,"title":{},"body":{"injectables/UsersService.html":{}}}],["accountinterface",{"_index":8,"title":{"interfaces/AccountInterface.html":{}},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["accounts",{"_index":764,"title":{},"body":{"classes/User.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["accountsrepository",{"_index":837,"title":{},"body":{"injectables/UsersService.html":{}}}],["accounttype",{"_index":24,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"miscellaneous/typealiases.html":{}}}],["accounttypes",{"_index":53,"title":{},"body":{"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["additional",{"_index":398,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["address",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["address'})@isemail(undefined",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["admin",{"_index":786,"title":{},"body":{"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":1083,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allownoauth",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alphanumeric",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["already",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1057,"title":{},"body":{"index.html":{}}}],["angularuniversalfilter",{"_index":57,"title":{"classes/AngularUniversalFilter.html":{}},"body":{"classes/AngularUniversalFilter.html":{},"coverage.html":{}}}],["another",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["apibearerauth",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibody",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["apisecurity",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apitags",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('tasks",{"_index":670,"title":{},"body":{"controllers/TasksController.html":{}}}],["apitags('users",{"_index":808,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_base_href",{"_index":67,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["app_pipe",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["applicationref",{"_index":68,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["applications",{"_index":1028,"title":{},"body":{"index.html":{}}}],["applydecorators",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applydecorators(useguards(optionaljwtauthguard",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":105,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appvalidationpipe",{"_index":124,"title":{"classes/AppValidationPipe.html":{}},"body":{"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"coverage.html":{}}}],["argumentshost",{"_index":79,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["array",{"_index":1012,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arrayelement",{"_index":49,"title":{},"body":{"interfaces/AccountInterface.html":{},"interfaces/UserInterface.html":{},"miscellaneous/typealiases.html":{}}}],["asc",{"_index":599,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{}}}],["assign",{"_index":405,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["async",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{}}}],["auth",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/UsersController.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["auth.decorator.ts",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":474,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:14",{"_index":477,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":541,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.guard.ts:22",{"_index":480,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["auth.guard.ts:24",{"_index":542,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["auth.guard.ts:8",{"_index":476,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["auth.service",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["auth/auth.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/auth.decorator",{"_index":662,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/optional",{"_index":803,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/decorators/roles.decorator",{"_index":804,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":805,"title":{},"body":{"controllers/UsersController.html":{}}}],["authcontroller",{"_index":157,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":371,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authentication.guard.ts",{"_index":563,"title":{},"body":{"guards/NoAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.guard.ts:8",{"_index":564,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["authenticationguard",{"_index":357,"title":{"guards/AuthenticationGuard.html":{}},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":483,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["authguard('google",{"_index":486,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["authguard('jwt",{"_index":523,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["authguard('local",{"_index":544,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard('vkontakte",{"_index":907,"title":{},"body":{"injectables/VkontakteAuthGuard.html":{}}}],["authmodule",{"_index":110,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1066,"title":{},"body":{"index.html":{}}}],["authorizationguard",{"_index":372,"title":{"guards/AuthorizationGuard.html":{}},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authorized",{"_index":392,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["authservice",{"_index":191,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["b",{"_index":737,"title":{},"body":{"injectables/TasksService.html":{}}}],["b.id",{"_index":739,"title":{},"body":{"injectables/TasksService.html":{}}}],["backers",{"_index":1058,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('another",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('failed",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('this",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('user",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`error",{"_index":871,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception(info?.message",{"_index":528,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["badrequestmessage",{"_index":545,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["baseexceptionfilter",{"_index":61,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["basic",{"_index":404,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["bcrypt",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["begin",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["body",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["boolean",{"_index":365,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"guards/NoAuthenticationGuard.html":{},"classes/Task.html":{},"classes/UpdateTaskDto.html":{}}}],["bootstrap",{"_index":952,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1076,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1074,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1023,"title":{},"body":{"index.html":{}}}],["callbackurl",{"_index":511,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["canactivate",{"_index":360,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["canactivate(context",{"_index":361,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["cascade",{"_index":608,"title":{},"body":{"classes/TaskList.html":{}}}],["catch",{"_index":64,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"injectables/UsersService.html":{}}}],["catch((error",{"_index":898,"title":{},"body":{"injectables/UsersService.html":{}}}],["catch(exception",{"_index":76,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["catch(notfoundexception",{"_index":89,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["characters",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["class",{"_index":0,"title":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["clientid",{"_index":507,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["clientsecret",{"_index":509,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["cluster_appmodule",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":689,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":690,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":817,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":818,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":819,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collection",{"_index":1011,"title":{},"body":{"miscellaneous/functions.html":{}}}],["column",{"_index":30,"title":{},"body":{"classes/Account.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["column('boolean",{"_index":589,"title":{},"body":{"classes/Task.html":{}}}],["column('simple",{"_index":17,"title":{},"body":{"classes/Account.html":{}}}],["column({default",{"_index":776,"title":{},"body":{"classes/User.html":{}}}],["column({length",{"_index":593,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["common/interfaces/account.interface",{"_index":35,"title":{},"body":{"classes/Account.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["common/interfaces/user",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{}}}],["common/interfaces/user.interface",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/VkontakteStrategy.html":{}}}],["common/utilities",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["compression",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["configservice.get('google_callback_url",{"_index":512,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('google_client_id",{"_index":508,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('google_client_secret",{"_index":510,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('google_scope",{"_index":514,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_timeout",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('vkontakte_callback_url",{"_index":914,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["configservice.get('vkontakte_client_id",{"_index":912,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["configservice.get('vkontakte_client_secret",{"_index":913,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["configservice.get('vkontakte_scope",{"_index":915,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["connect",{"_index":401,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["connectaccount",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["connectaccount(connectaccountdto",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["connectaccountdto",{"_index":275,"title":{"classes/ConnectAccountDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/ConnectAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["connected",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["connectuserdto.data",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":52,"title":{},"body":{"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":65,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["constructor(authservice",{"_index":494,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["constructor(configservice",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(indexhtml",{"_index":66,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["constructor(private",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["constructor(reflector",{"_index":374,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["constructor(taskrepository",{"_index":697,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(usersrepository",{"_index":836,"title":{},"body":{"injectables/UsersService.html":{}}}],["contain",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["context",{"_index":364,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":385,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["context.gethandler",{"_index":384,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":367,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"guards/NoAuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":156,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":669,"title":{},"body":{"controllers/TasksController.html":{}}}],["controller('users",{"_index":807,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":916,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":747,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{}}}],["createaccount",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["createaccount(id",{"_index":840,"title":{},"body":{"injectables/UsersService.html":{}}}],["createaccountdto",{"_index":412,"title":{"classes/CreateAccountDto.html":{}},"body":{"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createdatecolumn",{"_index":584,"title":{},"body":{"classes/Task.html":{}}}],["createddate",{"_index":582,"title":{},"body":{"classes/Task.html":{}}}],["createlist",{"_index":619,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createlist(@body",{"_index":680,"title":{},"body":{"controllers/TasksController.html":{}}}],["createlist(createtasklistdto",{"_index":629,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createmockobj",{"_index":948,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmockobj(methodnames",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createparamdecorator",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('user",{"_index":877,"title":{},"body":{"injectables/UsersService.html":{}}}],["createtask",{"_index":620,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(@body",{"_index":671,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(createtaskdto",{"_index":632,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtaskdto",{"_index":414,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createtaskdto.description",{"_index":718,"title":{},"body":{"injectables/TasksService.html":{}}}],["createtaskdto.title",{"_index":716,"title":{},"body":{"injectables/TasksService.html":{}}}],["createtasklistdto",{"_index":428,"title":{"classes/CreateTaskListDto.html":{}},"body":{"classes/CreateTaskListDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["createtasklistdto.title",{"_index":732,"title":{},"body":{"injectables/TasksService.html":{}}}],["createuser",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":842,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":432,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":872,"title":{},"body":{"injectables/UsersService.html":{}}}],["cs",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.program",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.tscompiler.program",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":93,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["ctx.getrequest",{"_index":96,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["ctx.getresponse",{"_index":98,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["data",{"_index":11,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/Account.html":{},"controllers/AuthController.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/allow",{"_index":485,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["decorators/auth.decorator",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/no",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/optional",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/roles.decorator",{"_index":380,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["decorators/user.decorator",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["delete",{"_index":659,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('list/:id",{"_index":646,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('task/:id",{"_index":649,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleting",{"_index":887,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":107,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":46,"title":{},"body":{"interfaces/AccountInterface.html":{},"classes/CreateTaskDto.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"interfaces/UserInterface.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1035,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["dto/connect",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["dto/create",{"_index":663,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["dto/log",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/sign",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":666,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":1046,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1024,"title":{},"body":{"index.html":{}}}],["email",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["email/i.test(message",{"_index":869,"title":{},"body":{"injectables/UsersService.html":{}}}],["empty",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["empty'})@matches(/^(?:[a",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["empty'})@minlength(8",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["enableimplicitconversion",{"_index":155,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["end",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["enter",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["entities/account.entity",{"_index":821,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entities/task",{"_index":692,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["entities/task.entity",{"_index":693,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["entities/user.entity",{"_index":822,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":31,"title":{},"body":{"classes/Account.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["entity('accounts",{"_index":37,"title":{},"body":{"classes/Account.html":{}}}],["entity('task",{"_index":597,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{}}}],["entity('users",{"_index":781,"title":{},"body":{"classes/User.html":{}}}],["env",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["env.example",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":481,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["error",{"_index":892,"title":{},"body":{"injectables/UsersService.html":{}}}],["error('method",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["error('something",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["even",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":410,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["exception",{"_index":81,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["exceptionfilter",{"_index":62,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["executioncontext",{"_index":362,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["expandvariables",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["expiresin",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["exports",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":88,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":60,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"classes/AppValidationPipe.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserPasswordInterface.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["extractjwt",{"_index":533,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":535,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":54,"title":{},"body":{"interfaces/AccountInterface.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":962,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":152,"title":{},"body":{"classes/AppValidationPipe.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["findaccount",{"_index":828,"title":{},"body":{"injectables/UsersService.html":{}}}],["findaccount(type",{"_index":844,"title":{},"body":{"injectables/UsersService.html":{}}}],["findalllists",{"_index":621,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findalltasks",{"_index":622,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findallusers",{"_index":829,"title":{},"body":{"injectables/UsersService.html":{}}}],["finding",{"_index":901,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonelist",{"_index":623,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findonelist(@param('id",{"_index":683,"title":{},"body":{"controllers/TasksController.html":{}}}],["findonelist(id",{"_index":639,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findonetask",{"_index":624,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findonetask(@param('id",{"_index":674,"title":{},"body":{"controllers/TasksController.html":{}}}],["findonetask(id",{"_index":642,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["finduserbyemail",{"_index":830,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":847,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(id",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["finduserbyusername",{"_index":831,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyusername(username",{"_index":851,"title":{},"body":{"injectables/UsersService.html":{}}}],["forbidnonwhitelisted",{"_index":151,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["forbidunknownvalues",{"_index":153,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["found",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1022,"title":{},"body":{"index.html":{}}}],["function",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1002,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":811,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@optionalauth",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('@:username",{"_index":814,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('@:username')@optionalauth",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('google",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@optionalauth(googleauthguard",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('list",{"_index":635,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('list/:id",{"_index":640,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('task",{"_index":637,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('task/:id",{"_index":643,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('vkontakte",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('vkontakte')@optionalauth(vkontakteauthguard",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@auth()@roles('moderator",{"_index":795,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(key",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getall",{"_index":792,"title":{},"body":{"controllers/UsersController.html":{}}}],["getconnectionoptions",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["getprofilebyid",{"_index":793,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyid(@param('id",{"_index":812,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyid(id",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyusername",{"_index":794,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyusername(@param('username",{"_index":815,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofilebyusername(username",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{}}}],["getting",{"_index":1018,"title":{"index.html":{}},"body":{}}],["google",{"_index":55,"title":{},"body":{"interfaces/AccountInterface.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["googleauthguard",{"_index":204,"title":{"injectables/GoogleAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["googlestrategy",{"_index":238,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["grow",{"_index":1053,"title":{},"body":{"index.html":{}}}],["guard",{"_index":356,"title":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"guards/NoAuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":358,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"guards/NoAuthenticationGuard.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["handlerequest",{"_index":475,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["handlerequest(err",{"_index":478,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["hash",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["helmet",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1063,"title":{},"body":{"index.html":{}}}],["host",{"_index":78,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["host.switchtohttp",{"_index":94,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["https://nestjs.com",{"_index":1070,"title":{},"body":{"index.html":{}}}],["httpserver",{"_index":69,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["hyphen",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["hyphens",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["id",{"_index":12,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"injectables/AuthService.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{}}}],["identifier",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["id}@${type",{"_index":904,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":536,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implemented",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/Account.html":{},"classes/AngularUniversalFilter.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"classes/SignUpDto.html":{},"classes/User.html":{}}}],["import",{"_index":29,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["imports",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["in.dto",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpDto.html":{}}}],["in.dto.ts",{"_index":557,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["in.dto.ts:14",{"_index":560,"title":{},"body":{"classes/LogInDto.html":{}}}],["in.dto.ts:22",{"_index":559,"title":{},"body":{"classes/LogInDto.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index()@column({length",{"_index":767,"title":{},"body":{"classes/User.html":{}}}],["indexhtml",{"_index":74,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["inherited",{"_index":577,"title":{},"body":{"classes/SignUpDto.html":{}}}],["inject",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":262,"title":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["injectables",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"overview.html":{}}}],["injectrepository",{"_index":712,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(account",{"_index":863,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(task",{"_index":713,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(tasklist",{"_index":714,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(user",{"_index":862,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":1032,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1034,"title":{},"body":{"index.html":{}}}],["interface",{"_index":43,"title":{"interfaces/AccountInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{}},"body":{"interfaces/AccountInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":44,"title":{},"body":{"interfaces/AccountInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"overview.html":{}}}],["introspectcomments",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":527,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["isauthenticated",{"_index":368,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["isauthorized",{"_index":389,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["isboolean",{"_index":751,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["isdone",{"_index":583,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{}}}],["isemail",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["isemail(undefined",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["isglobal",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":408,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["isin(accounttypes",{"_index":406,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{}}}],["isint",{"_index":422,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["isnotempty",{"_index":399,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["isnotempty({message",{"_index":558,"title":{},"body":{"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["isoptional",{"_index":396,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{}}}],["isoptional()@isnotempty({message",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispublic",{"_index":487,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["isstring",{"_index":420,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["isstring()@maxlength(255",{"_index":424,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["issuejwt",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["issuejwt(user",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["isunauthenticated",{"_index":566,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["isvalidjwt",{"_index":524,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["isvalidpassword",{"_index":546,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["jest",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.mocked",{"_index":1009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["john",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["john@example.com",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignUpDto.html":{}}}],["join",{"_index":1060,"title":{},"body":{"index.html":{}}}],["json",{"_index":18,"title":{},"body":{"classes/Account.html":{}}}],["json.stringify(account",{"_index":890,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwt",{"_index":526,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":520,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":534,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":239,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1067,"title":{},"body":{"index.html":{}}}],["key",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyof",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leftjoinandselect('user.accounts",{"_index":878,"title":{},"body":{"injectables/UsersService.html":{}}}],["length",{"_index":600,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["license",{"_index":1073,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1050,"title":{},"body":{"index.html":{}}}],["list",{"_index":418,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"injectables/TasksService.html":{}}}],["list.dto",{"_index":664,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{}}}],["list.dto.ts",{"_index":430,"title":{},"body":{"classes/CreateTaskListDto.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["list.dto.ts:11",{"_index":758,"title":{},"body":{"classes/UpdateTaskListDto.html":{}}}],["list.dto.ts:6",{"_index":431,"title":{},"body":{"classes/CreateTaskListDto.html":{}}}],["list.dto.ts:7",{"_index":757,"title":{},"body":{"classes/UpdateTaskListDto.html":{}}}],["list.entity",{"_index":596,"title":{},"body":{"classes/Task.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["list.entity.ts",{"_index":604,"title":{},"body":{"classes/TaskList.html":{},"coverage.html":{}}}],["list.entity.ts:11",{"_index":606,"title":{},"body":{"classes/TaskList.html":{}}}],["list.entity.ts:14",{"_index":612,"title":{},"body":{"classes/TaskList.html":{}}}],["list.entity.ts:21",{"_index":611,"title":{},"body":{"classes/TaskList.html":{}}}],["list.tasks",{"_index":602,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{}}}],["list.tasks.push(task",{"_index":722,"title":{},"body":{"injectables/TasksService.html":{}}}],["list.tasks.sort((a",{"_index":736,"title":{},"body":{"injectables/TasksService.html":{}}}],["list.title",{"_index":731,"title":{},"body":{"injectables/TasksService.html":{}}}],["listrepository",{"_index":699,"title":{},"body":{"injectables/TasksService.html":{}}}],["lists",{"_index":733,"title":{},"body":{"injectables/TasksService.html":{}}}],["lists.foreach((list",{"_index":735,"title":{},"body":{"injectables/TasksService.html":{}}}],["local",{"_index":552,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":207,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":240,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":580,"title":{},"body":{"classes/SignUpDto.html":{}}}],["logger",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["logger(authenticationguard.name",{"_index":366,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["logger(authorizationguard.name",{"_index":381,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["logger(authservice.name",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger(googleauthguard.name",{"_index":482,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["logger(googlestrategy.name",{"_index":501,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["logger(jwtauthguard.name",{"_index":522,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["logger(localauthguard.name",{"_index":543,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["logger(noauthenticationguard.name",{"_index":565,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["logger(optionaljwtauthguard.name",{"_index":571,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["logger(usersservice.name",{"_index":861,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger(vkontakteauthguard.name",{"_index":906,"title":{},"body":{"injectables/VkontakteAuthGuard.html":{}}}],["logger(vkontaktestrategy.name",{"_index":911,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["login",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@user",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(user",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":169,"title":{"classes/LogInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["logindto:14",{"_index":579,"title":{},"body":{"classes/SignUpDto.html":{}}}],["logindto:22",{"_index":578,"title":{},"body":{"classes/SignUpDto.html":{}}}],["loginwithaccount",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginwithaccount(connectaccountdto",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginwithgoogle",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgoogle(@user",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithgoogle(user",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithvkontakte",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithvkontakte(@user",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginwithvkontakte(user",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@user",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(user",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["manytoone",{"_index":32,"title":{},"body":{"classes/Account.html":{},"classes/Task.html":{}}}],["manytoone((_type",{"_index":601,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":26,"title":{},"body":{"classes/Account.html":{},"classes/Task.html":{}}}],["mark",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["matches(/^(?:[a",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["matching",{"_index":42,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":426,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["maxlength(255",{"_index":427,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["message",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":989,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["methodnames",{"_index":1008,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":63,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["minlength",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["minlength(8",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{}}}],["miscellaneous",{"_index":1001,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1049,"title":{},"body":{"index.html":{}}}],["mockedconfigservice",{"_index":960,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1039,"title":{},"body":{"index.html":{}}}],["moderator",{"_index":785,"title":{},"body":{"interfaces/UserInterface.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":104,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":106,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1062,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1068,"title":{},"body":{"index.html":{}}}],["name",{"_index":72,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":1029,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1072,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":84,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":85,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":754,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["nestjs/passport",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":970,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["newaccount",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["noauth",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["noauth(localauthguard",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["noauthenticationguard",{"_index":561,"title":{"guards/NoAuthenticationGuard.html":{}},"body":{"guards/NoAuthenticationGuard.html":{},"coverage.html":{}}}],["node.js",{"_index":1021,"title":{},"body":{"index.html":{}}}],["normalize",{"_index":949,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["normalize(collection",{"_index":1010,"title":{},"body":{"miscellaneous/functions.html":{}}}],["notfoundexception",{"_index":77,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`account",{"_index":903,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(`user",{"_index":874,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1033,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":769,"title":{},"body":{"classes/User.html":{}}}],["number",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":505,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":1016,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(await",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["older",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["omit",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["omit(obj",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["omit(user",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["ondelete",{"_index":609,"title":{},"body":{"classes/TaskList.html":{}}}],["onetomany",{"_index":613,"title":{},"body":{"classes/TaskList.html":{},"classes/User.html":{}}}],["onetomany((_type",{"_index":615,"title":{},"body":{"classes/TaskList.html":{}}}],["onetomany(undefined",{"_index":607,"title":{},"body":{"classes/TaskList.html":{},"classes/User.html":{}}}],["onupdate",{"_index":610,"title":{},"body":{"classes/TaskList.html":{}}}],["open",{"_index":1051,"title":{},"body":{"index.html":{}}}],["optional",{"_index":73,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{}}}],["optionalauth",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["optionalauth(googleauthguard",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["optionalauth(vkontakteauthguard",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["optionaljwtauthguard",{"_index":569,"title":{"injectables/OptionalJwtAuthGuard.html":{}},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["optionally",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orderby",{"_index":598,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{}}}],["out",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["outer",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1077,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":966,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":660,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":71,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["partial",{"_index":402,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["partialtype",{"_index":746,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createaccountdto",{"_index":748,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["partialtype(createtaskdto",{"_index":756,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["partialtype(createtasklistdto",{"_index":759,"title":{},"body":{"classes/UpdateTaskListDto.html":{}}}],["partialtype(createuserdto",{"_index":762,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":504,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{}}}],["passport/guards/google",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["passport/guards/local",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["passport/guards/vkontakte",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["passport/strategies/google.strategy",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/strategies/jwt.strategy",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/strategies/local.strategy",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/strategies/vkontakte.strategy",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":502,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["passportstrategy(strategy",{"_index":506,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["passreqtocallback",{"_index":516,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["password",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"interfaces/UserPasswordInterface.html":{}}}],["password.interface",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{}}}],["password.interface.ts",{"_index":788,"title":{},"body":{"interfaces/UserPasswordInterface.html":{},"coverage.html":{}}}],["passwordfield",{"_index":554,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["patch",{"_index":661,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('list/:id",{"_index":653,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('task/:id",{"_index":657,"title":{},"body":{"controllers/TasksController.html":{}}}],["payload",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":538,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":395,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["pick(obj",{"_index":1017,"title":{},"body":{"miscellaneous/functions.html":{}}}],["please",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalAuthGuard.html":{},"classes/SignUpDto.html":{},"index.html":{}}}],["post",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('list",{"_index":630,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('login",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@noauth(localauthguard)@apibody({type",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@auth",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@noauth",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('task",{"_index":633,"title":{},"body":{"controllers/TasksController.html":{}}}],["prefix",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["primarycolumn",{"_index":22,"title":{},"body":{"classes/Account.html":{}}}],["primarygeneratedcolumn",{"_index":587,"title":{},"body":{"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{}}}],["private",{"_index":90,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["production",{"_index":1041,"title":{},"body":{"index.html":{}}}],["profile",{"_index":499,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["profile.displayname",{"_index":517,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["progressive",{"_index":1020,"title":{},"body":{"index.html":{}}}],["project",{"_index":1052,"title":{},"body":{"index.html":{}}}],["promise",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{}}}],["properties",{"_index":10,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["property",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["propertynames",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["props",{"_index":1015,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provide",{"_index":101,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/LocalAuthGuard.html":{},"classes/SignUpDto.html":{}}}],["providers",{"_index":100,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":417,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/TaskList.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"miscellaneous/variables.html":{}}}],["public_key",{"_index":484,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":875,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.addselect('user.password",{"_index":880,"title":{},"body":{"injectables/UsersService.html":{}}}],["query.getone",{"_index":881,"title":{},"body":{"injectables/UsersService.html":{}}}],["read",{"_index":1061,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":91,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["record",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":375,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["refreshtoken",{"_index":498,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["relations",{"_index":721,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["removeaccount",{"_index":832,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeaccount(type",{"_index":853,"title":{},"body":{"injectables/UsersService.html":{}}}],["removelist",{"_index":625,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removelist(@param('id",{"_index":687,"title":{},"body":{"controllers/TasksController.html":{}}}],["removelist(id",{"_index":645,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removetask",{"_index":626,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removetask(@param('id",{"_index":678,"title":{},"body":{"controllers/TasksController.html":{}}}],["removetask(id",{"_index":648,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removeuser",{"_index":833,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeuser(id",{"_index":855,"title":{},"body":{"injectables/UsersService.html":{}}}],["removing",{"_index":899,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":698,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":95,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.baseurl",{"_index":103,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["req.isauthenticated",{"_index":369,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["req.isunauthenticated",{"_index":567,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["req.user",{"_index":388,"title":{},"body":{"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":86,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":97,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["res.render(indexhtml",{"_index":99,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["reset",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":87,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["results",{"_index":41,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":82,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":765,"title":{},"body":{"classes/User.html":{},"interfaces/UserInterface.html":{}}}],["roles",{"_index":382,"title":{},"body":{"guards/AuthorizationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('moderator",{"_index":809,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles.includes(user.role",{"_index":390,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["roles.length",{"_index":386,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["roles_key",{"_index":379,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routes",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1036,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["saltrounds",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":1025,"title":{},"body":{"index.html":{}}}],["scope",{"_index":513,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["secret",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":537,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":774,"title":{},"body":{"classes/User.html":{}}}],["server",{"_index":1026,"title":{},"body":{"index.html":{}}}],["service",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["service.mock.ts",{"_index":959,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(public_key",{"_index":1095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1027,"title":{},"body":{"index.html":{}}}],["sign",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(signupdto",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupdto",{"_index":182,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["single",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["skipping",{"_index":572,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{}}}],["social",{"_index":47,"title":{},"body":{"interfaces/AccountInterface.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"index.html":{}}}],["specific",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["split",{"_index":515,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["sponsors",{"_index":1055,"title":{},"body":{"index.html":{}}}],["sqlite3",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["src/.../account.interface.ts",{"_index":1084,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../allow",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../no",{"_index":1091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../optional",{"_index":1092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../testing.ts",{"_index":1004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.decorator.ts",{"_index":1094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.interface.ts",{"_index":1085,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../utilities.ts",{"_index":1005,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/angular",{"_index":58,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"coverage.html":{}}}],["src/app",{"_index":143,"title":{},"body":{"classes/AppValidationPipe.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:67",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:85",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:90",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/allow",{"_index":924,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/no",{"_index":931,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/optional",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/connect",{"_index":393,"title":{},"body":{"classes/ConnectAccountDto.html":{},"coverage.html":{}}}],["src/auth/dto/log",{"_index":556,"title":{},"body":{"classes/LogInDto.html":{},"coverage.html":{}}}],["src/auth/dto/sign",{"_index":573,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts",{"_index":359,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts:8",{"_index":363,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authorization.guard.ts",{"_index":373,"title":{},"body":{"guards/AuthorizationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authorization.guard.ts:13",{"_index":377,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/auth/guards/authorization.guard.ts:9",{"_index":376,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["src/auth/guards/no",{"_index":562,"title":{},"body":{"guards/NoAuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/google",{"_index":473,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/jwt",{"_index":521,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/local",{"_index":540,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/optional",{"_index":570,"title":{},"body":{"injectables/OptionalJwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/guards/vkontakte",{"_index":905,"title":{},"body":{"injectables/VkontakteAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/google.strategy.ts",{"_index":492,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/google.strategy.ts:12",{"_index":495,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/passport/strategies/google.strategy.ts:24",{"_index":500,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/passport/strategies/jwt.strategy.ts",{"_index":529,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/jwt.strategy.ts:18",{"_index":532,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/strategies/jwt.strategy.ts:9",{"_index":530,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/strategies/local.strategy.ts",{"_index":548,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/local.strategy.ts:16",{"_index":551,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/passport/strategies/local.strategy.ts:8",{"_index":549,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/passport/strategies/vkontakte.strategy.ts",{"_index":908,"title":{},"body":{"injectables/VkontakteStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/strategies/vkontakte.strategy.ts:12",{"_index":909,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["src/auth/passport/strategies/vkontakte.strategy.ts:24",{"_index":910,"title":{},"body":{"injectables/VkontakteStrategy.html":{}}}],["src/common/interfaces/account.interface.ts",{"_index":45,"title":{},"body":{"interfaces/AccountInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/interfaces/user",{"_index":787,"title":{},"body":{"interfaces/UserPasswordInterface.html":{},"coverage.html":{}}}],["src/common/interfaces/user.interface.ts",{"_index":782,"title":{},"body":{"interfaces/UserInterface.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/testing.ts",{"_index":946,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utilities.ts",{"_index":950,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/main.ts",{"_index":951,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tasks/dto/create",{"_index":415,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"coverage.html":{}}}],["src/tasks/dto/update",{"_index":749,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["src/tasks/entities/task",{"_index":603,"title":{},"body":{"classes/TaskList.html":{},"coverage.html":{}}}],["src/tasks/entities/task.entity.ts",{"_index":581,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/tasks/entities/task.entity.ts:11",{"_index":588,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:14",{"_index":595,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:17",{"_index":586,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:20",{"_index":590,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:23",{"_index":592,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:26",{"_index":585,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":618,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:17",{"_index":634,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:22",{"_index":638,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:27",{"_index":644,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:32",{"_index":658,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:37",{"_index":650,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:42",{"_index":631,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:47",{"_index":636,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:52",{"_index":641,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:57",{"_index":654,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:62",{"_index":647,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":691,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":696,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:12",{"_index":700,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:20",{"_index":703,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:32",{"_index":705,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:36",{"_index":707,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:40",{"_index":711,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:48",{"_index":709,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:52",{"_index":702,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:59",{"_index":704,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:67",{"_index":706,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:71",{"_index":710,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:75",{"_index":708,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/users/dto/create",{"_index":413,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":745,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/account.entity.ts",{"_index":6,"title":{},"body":{"classes/Account.html":{},"coverage.html":{}}}],["src/users/entities/account.entity.ts:10",{"_index":25,"title":{},"body":{"classes/Account.html":{}}}],["src/users/entities/account.entity.ts:13",{"_index":23,"title":{},"body":{"classes/Account.html":{}}}],["src/users/entities/account.entity.ts:16",{"_index":20,"title":{},"body":{"classes/Account.html":{}}}],["src/users/entities/account.entity.ts:19",{"_index":28,"title":{},"body":{"classes/Account.html":{}}}],["src/users/entities/user.entity.ts",{"_index":763,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:13",{"_index":770,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":779,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":775,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":777,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":773,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":766,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/user.entity.ts:9",{"_index":771,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":790,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:18",{"_index":796,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:25",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":820,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":858,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:120",{"_index":854,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:127",{"_index":846,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:13",{"_index":838,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:133",{"_index":845,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":843,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":850,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":852,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:58",{"_index":849,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:73",{"_index":860,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":856,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:99",{"_index":841,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1037,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1040,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1042,"title":{},"body":{"index.html":{}}}],["started",{"_index":1019,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1031,"title":{},"body":{"index.html":{}}}],["statements",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":479,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["stay",{"_index":1064,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":503,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["string",{"_index":21,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":147,"title":{},"body":{"classes/AppValidationPipe.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{}}}],["super(applicationref",{"_index":92,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["super.canactivate(context",{"_index":489,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["support",{"_index":1056,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1075,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":997,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":868,"title":{},"body":{"injectables/UsersService.html":{}}}],["task",{"_index":429,"title":{"classes/Task.html":{}},"body":{"classes/CreateTaskListDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["task.description",{"_index":717,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.dto",{"_index":665,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":416,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:11",{"_index":750,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:12",{"_index":423,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:14",{"_index":752,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:6",{"_index":425,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:8",{"_index":753,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:9",{"_index":421,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":614,"title":{},"body":{"classes/TaskList.html":{}}}],["task.isdone",{"_index":719,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.list",{"_index":616,"title":{},"body":{"classes/TaskList.html":{}}}],["task.title",{"_index":715,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasklist",{"_index":591,"title":{"classes/TaskList.html":{}},"body":{"classes/Task.html":{},"classes/TaskList.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["taskrepository",{"_index":701,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks",{"_index":605,"title":{},"body":{"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["tasks.controller",{"_index":694,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":668,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":617,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":111,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":667,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":1045,"title":{},"body":{"index.html":{}}}],["test/.../config",{"_index":1090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/.../swagger.transformer.ts",{"_index":1089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/config",{"_index":958,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test/swagger.transformer.ts",{"_index":961,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1048,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1047,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1044,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1054,"title":{},"body":{"index.html":{}}}],["this.accountsrepository.create",{"_index":888,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.accountsrepository.delete",{"_index":897,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.accountsrepository.findone",{"_index":902,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.accountsrepository.save(account).catch((error",{"_index":891,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.accountsrepository.update",{"_index":895,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.connectaccount(connectaccountdto",{"_index":518,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["this.authservice.finduserbyid(+id",{"_index":539,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.issuejwt(user",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":555,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.loginwithaccount(connectaccountdto",{"_index":519,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["this.authservice.logout(user",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(signupdto",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('password_salt_rounds",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.finduserbyid(id",{"_index":885,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.listrepository.delete(id",{"_index":743,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.find",{"_index":734,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.findone(id",{"_index":740,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.findoneorfail(createtaskdto.list",{"_index":720,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.save(list",{"_index":723,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.listrepository.update(id",{"_index":741,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.logger.debug(`create",{"_index":889,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.log('authenticating",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log('creating",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log(`new",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.verbose",{"_index":490,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["this.logger.verbose(isauthenticated",{"_index":370,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.logger.verbose(isauthorized",{"_index":391,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.logger.verbose(isunauthenticated",{"_index":568,"title":{},"body":{"guards/NoAuthenticationGuard.html":{}}}],["this.logger.verbose(isvalidjwt",{"_index":525,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{}}}],["this.logger.verbose(isvalidpassword",{"_index":547,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["this.reflector.getallandoverride(public_key",{"_index":488,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":383,"title":{},"body":{"guards/AuthorizationGuard.html":{}}}],["this.taskrepository.delete(id",{"_index":730,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.find",{"_index":724,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findone(id",{"_index":725,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.update(id",{"_index":726,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createlist(createtasklistdto",{"_index":681,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":672,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findalllists",{"_index":682,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findalltasks",{"_index":673,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findonelist(id",{"_index":684,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findonetask(id",{"_index":675,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.removelist(id",{"_index":688,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.removetask(id",{"_index":679,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatelist(id",{"_index":686,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatetask(id",{"_index":677,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.usersrepository",{"_index":876,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":864,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.find",{"_index":900,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone(id",{"_index":873,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.preload",{"_index":883,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.remove(user).catch",{"_index":886,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(user).catch",{"_index":865,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createaccount(user.id",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createuser",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createuser(info",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findaccount(type",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findallusers",{"_index":810,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyid(id",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyusername(username",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateaccount(account",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["title",{"_index":419,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["token",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["touch",{"_index":1065,"title":{},"body":{"index.html":{}}}],["transform",{"_index":148,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["transformer",{"_index":974,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["transformer.before",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformoptions",{"_index":154,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["true",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"classes/AppValidationPipe.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/TaskList.html":{},"classes/User.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["tscompilerinstance",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":1071,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"classes/AngularUniversalFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"guards/NoAuthenticationGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1082,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":34,"title":{},"body":{"classes/Account.html":{},"modules/AppModule.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":695,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":824,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":755,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{}}}],["typescript",{"_index":1030,"title":{},"body":{"index.html":{}}}],["ui",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["unauthorizedexception('the",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('wrong",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(info?.message",{"_index":491,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/VkontakteAuthGuard.html":{}}}],["undefined",{"_index":27,"title":{},"body":{"classes/Account.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/Task.html":{},"classes/TaskList.html":{},"classes/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":33,"title":{},"body":{"classes/Account.html":{},"classes/User.html":{}}}],["unique(['type",{"_index":38,"title":{},"body":{"classes/Account.html":{}}}],["unique/i.test(message",{"_index":866,"title":{},"body":{"injectables/UsersService.html":{}}}],["unit",{"_index":1043,"title":{},"body":{"index.html":{}}}],["universal.filter.ts",{"_index":59,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"coverage.html":{}}}],["universal.filter.ts:15",{"_index":70,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["universal.filter.ts:24",{"_index":80,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["unknown",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["up.dto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["up.dto.ts",{"_index":574,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["up.dto.ts:14",{"_index":576,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:22",{"_index":575,"title":{},"body":{"classes/SignUpDto.html":{}}}],["updateaccount",{"_index":834,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateaccount(type",{"_index":857,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateaccountdto",{"_index":744,"title":{"classes/UpdateAccountDto.html":{}},"body":{"classes/UpdateAccountDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateaccountdto).catch((error",{"_index":896,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatelist",{"_index":627,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatelist(@param('id",{"_index":685,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatelist(id",{"_index":651,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetask",{"_index":628,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetask(@param('id",{"_index":676,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatetask(id",{"_index":655,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskdto",{"_index":656,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updatetaskdto.description",{"_index":728,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskdto.isdone",{"_index":729,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskdto.title",{"_index":727,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetasklistdto",{"_index":652,"title":{"classes/UpdateTaskListDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskListDto.html":{},"coverage.html":{}}}],["updatetasklistdto.title",{"_index":742,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateuser",{"_index":835,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":859,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":760,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":884,"title":{},"body":{"injectables/UsersService.html":{}}}],["useclass",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":870,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards(jwtauthguard",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards(noauthenticationguard",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":14,"title":{"classes/User.html":{}},"body":{"classes/Account.html":{},"interfaces/AccountInterface.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"classes/LogInDto.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.accounts",{"_index":40,"title":{},"body":{"classes/Account.html":{}}}],["user.accounts.some((account",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":761,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":36,"title":{},"body":{"classes/Account.html":{}}}],["user.id",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.interface",{"_index":51,"title":{},"body":{"interfaces/AccountInterface.html":{},"interfaces/UserPasswordInterface.html":{}}}],["user.name",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.[data",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user?.id",{"_index":813,"title":{},"body":{"controllers/UsersController.html":{}}}],["user?.username",{"_index":816,"title":{},"body":{"controllers/UsersController.html":{}}}],["userinterface",{"_index":48,"title":{"interfaces/UserInterface.html":{}},"body":{"interfaces/AccountInterface.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthorizationGuard.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPasswordInterface.html":{},"controllers/UsersController.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username/i.test(message",{"_index":867,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":553,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpasswordinterface",{"_index":462,"title":{"interfaces/UserPasswordInterface.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"interfaces/UserPasswordInterface.html":{},"coverage.html":{}}}],["userrole",{"_index":378,"title":{},"body":{"guards/AuthorizationGuard.html":{},"classes/User.html":{},"interfaces/UserInterface.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":784,"title":{},"body":{"interfaces/UserInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":791,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":823,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":806,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":789,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":112,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":839,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":272,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":102,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["utilities",{"_index":50,"title":{},"body":{"interfaces/AccountInterface.html":{},"interfaces/UserInterface.html":{}}}],["valid",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"classes/SignUpDto.html":{}}}],["validate",{"_index":493,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["validate(payload",{"_index":531,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req",{"_index":496,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/VkontakteStrategy.html":{}}}],["validate(username",{"_index":550,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatecustomdecorators",{"_index":149,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["validation.pipe",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["validation.pipe.ts",{"_index":144,"title":{},"body":{"classes/AppValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:3",{"_index":146,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["validationpipe",{"_index":145,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["validator",{"_index":409,"title":{},"body":{"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTaskDto.html":{},"classes/CreateTaskListDto.html":{},"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateTaskListDto.html":{},"dependencies.html":{}}}],["value",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"injectables/UsersService.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values[key",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1086,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["versions",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vkontakte",{"_index":56,"title":{},"body":{"interfaces/AccountInterface.html":{},"classes/ConnectAccountDto.html":{},"classes/CreateAccountDto.html":{},"injectables/VkontakteAuthGuard.html":{},"injectables/VkontakteStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["vkontakteauthguard",{"_index":209,"title":{"injectables/VkontakteAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/VkontakteAuthGuard.html":{},"coverage.html":{}}}],["vkontaktestrategy",{"_index":241,"title":{"injectables/VkontakteStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/VkontakteStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["void",{"_index":83,"title":{},"body":{"classes/AngularUniversalFilter.html":{}}}],["watch",{"_index":1038,"title":{},"body":{"index.html":{}}}],["website",{"_index":1069,"title":{},"body":{"index.html":{}}}],["went",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["where('user.email",{"_index":882,"title":{},"body":{"injectables/UsersService.html":{}}}],["where('user.username",{"_index":879,"title":{},"body":{"injectables/UsersService.html":{}}}],["whitelist",{"_index":150,"title":{},"body":{"classes/AppValidationPipe.html":{}}}],["withpassword",{"_index":848,"title":{},"body":{"injectables/UsersService.html":{}}}],["wrong",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["yes",{"_index":75,"title":{},"body":{"classes/AngularUniversalFilter.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/OptionalJwtAuthGuard.html":{},"controllers/UsersController.html":{},"injectables/VkontakteAuthGuard.html":{},"miscellaneous/functions.html":{}}}],["you'd",{"_index":1059,"title":{},"body":{"index.html":{}}}],["z0",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LogInDto.html":{},"classes/SignUpDto.html":{}}}],["zoom",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Account.html":{"url":"classes/Account.html","title":"class - Account","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/account.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AccountInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                id\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('simple-json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/account.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/account.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/account.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/account.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn, Unique } from 'typeorm';\nimport { AccountInterface, AccountType } from '../../common/interfaces/account.interface';\nimport { User } from './user.entity';\n\n@Entity('accounts')\n@Unique(['type', 'id'])\n@Unique(['type', 'user'])\nexport class Account implements AccountInterface {\n  @PrimaryColumn()\n  type: AccountType;\n\n  @PrimaryColumn()\n  id: string;\n\n  @Column('simple-json')\n  data: any;\n\n  @ManyToOne(() => User, (user) => user.accounts)\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountInterface.html":{"url":"interfaces/AccountInterface.html","title":"interface - AccountInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/account.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface of a social account\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         AccountType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayElement } from '../utilities';\nimport { UserInterface } from './user.interface';\n\nexport const accountTypes = ['facebook', 'google', 'vkontakte'] as const;\n\nexport type AccountType = ArrayElement;\n\n/**\n * An interface of a social account\n */\nexport interface AccountInterface {\n  type: AccountType;\n  id: string;\n  data: any;\n  user: UserInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AngularUniversalFilter.html":{"url":"classes/AngularUniversalFilter.html","title":"class - AngularUniversalFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AngularUniversalFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/angular-universal.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(indexHtml: string, APP_BASE_HREF: any, applicationRef?: HttpServer)\n                    \n                \n                        \n                            \n                                Defined in src/angular-universal.filter.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        indexHtml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        APP_BASE_HREF\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        applicationRef\n                                                  \n                                                        \n                                                                    HttpServer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: NotFoundException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/angular-universal.filter.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            NotFoundException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpServer,\n  NotFoundException,\n} from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { Request, Response } from 'express';\n\n@Catch(NotFoundException)\nexport class AngularUniversalFilter\n  extends BaseExceptionFilter\n  implements ExceptionFilter\n{\n  constructor(\n    private readonly indexHtml: string,\n    private readonly APP_BASE_HREF: any,\n    applicationRef?: HttpServer,\n  ) {\n    super(applicationRef);\n  }\n\n  catch(exception: NotFoundException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const req = ctx.getRequest();\n    const res = ctx.getResponse();\n\n    const { indexHtml, APP_BASE_HREF } = this;\n    res.render(indexHtml, {\n      req,\n      providers: [{ provide: APP_BASE_HREF, useValue: req.baseUrl }],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_PIPE } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { getConnectionOptions } from 'typeorm';\nimport { AppValidationPipe } from './app-validation.pipe';\nimport { AuthModule } from './auth/auth.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: ['.env', '.env.example'],\n      isGlobal: true,\n      expandVariables: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      useFactory: async () =>\n        Object.assign(await getConnectionOptions(), {\n        autoLoadEntities: true,\n      }),\n    }),\n    AuthModule,\n    UsersModule,\n    TasksModule,\n  ],\n  providers: [{ provide: APP_PIPE, useClass: AppValidationPipe }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppValidationPipe.html":{"url":"classes/AppValidationPipe.html","title":"class - AppValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app-validation.pipe.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ValidationPipe\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app-validation.pipe.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ValidationPipe } from '@nestjs/common';\n\nexport class AppValidationPipe extends ValidationPipe {\n  constructor() {\n    super({\n      transform: true,\n      validateCustomDecorators: true,\n      whitelist: true,\n      forbidNonWhitelisted: false,\n      forbidUnknownValues: true,\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logInWithGoogle\n                            \n                            \n                                    Async\n                                logInWithVkontakte\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@NoAuth(LocalAuthGuard)@ApiBody({type: LogInDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logInWithGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    logInWithGoogle(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@OptionalAuth(GoogleAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logInWithVkontakte\n                        \n                    \n                \n            \n            \n                \n                    \n                    logInWithVkontakte(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vkontakte')@OptionalAuth(VkontakteAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@Auth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@NoAuth()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { UserInterface } from '../common/interfaces/user.interface';\nimport { AuthService } from './auth.service';\nimport { Auth } from './decorators/auth.decorator';\nimport { NoAuth } from './decorators/no-auth.decorator';\nimport { OptionalAuth } from './decorators/optional-auth.decorator';\nimport { User } from './decorators/user.decorator';\nimport { LogInDto } from './dto/log-in.dto';\nimport { SignUpDto } from './dto/sign-up.dto';\nimport { GoogleAuthGuard } from './passport/guards/google-auth.guard';\nimport { LocalAuthGuard } from './passport/guards/local-auth.guard';\nimport { VkontakteAuthGuard } from './passport/guards/vkontakte-auth.guard';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('login')\n  @NoAuth(LocalAuthGuard)\n  @ApiBody({ type: LogInDto })\n  async logIn(@User() user: UserInterface) {\n    const token = await this.authService.issueJwt(user);\n    return { access_token: token };\n  }\n\n  @Post('signup')\n  @NoAuth()\n  async signUp(@Body() signUpDto: SignUpDto) {\n    const user = await this.authService.signUp(signUpDto);\n    const token = await this.authService.issueJwt(user);\n    return { access_token: token };\n  }\n\n  @Post('logout')\n  @Auth()\n  async logOut(@User() user: UserInterface) {\n    return this.authService.logOut(user);\n  }\n\n  @Get('google')\n  @OptionalAuth(GoogleAuthGuard)\n  async logInWithGoogle(@User() user: UserInterface) {\n    const token = await this.authService.issueJwt(user);\n    return { access_token: token };\n  }\n\n  @Get('vkontakte')\n  @OptionalAuth(VkontakteAuthGuard)\n  async logInWithVkontakte(@User() user: UserInterface) {\n    const token = await this.authService.issueJwt(user);\n    return { access_token: token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nVkontakteStrategy\n\nVkontakteStrategy\n\nAuthModule -->\n\nVkontakteStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            VkontakteStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from '../users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { GoogleStrategy } from './passport/strategies/google.strategy';\nimport { JwtStrategy } from './passport/strategies/jwt.strategy';\nimport { LocalStrategy } from './passport/strategies/local.strategy';\nimport { VkontakteStrategy } from './passport/strategies/vkontakte.strategy';\n\n@Module({\n  imports: [\n    ConfigModule,\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: configService.get('JWT_TIMEOUT', '30m') },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy, GoogleStrategy, VkontakteStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connectAccount\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                issueJwt\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logInWithAccount\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, jwtService: JwtService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        connectAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    connectAccount(connectAccountDto: ConnectAccountDto, user: UserInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connectAccountDto\n                                    \n                                                ConnectAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        issueJwt\n                        \n                    \n                \n            \n            \n                \n                    \n                    issueJwt(user: UserInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(logInDto: LogInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logInDto\n                                    \n                                                LogInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logInWithAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    logInWithAccount(connectAccountDto: ConnectAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    connectAccountDto\n                                    \n                                                ConnectAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(user: UserInterface)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AuthService.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { UserInterface } from '../common/interfaces/user.interface';\nimport { omit } from '../common/utilities';\nimport { UsersService } from '../users/users.service';\nimport { ConnectAccountDto } from './dto/connect-account.dto';\nimport { LogInDto } from './dto/log-in.dto';\nimport { SignUpDto } from './dto/sign-up.dto';\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async logIn(logInDto: LogInDto): Promise {\n    const { username, password } = logInDto;\n    const user = await this.usersService.findUserByUsername(username, true);\n    if (!user) {\n      throw new UnauthorizedException('The user does not exist');\n    }\n    const match = await bcrypt.compare(password, user.password);\n    if (!match) {\n      throw new UnauthorizedException('Wrong username or password');\n    }\n    return omit(user, 'password') as UserInterface;\n  }\n\n  async signUp(signUpDto: SignUpDto): Promise {\n    const { username, password, name, email } = signUpDto;\n    const saltRounds = +this.configService.get('PASSWORD_SALT_ROUNDS', 10);\n    const hash = await bcrypt.hash(password, saltRounds);\n    const user = await this.usersService.createUser({ username, password: hash, name, email });\n    if (!user) {\n      throw new BadRequestException('Failed to sign up');\n    }\n    return omit(user, 'password') as UserInterface;\n  }\n\n  async logInWithAccount(connectAccountDto: ConnectAccountDto): Promise {\n    const { type, id, info } = connectAccountDto;\n    const account = await this.usersService.findAccount(type, id);\n    if (!account) {\n      this.logger.log('Creating new user');\n      const user = await this.usersService.createUser(info);\n      if (user) {\n        this.logger.log(`New user #${user.id}: ${user.name} (${user.username})`);\n        const account = await this.usersService.createAccount(user.id, connectAccountDto);\n        if (account) return omit(user, 'password') as UserInterface;\n      }\n    } else {\n      this.logger.log('Authenticating with account');\n      const user = account.user;\n      // account.data = connectUserDto.data;\n      // await this.usersService.updateAccount(account);\n      return omit(user, 'password') as UserInterface;\n    }\n    throw new Error('Something went wrong');\n  }\n\n  async connectAccount(\n    connectAccountDto: ConnectAccountDto,\n    user: UserInterface,\n  ): Promise {\n    const { type, id } = connectAccountDto;\n    const account = await this.usersService.findAccount(type, id);\n    if (account && account.user.id != user.id) {\n      throw new BadRequestException('This account is already connected to another user');\n    } else if (account) {\n      throw new BadRequestException('This account is already connected');\n    } else if (user.accounts.some((account) => account.type === type)) {\n      throw new BadRequestException('Another account of this service is already connected');\n    }\n    const newAccount = await this.usersService.createAccount(user.id, connectAccountDto);\n    if (newAccount) return user;\n    throw new Error('Something went wrong');\n  }\n\n  async issueJwt(user: UserInterface): Promise {\n    const payload = { name: user.name, username: user.username, sub: user.id };\n    return this.jwtService.sign(payload);\n  }\n\n  async findUserById(id: number) {\n    const user = await this.usersService.findUserById(id);\n    if (!user) {\n      throw new BadRequestException('User not found');\n    }\n    return user;\n  }\n\n  async logOut(user: UserInterface) {\n    throw new Error('Method not implemented');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/authentication.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private readonly logger = new Logger(AuthenticationGuard.name);\n\n  canActivate(context: ExecutionContext): boolean {\n    const req = context.switchToHttp().getRequest();\n    const isAuthenticated = req.isAuthenticated();\n    this.logger.verbose(isAuthenticated ? '✔ Authenticated' : '✖ Not authenticated');\n    return isAuthenticated;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthorizationGuard.html":{"url":"guards/AuthorizationGuard.html","title":"guard - AuthorizationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthorizationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authorization.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authorization.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/authorization.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Request } from 'express';\nimport { UserInterface, UserRole } from '../../common/interfaces/user.interface';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class AuthorizationGuard implements CanActivate {\n  private readonly logger = new Logger(AuthorizationGuard.name);\n\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!roles || roles.length === 0) {\n      return true;\n    }\n    const req = context.switchToHttp().getRequest();\n    const user = req.user as UserInterface;\n    const isAuthorized = user && roles.includes(user.role);\n    this.logger.verbose(isAuthorized ? '✔ Authorized' : '✖ Not authorized');\n    return isAuthorized;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConnectAccountDto.html":{"url":"classes/ConnectAccountDto.html","title":"class - ConnectAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConnectAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/connect-account.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                info\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/connect-account.dto.ts:28\n                        \n                    \n\n            \n                \n                    Any additional data for the account\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/connect-account.dto.ts:22\n                        \n                    \n\n            \n                \n                    An id of the account to connect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/connect-account.dto.ts:34\n                        \n                    \n\n            \n                \n                    Basic user info to assign to the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(accountTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/connect-account.dto.ts:15\n                        \n                    \n\n            \n                \n                    A type of the account to connect\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional } from 'class-validator';\nimport {\n  AccountInterface,\n  AccountType,\n  accountTypes,\n} from '../../common/interfaces/account.interface';\nimport { UserInterface } from '../../common/interfaces/user.interface';\n\nexport class ConnectAccountDto implements Pick {\n  /**\n   * A type of the account to connect\n   * @example vkontakte\n   */\n  @IsIn(accountTypes)\n  readonly type: AccountType;\n\n  /**\n   * An id of the account to connect\n   * @example 49899993\n   */\n  @IsNotEmpty()\n  readonly id: string;\n\n  /**\n   * Any additional data for the account\n   */\n  @IsOptional()\n  readonly data: any;\n\n  /**\n   * Basic user info to assign to the user\n   */\n  @IsOptional()\n  readonly info: Partial;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDto.html":{"url":"classes/CreateAccountDto.html","title":"class - CreateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-account.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                info\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-account.dto.ts:28\n                        \n                    \n\n            \n                \n                    Any additional data for the account\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-account.dto.ts:22\n                        \n                    \n\n            \n                \n                    An id of the account to connect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-account.dto.ts:34\n                        \n                    \n\n            \n                \n                    Basic user info to assign to the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(accountTypes)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-account.dto.ts:15\n                        \n                    \n\n            \n                \n                    A type of the account to connect\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional } from 'class-validator';\nimport {\n  AccountInterface,\n  AccountType,\n  accountTypes,\n} from '../../common/interfaces/account.interface';\nimport { UserInterface } from '../../common/interfaces/user.interface';\n\nexport class CreateAccountDto implements Pick {\n  /**\n   * A type of the account to connect\n   * @example vkontakte\n   */\n  @IsIn(accountTypes)\n  readonly type: AccountType;\n\n  /**\n   * An id of the account to connect\n   * @example 49899993\n   */\n  @IsNotEmpty()\n  readonly id: string;\n\n  /**\n   * Any additional data for the account\n   */\n  @IsOptional()\n  readonly data: any;\n\n  /**\n   * Basic user info to assign to the user\n   */\n  @IsOptional()\n  readonly info: Partial;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Public\n                                    Readonly\n                                list\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, MaxLength } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsString()\n  @MaxLength(255)\n  public readonly title: string;\n\n  @IsString()\n  public readonly description: string;\n\n  @IsInt()\n  public readonly list: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskListDto.html":{"url":"classes/CreateTaskListDto.html","title":"class - CreateTaskListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task-list.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MaxLength } from 'class-validator';\n\nexport class CreateTaskListDto {\n  @IsString()\n  @MaxLength(255)\n  public readonly title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Partial\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                password\n                            \n                            \n                                    Readonly\n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty({message: 'Please enter an email address'})@IsEmail(undefined, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:41\n                        \n                    \n\n            \n                \n                    An email address of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty({message: 'Please enter a name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:32\n                        \n                    \n\n            \n                \n                    A name of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty({message: 'Password should not be empty'})@MinLength(8, {message: 'Password should contain at least 8 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    A password of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty({message: 'Username should not be empty'})@Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {message: 'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:15\n                        \n                    \n\n            \n                \n                    An username of the user\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, Matches, MinLength } from 'class-validator';\nimport { UserPasswordInterface } from '../../common/interfaces/user-password.interface';\n\nexport class CreateUserDto implements Partial {\n  /**\n   * An username of the user\n   * @example john\n   */\n  @IsOptional()\n  @IsNotEmpty({ message: 'Username should not be empty' })\n  @Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {\n    message:\n      'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen',\n  })\n  readonly username?: string;\n\n  /**\n   * A password of the user\n   * @example 12345678\n   */\n  @IsOptional()\n  @IsNotEmpty({ message: 'Password should not be empty' })\n  @MinLength(8, { message: 'Password should contain at least 8 characters' })\n  readonly password?: string;\n\n  /**\n   * A name of the user\n   * @example John Doe\n   */\n  @IsOptional()\n  @IsNotEmpty({ message: 'Please enter a name' })\n  readonly name?: string;\n\n  /**\n   * An email address of the user\n   * @example john@example.com\n   */\n  @IsOptional()\n  @IsNotEmpty({ message: 'Please enter an email address' })\n  @IsEmail(undefined, { message: 'Please provide a valid email address' })\n  readonly email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthGuard.html":{"url":"injectables/GoogleAuthGuard.html","title":"injectable - GoogleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/google-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/google-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/google-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/google-auth.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GoogleAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/google-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard('google') {\n  private readonly logger = new Logger(GoogleAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isAuthenticated = !err && user;\n    this.logger.verbose(\n      isAuthenticated ? '✔ Authenticated with Google' : '✖ Not authenticated with Google',\n    );\n    if (!isAuthenticated) {\n      throw err || new UnauthorizedException(info?.message);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/strategies/google.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, accessToken: string, refreshToken: string, profile: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/strategies/google.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GoogleStrategy.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/strategies/google.strategy.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { Strategy } from 'passport-google-oauth20';\nimport { UserInterface } from '../../../common/interfaces/user.interface';\nimport { AuthService } from '../../auth.service';\nimport { ConnectAccountDto } from '../../dto/connect-account.dto';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  private readonly logger = new Logger(GoogleStrategy.name);\n\n  constructor(private readonly authService: AuthService, readonly configService: ConfigService) {\n    super({\n      clientID: configService.get('GOOGLE_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_CALLBACK_URL'),\n      scope: configService.get('GOOGLE_SCOPE', '').split(','),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(\n    req: Request,\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n  ): Promise {\n    const { id, ...data } = profile;\n    const info: Partial = {\n      name: profile.displayName,\n    };\n    const connectAccountDto: ConnectAccountDto = {\n      type: 'google',\n      id,\n      info,\n      data: {\n        ...data,\n        accessToken,\n        refreshToken,\n      },\n    };\n    if (req.isAuthenticated()) {\n      const user = req.user as UserInterface;\n      return this.authService.connectAccount(connectAccountDto, user);\n    } else {\n      return this.authService.logInWithAccount(connectAccountDto);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/jwt-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/jwt-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/jwt-auth.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(JwtAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/jwt-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  private readonly logger = new Logger(JwtAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isValidJwt = !err && user;\n    this.logger.verbose(isValidJwt ? '✔ Valid JWT' : '✖ Invalid JWT');\n    if (!isValidJwt) {\n      throw err || new BadRequestException(info?.message);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/strategies/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UserInterface } from '../../../common/interfaces/user.interface';\nimport { AuthService } from '../../auth.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService, private authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any): Promise {\n    const id = payload.sub;\n    return this.authService.findUserById(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/local-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/local-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/local-auth.guard.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/local-auth.guard.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LocalAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/local-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {\n  private readonly logger = new Logger(LocalAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super({\n      badRequestMessage: 'Please provide username and password',\n    });\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isValidPassword = !err && user;\n    this.logger.verbose(isValidPassword ? '✔ Valid password' : '✖ Invalid password');\n    if (!isValidPassword) {\n      throw err || new BadRequestException(info?.message);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/strategies/local.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { UserInterface } from '../../../common/interfaces/user.interface';\nimport { AuthService } from '../../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'username',\n      passwordField: 'password',\n    });\n  }\n\n  async validate(username: string, password: string): Promise {\n    return this.authService.logIn({ username, password });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDto.html":{"url":"classes/LogInDto.html","title":"class - LogInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/log-in.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password should not be empty'})@MinLength(8, {message: 'Password should contain at least 8 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/log-in.dto.ts:22\n                        \n                    \n\n            \n                \n                    A password of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Username should not be empty'})@Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {message: 'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/log-in.dto.ts:14\n                        \n                    \n\n            \n                \n                    An username of the user\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, Matches, MinLength } from 'class-validator';\nimport { UserPasswordInterface } from '../../common/interfaces/user-password.interface';\n\nexport class LogInDto implements Pick {\n  /**\n   * An username of the user\n   * @example john\n   */\n  @IsNotEmpty({ message: 'Username should not be empty' })\n  @Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {\n    message:\n      'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen',\n  })\n  readonly username: string;\n\n  /**\n   * A password of the user\n   * @example 12345678\n   */\n  @IsNotEmpty({ message: 'Password should not be empty' })\n  @MinLength(8, { message: 'Password should contain at least 8 characters' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/NoAuthenticationGuard.html":{"url":"guards/NoAuthenticationGuard.html","title":"guard - NoAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    NoAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/no-authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/no-authentication.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Injectable()\nexport class NoAuthenticationGuard implements CanActivate {\n  private readonly logger = new Logger(NoAuthenticationGuard.name);\n\n  canActivate(context: ExecutionContext): boolean {\n    const req = context.switchToHttp().getRequest();\n    const isUnauthenticated = req.isUnauthenticated();\n    this.logger.verbose(isUnauthenticated ? '✔ Not authenticated' : '✖ Authenticated');\n    return isUnauthenticated;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OptionalJwtAuthGuard.html":{"url":"injectables/OptionalJwtAuthGuard.html","title":"injectable - OptionalJwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OptionalJwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/optional-jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/optional-jwt-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/optional-jwt-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/optional-jwt-auth.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(OptionalJwtAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/optional-jwt-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class OptionalJwtAuthGuard extends AuthGuard('jwt') {\n  private readonly logger = new Logger(OptionalJwtAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isValidJwt = !err && user;\n    this.logger.verbose(isValidJwt ? '✔ Valid JWT' : '✔ Skipping JWT');\n    return isValidJwt ? user : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/sign-up.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        LogInDto\n            \n\n            \n                Implements\n            \n            \n                        Pick\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Please enter an email address'})@IsEmail(undefined, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-up.dto.ts:22\n                        \n                    \n\n            \n                \n                    An email address of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Please enter a name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/sign-up.dto.ts:14\n                        \n                    \n\n            \n                \n                    A name of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password should not be empty'})@MinLength(8, {message: 'Password should contain at least 8 characters'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogInDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogInDto:22\n\n                        \n                    \n\n            \n                \n                    A password of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Username should not be empty'})@Matches(/^(?:[a-z0-9]+[-])*[a-z0-9]+$/i, {message: 'Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         LogInDto\n\n                            \n                        \n                    \n                        \n                                Defined in         LogInDto:14\n\n                        \n                    \n\n            \n                \n                    An username of the user\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty } from 'class-validator';\nimport { UserPasswordInterface } from '../../common/interfaces/user-password.interface';\nimport { LogInDto } from './log-in.dto';\n\nexport class SignUpDto\n  extends LogInDto\n  implements Pick\n{\n  /**\n   * A name of the user\n   * @example John Doe\n   */\n  @IsNotEmpty({ message: 'Please enter a name' })\n  readonly name: string;\n\n  /**\n   * An email address of the user\n   * @example john@example.com\n   */\n  @IsNotEmpty({ message: 'Please enter an email address' })\n  @IsEmail(undefined, { message: 'Please provide a valid email address' })\n  readonly email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/entities/task.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdDate\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isDone\n                            \n                            \n                                list\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TaskList\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { TaskList } from './task-list.entity';\n\n@Entity('task', {\n  orderBy: {\n    id: 'ASC',\n  },\n})\nexport class Task {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ length: 255 })\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column('boolean')\n  isDone: boolean;\n\n  @ManyToOne((_type) => TaskList, (list) => list.tasks)\n  list: TaskList;\n\n  @CreateDateColumn()\n  createdDate: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskList.html":{"url":"classes/TaskList.html","title":"class - TaskList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/entities/task-list.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                tasks\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task-list.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tasks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {cascade: true, onDelete: 'CASCADE', onUpdate: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task-list.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task-list.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Task } from './task.entity';\n\n@Entity('task-list', {\n  orderBy: {\n    id: 'ASC',\n  },\n})\nexport class TaskList {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ length: 255 })\n  public title: string;\n\n  @OneToMany((_type) => Task, (task) => task.list, {\n    cascade: true,\n    onDelete: 'CASCADE',\n    onUpdate: 'CASCADE',\n  })\n  public tasks: Task[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createList\n                            \n                            \n                                createTask\n                            \n                            \n                                findAllLists\n                            \n                            \n                                findAllTasks\n                            \n                            \n                                findOneList\n                            \n                            \n                                findOneTask\n                            \n                            \n                                removeList\n                            \n                            \n                                removeTask\n                            \n                            \n                                updateList\n                            \n                            \n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createList\n                        \n                    \n                \n            \n            \n                \ncreateList(createTaskListDto: CreateTaskListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('list')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskListDto\n                                    \n                                                CreateTaskListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createTask\n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('task')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllLists\n                        \n                    \n                \n            \n            \n                \nfindAllLists()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllTasks\n                        \n                    \n                \n            \n            \n                \nfindAllTasks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('task')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneList\n                        \n                    \n                \n            \n            \n                \nfindOneList(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('list/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneTask\n                        \n                    \n                \n            \n            \n                \nfindOneTask(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('task/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeList\n                        \n                    \n                \n            \n            \n                \nremoveList(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('list/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeTask\n                        \n                    \n                \n            \n            \n                \nremoveTask(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('task/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateList\n                        \n                    \n                \n            \n            \n                \nupdateList(id: number, updateTaskListDto: UpdateTaskListDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('list/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskListDto\n                                    \n                                                UpdateTaskListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTask\n                        \n                    \n                \n            \n            \n                \nupdateTask(id: number, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('task/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDto\n                                    \n                                                UpdateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Auth } from '../auth/decorators/auth.decorator';\nimport { CreateTaskListDto } from './dto/create-task-list.dto';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskListDto } from './dto/update-task-list.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TasksService } from './tasks.service';\n\n@Controller('tasks')\n@ApiTags('tasks')\n@Auth()\nexport class TasksController {\n  constructor(private readonly tasksService: TasksService) {}\n\n  @Post('task')\n  createTask(@Body() createTaskDto: CreateTaskDto) {\n    return this.tasksService.createTask(createTaskDto);\n  }\n\n  @Get('task')\n  findAllTasks() {\n    return this.tasksService.findAllTasks();\n  }\n\n  @Get('task/:id')\n  findOneTask(@Param('id') id: number) {\n    return this.tasksService.findOneTask(id);\n  }\n\n  @Patch('task/:id')\n  updateTask(@Param('id') id: number, @Body() updateTaskDto: UpdateTaskDto) {\n    return this.tasksService.updateTask(id, updateTaskDto);\n  }\n\n  @Delete('task/:id')\n  removeTask(@Param('id') id: number) {\n    return this.tasksService.removeTask(id);\n  }\n\n  @Post('list')\n  createList(@Body() createTaskListDto: CreateTaskListDto) {\n    return this.tasksService.createList(createTaskListDto);\n  }\n\n  @Get('list')\n  findAllLists() {\n    return this.tasksService.findAllLists();\n  }\n\n  @Get('list/:id')\n  findOneList(@Param('id') id: number) {\n    return this.tasksService.findOneList(id);\n  }\n\n  @Patch('list/:id')\n  updateList(@Param('id') id: number, @Body() updateTaskListDto: UpdateTaskListDto) {\n    return this.tasksService.updateList(id, updateTaskListDto);\n  }\n\n  @Delete('list/:id')\n  removeList(@Param('id') id: number) {\n    return this.tasksService.removeList(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskList } from './entities/task-list.entity';\nimport { Task } from './entities/task.entity';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Task, TaskList])],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createList\n                            \n                            \n                                    Public\n                                    Async\n                                createTask\n                            \n                            \n                                    Public\n                                    Async\n                                findAllLists\n                            \n                            \n                                    Public\n                                    Async\n                                findAllTasks\n                            \n                            \n                                    Public\n                                    Async\n                                findOneList\n                            \n                            \n                                    Public\n                                    Async\n                                findOneTask\n                            \n                            \n                                    Public\n                                    Async\n                                removeList\n                            \n                            \n                                    Public\n                                    Async\n                                removeTask\n                            \n                            \n                                    Public\n                                    Async\n                                updateList\n                            \n                            \n                                    Public\n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: Repository, listRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        listRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                    \n                    createList(createTaskListDto: CreateTaskListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskListDto\n                                    \n                                                CreateTaskListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllLists\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllLists()\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAllTasks\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTasks()\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOneList\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneList(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOneTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneTask(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        removeList\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeList(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        removeTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTask(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateList\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateList(id: number, updateTaskListDto: UpdateTaskListDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskListDto\n                                    \n                                                UpdateTaskListDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(id: number, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTaskDto\n                                    \n                                                UpdateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateTaskListDto } from './dto/create-task-list.dto';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskListDto } from './dto/update-task-list.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TaskList } from './entities/task-list.entity';\nimport { Task } from './entities/task.entity';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(Task)\n    private readonly taskRepository: Repository,\n    @InjectRepository(TaskList)\n    private readonly listRepository: Repository,\n  ) {}\n\n  public async createTask(createTaskDto: CreateTaskDto) {\n    const task = new Task();\n    task.title = createTaskDto.title;\n    task.description = createTaskDto.description;\n    task.isDone = false;\n    const list = await this.listRepository.findOneOrFail(createTaskDto.list, {\n      relations: ['tasks'],\n    });\n    list.tasks.push(task);\n    return this.listRepository.save(list);\n  }\n\n  public async findAllTasks() {\n    return this.taskRepository.find();\n  }\n\n  public async findOneTask(id: number) {\n    return this.taskRepository.findOne(id);\n  }\n\n  public async updateTask(id: number, updateTaskDto: UpdateTaskDto) {\n    return this.taskRepository.update(id, {\n      title: updateTaskDto.title,\n      description: updateTaskDto.description,\n      isDone: updateTaskDto.isDone,\n    });\n  }\n\n  public async removeTask(id: number) {\n    return this.taskRepository.delete(id);\n  }\n\n  public async createList(createTaskListDto: CreateTaskListDto) {\n    const list = new TaskList();\n    list.title = createTaskListDto.title;\n    list.tasks = [];\n    return this.listRepository.save(list);\n  }\n\n  public async findAllLists() {\n    const lists = await this.listRepository.find({ relations: ['tasks'] });\n    lists.forEach((list) => {\n      list.tasks.sort((a, b) => a.id - b.id);\n    });\n    return lists;\n  }\n\n  public async findOneList(id: number) {\n    return this.listRepository.findOne(id, { relations: ['tasks'] });\n  }\n\n  public async updateList(id: number, updateTaskListDto: UpdateTaskListDto) {\n    return this.listRepository.update(id, { title: updateTaskListDto.title });\n  }\n\n  public async removeList(id: number) {\n    return this.listRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAccountDto.html":{"url":"classes/UpdateAccountDto.html","title":"class - UpdateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-account.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateAccountDto } from './create-account.dto';\n\nexport class UpdateAccountDto extends PartialType(CreateAccountDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Public\n                                    Readonly\n                                isDone\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isDone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsBoolean, IsString, MaxLength } from 'class-validator';\nimport { CreateTaskDto } from './create-task.dto';\n\nexport class UpdateTaskDto extends PartialType(CreateTaskDto) {\n  @IsString()\n  @MaxLength(255)\n  public readonly title: string;\n\n  @IsString()\n  public readonly description: string;\n\n  @IsBoolean()\n  public readonly isDone: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskListDto.html":{"url":"classes/UpdateTaskListDto.html","title":"class - UpdateTaskListDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskListDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-task-list.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task-list.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/update-task-list.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, MaxLength } from 'class-validator';\nimport { PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskListDto } from './create-task-list.dto';\n\nexport class UpdateTaskListDto extends PartialType(CreateTaskListDto) {\n  @IsInt()\n  public readonly id: number;\n\n  @IsString()\n  @MaxLength(255)\n  public readonly title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            UserPasswordInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accounts\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Account[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({length: 256, nullable: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({length: 32, nullable: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, Index, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { UserPasswordInterface } from '../../common/interfaces/user-password.interface';\nimport { UserRole } from '../../common/interfaces/user.interface';\nimport { Account } from './account.entity';\n\n@Entity('users')\nexport class User implements UserPasswordInterface {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Index()\n  @Column({ length: 256, nullable: true, unique: true })\n  email: string;\n\n  @Index()\n  @Column({ length: 32, nullable: true, unique: true })\n  username: string;\n\n  @Column({ length: 64, nullable: true, select: false })\n  password: string;\n\n  @Column({ default: 'user' })\n  role: UserRole;\n\n  @Column({ length: 64, nullable: true })\n  name: string;\n\n  @OneToMany(() => Account, (account) => account.user)\n  accounts: Account[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInterface.html":{"url":"interfaces/UserInterface.html","title":"interface - UserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/user.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface of a user\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accounts\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accounts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accounts:         AccountInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountInterface[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ArrayElement } from '../utilities';\nimport { AccountInterface } from './account.interface';\n\nexport const userRoles = ['user', 'moderator', 'admin'] as const;\n\nexport type UserRole = ArrayElement;\n\n/**\n * An interface of a user\n */\nexport interface UserInterface {\n  id: number;\n  name: string;\n  email: string;\n  username: string;\n  role: UserRole;\n  accounts: AccountInterface[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPasswordInterface.html":{"url":"interfaces/UserPasswordInterface.html","title":"interface - UserPasswordInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPasswordInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/user-password.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        UserInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserInterface } from './user.interface';\n\nexport interface UserPasswordInterface extends UserInterface {\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getProfileById\n                            \n                            \n                                    Async\n                                getProfileByUsername\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Auth()@Roles('moderator', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfileById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfileById(id: number, user?: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@OptionalAuth()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfileByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfileByUsername(username: string, user?: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('@:username')@OptionalAuth()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserInterface\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Auth } from '../auth/decorators/auth.decorator';\nimport { OptionalAuth } from '../auth/decorators/optional-auth.decorator';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { User } from '../auth/decorators/user.decorator';\nimport { UserInterface } from '../common/interfaces/user.interface';\nimport { UsersService } from './users.service';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @Auth()\n  @Roles('moderator', 'admin')\n  async getAll() {\n    const users = await this.usersService.findAllUsers();\n    return { users };\n  }\n\n  @Get(':id')\n  @OptionalAuth()\n  async getProfileById(@Param('id') id: number, @User() user?: UserInterface) {\n    if (user?.id !== id) {\n      user = await this.usersService.findUserById(id);\n    }\n    return { user };\n  }\n\n  @Get('@:username')\n  @OptionalAuth()\n  async getProfileByUsername(@Param('username') username: string, @User() user?: UserInterface) {\n    if (user?.username !== username) {\n      user = await this.usersService.findUserByUsername(username);\n    }\n    return { user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Account } from './entities/account.entity';\nimport { User } from './entities/user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Account])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAccount\n                            \n                            \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                findUserByUsername\n                            \n                            \n                                    Async\n                                removeAccount\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, accountsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(id: number, createAccountDto: CreateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAccount(type: string, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string, withPassword)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withPassword\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByUsername(username: string, withPassword)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    withPassword\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeAccount(type, id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUser(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(type, id, updateAccountDto: UpdateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Account } from './entities/account.entity';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n    @InjectRepository(Account)\n    private readonly accountsRepository: Repository,\n  ) {}\n\n  async createUser(createUserDto: CreateUserDto): Promise {\n    const user = this.usersRepository.create(createUserDto);\n    return this.usersRepository.save(user).catch(({ message }) => {\n      if (/unique/i.test(message) && /username/i.test(message)) {\n        throw new BadRequestException('This username is already taken.');\n      }\n      if (/unique/i.test(message) && /email/i.test(message)) {\n        throw new BadRequestException('This email is already used by another account.');\n      }\n      throw new BadRequestException(`Error while creating a user: ${message}`);\n    });\n  }\n\n  async findUserById(id: number): Promise {\n    const user = await this.usersRepository.findOne(id, { relations: ['accounts'] });\n    if (!user) {\n      throw new NotFoundException(`User #${id} was not found`);\n    }\n    return user;\n  }\n\n  async findUserByUsername(username: string, withPassword = false): Promise {\n    let query = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.accounts', 'account')\n      .where('user.username = :username', { username });\n    if (withPassword) {\n      query = query.addSelect('user.password');\n    }\n    const user = await query.getOne();\n    if (!user) {\n      throw new NotFoundException(`User \"${username}\" was not found`);\n    }\n    return user;\n  }\n\n  async findUserByEmail(email: string, withPassword = false) {\n    let query = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.accounts', 'account')\n      .where('user.email = :email', { email });\n    if (withPassword) {\n      query = query.addSelect('user.password');\n    }\n    const user = await query.getOne();\n    if (!user) {\n      throw new NotFoundException(`User with email ${email} was not found`);\n    }\n    return user;\n  }\n\n  async updateUser(id: number, updateUserDto: UpdateUserDto): Promise {\n    const user = await this.usersRepository.preload({\n      id,\n      ...updateUserDto,\n    });\n    if (!user) {\n      throw new NotFoundException(`User #${id} was not found`);\n    }\n    return this.usersRepository.save(user).catch(({ message }) => {\n      if (/unique/i.test(message) && /username/i.test(message)) {\n        throw new BadRequestException('This username is already taken.');\n      }\n      if (/unique/i.test(message) && /email/i.test(message)) {\n        throw new BadRequestException('This email is already used by another account.');\n      }\n      throw new BadRequestException(`Error while updating a user: ${message}`);\n    });\n  }\n\n  async removeUser(id: number): Promise {\n    const user = await this.findUserById(id);\n    return this.usersRepository.remove(user).catch(({ message }) => {\n      throw new BadRequestException(`Error while deleting a user: ${message}`);\n    });\n  }\n\n  async createAccount(id: number, createAccountDto: CreateAccountDto): Promise {\n    const user = await this.findUserById(id);\n    const account = this.accountsRepository.create({ ...createAccountDto, user });\n    this.logger.debug(`Create account: ${JSON.stringify(account)}`);\n    return this.accountsRepository.save(account).catch((error) => {\n      const { message } = error;\n      throw new BadRequestException(`Error while creating an account: ${message}`);\n    });\n  }\n\n  async updateAccount(\n    type: Account['type'],\n    id: Account['id'],\n    updateAccountDto: UpdateAccountDto,\n  ) {\n    return this.accountsRepository.update({ type, id }, updateAccountDto).catch((error) => {\n      const { message } = error;\n      throw new BadRequestException(`Error while updating an account: ${message}`);\n    });\n  }\n\n  async removeAccount(type: Account['type'], id: Account['id']): Promise {\n    return this.accountsRepository.delete({ type, id }).catch((error) => {\n      const { message } = error;\n      throw new BadRequestException(`Error while removing an account: ${message}`);\n    });\n  }\n\n  async findAllUsers(): Promise {\n    return this.usersRepository.find({ relations: ['accounts'] }).catch(({ message }) => {\n      throw new BadRequestException(`Error while finding the users: ${message}`);\n    });\n  }\n\n  async findAccount(type: string, id: string) {\n    const account = await this.accountsRepository.findOne({\n      where: { type, id },\n      relations: ['user'],\n    });\n    if (!account) {\n      throw new NotFoundException(`Account ${id}@${type} was not found`);\n    }\n    return account;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VkontakteAuthGuard.html":{"url":"injectables/VkontakteAuthGuard.html","title":"injectable - VkontakteAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  VkontakteAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/guards/vkontakte-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/guards/vkontakte-auth.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/vkontakte-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any, context: any, status?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/guards/vkontakte-auth.guard.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(VkontakteAuthGuard.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/guards/vkontakte-auth.guard.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { PUBLIC_KEY } from '../../decorators/allow-no-auth.decorator';\n\n@Injectable()\nexport class VkontakteAuthGuard extends AuthGuard('vkontakte') {\n  private readonly logger = new Logger(VkontakteAuthGuard.name);\n\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    return isPublic || super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: any, status?: any) {\n    const isAuthenticated = !err && user;\n    this.logger.verbose(\n      isAuthenticated ? '✔ Authenticated with Vkontakte' : '✖ Not authenticated with Vkontakte',\n    );\n    if (!isAuthenticated) {\n      throw err || new UnauthorizedException(info?.message);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VkontakteStrategy.html":{"url":"injectables/VkontakteStrategy.html","title":"injectable - VkontakteStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  VkontakteStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/strategies/vkontakte.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/strategies/vkontakte.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(req: Request, accessToken: string, refreshToken: string, profile: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/strategies/vkontakte.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(VkontakteStrategy.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/passport/strategies/vkontakte.strategy.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { Strategy } from 'passport-vkontakte';\nimport { UserInterface } from '../../../common/interfaces/user.interface';\nimport { AuthService } from '../../auth.service';\nimport { ConnectAccountDto } from '../../dto/connect-account.dto';\n\n@Injectable()\nexport class VkontakteStrategy extends PassportStrategy(Strategy, 'vkontakte') {\n  private readonly logger = new Logger(VkontakteStrategy.name);\n\n  constructor(private readonly authService: AuthService, readonly configService: ConfigService) {\n    super({\n      clientID: configService.get('VKONTAKTE_CLIENT_ID'),\n      clientSecret: configService.get('VKONTAKTE_CLIENT_SECRET'),\n      callbackURL: configService.get('VKONTAKTE_CALLBACK_URL'),\n      scope: configService.get('VKONTAKTE_SCOPE', '').split(','),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(\n    req: Request,\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n  ): Promise {\n    const { id, ...data } = profile;\n    const info: Partial = {\n      name: profile.displayName,\n    };\n    const connectAccountDto: ConnectAccountDto = {\n      type: 'vkontakte',\n      id,\n      info,\n      data: {\n        ...data,\n        accessToken,\n        refreshToken,\n      },\n    };\n    if (req.isAuthenticated()) {\n      const user = req.user as UserInterface;\n      return this.authService.connectAccount(connectAccountDto, user);\n    } else {\n      return this.authService.logInWithAccount(connectAccountDto);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/angular-universal.filter.ts\n            \n            class\n            AngularUniversalFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app-validation.pipe.ts\n            \n            class\n            AppValidationPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/decorators/allow-no-auth.decorator.ts\n            \n            variable\n            AllowNoAuth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/allow-no-auth.decorator.ts\n            \n            variable\n            PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/no-auth.decorator.ts\n            \n            variable\n            NoAuth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/optional-auth.decorator.ts\n            \n            variable\n            OptionalAuth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/connect-account.dto.ts\n            \n            class\n            ConnectAccountDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/dto/log-in.dto.ts\n            \n            class\n            LogInDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/dto/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/authorization.guard.ts\n            \n            guard\n            AuthorizationGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/no-authentication.guard.ts\n            \n            guard\n            NoAuthenticationGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/google-auth.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/optional-jwt-auth.guard.ts\n            \n            injectable\n            OptionalJwtAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/guards/vkontakte-auth.guard.ts\n            \n            injectable\n            VkontakteAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/passport/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/passport/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passport/strategies/vkontakte.strategy.ts\n            \n            injectable\n            VkontakteStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/account.interface.ts\n            \n            interface\n            AccountInterface\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/common/interfaces/account.interface.ts\n            \n            variable\n            accountTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interfaces/user-password.interface.ts\n            \n            interface\n            UserPasswordInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/user.interface.ts\n            \n            interface\n            UserInterface\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/common/interfaces/user.interface.ts\n            \n            variable\n            userRoles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/testing.ts\n            \n            function\n            createMockObj\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/testing.ts\n            \n            function\n            normalize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/utilities.ts\n            \n            function\n            omit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/utilities.ts\n            \n            function\n            pick\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task-list.dto.ts\n            \n            class\n            CreateTaskListDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-task-list.dto.ts\n            \n            class\n            UpdateTaskListDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/entities/task-list.entity.ts\n            \n            class\n            TaskList\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/entities/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/create-account.dto.ts\n            \n            class\n            CreateAccountDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-account.dto.ts\n            \n            class\n            UpdateAccountDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/account.entity.ts\n            \n            class\n            Account\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                test/config-service.mock.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/swagger.transformer.ts\n            \n            variable\n            factory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/swagger.transformer.ts\n            \n            variable\n            name\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/swagger.transformer.ts\n            \n            variable\n            version\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.0.2\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.1.0\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            helmet : ^4.6.0\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            passport-vkontakte : ^0.5.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sqlite3 : ^5.0.2\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.38\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createMockObj   (src/.../testing.ts)\n                        \n                        \n                            normalize   (src/.../testing.ts)\n                        \n                        \n                            omit   (src/.../utilities.ts)\n                        \n                        \n                            pick   (src/.../utilities.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/testing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockObj\n                        \n                    \n                \n            \n            \n                \ncreateMockObj(methodNames?, propertyNames?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    methodNames\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    propertyNames\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     jest.Mocked\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        normalize\n                        \n                    \n                \n            \n            \n                \nnormalize(collection)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collection\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/common/utilities.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        omit\n                        \n                    \n                \n            \n            \n                \nomit(obj: T, ...props: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    props\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Omit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pick\n                        \n                    \n                \n            \n            \n                \npick(obj: T, ...props: undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    props\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Pick\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nVkontakteStrategy\n\nVkontakteStrategy\n\nAuthModule -->\n\nVkontakteStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccountType   (src/.../account.interface.ts)\n                        \n                        \n                            ArrayElement   (src/.../utilities.ts)\n                        \n                        \n                            MethodNames   (src/.../utilities.ts)\n                        \n                        \n                            PropertyNames   (src/.../utilities.ts)\n                        \n                        \n                            UserRole   (src/.../user.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/interfaces/account.interface.ts\n    \n    \n        \n            \n                \n                    \n                    AccountType\n                \n            \n            \n                \n                            ArrayElement<>\n\n                \n            \n        \n    \n    src/common/utilities.ts\n    \n    \n        \n            \n                \n                    \n                    ArrayElement\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodNames\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PropertyNames\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/common/interfaces/user.interface.ts\n    \n    \n        \n            \n                \n                    \n                    UserRole\n                \n            \n            \n                \n                            ArrayElement<>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            accountTypes   (src/.../account.interface.ts)\n                        \n                        \n                            AllowNoAuth   (src/.../allow-no-auth.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            factory   (test/.../swagger.transformer.ts)\n                        \n                        \n                            mockedConfigService   (test/.../config-service.mock.ts)\n                        \n                        \n                            name   (test/.../swagger.transformer.ts)\n                        \n                        \n                            NoAuth   (src/.../no-auth.decorator.ts)\n                        \n                        \n                            OptionalAuth   (src/.../optional-auth.decorator.ts)\n                        \n                        \n                            PUBLIC_KEY   (src/.../allow-no-auth.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            userRoles   (src/.../user.interface.ts)\n                        \n                        \n                            version   (test/.../swagger.transformer.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/interfaces/account.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        accountTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ['facebook', 'google', 'vkontakte'] as const\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/allow-no-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AllowNoAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    Mark a route as public, so that it could be accessed even if\nauthentication is required by an outer context.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'public'\n                    \n                \n\n            \n                \n                    Metadata key used to mark routes as public\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...guards: Parameters) =>\n  applyDecorators(\n    UseGuards(JwtAuthGuard, AuthenticationGuard, AuthorizationGuard, ...guards),\n    ApiBearerAuth(),\n    ApiUnauthorizedResponse({ description: 'Unauthorized' }),\n  )\n                    \n                \n\n            \n                \n                    Require the user to be authenticated to access the route.\n\n                \n            \n\n        \n    \n\n    test/swagger.transformer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        factory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (cs: TsCompilerInstance) => {\n  return transformer.before(\n    { introspectComments: true },\n    cs.program, // \"cs.tsCompiler.program\" for older versions of Jest (\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'nestjs-swagger-transformer'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n\n\n        \n    \n\n    test/config-service.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (values: Record) => ({\n  get(key: string, value?: T) {\n    return values[key] ?? value;\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/no-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NoAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...guards: Parameters) =>\n  UseGuards(NoAuthenticationGuard, ...guards)\n                    \n                \n\n            \n                \n                    Require the user to be not authenticated to access the route.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/optional-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OptionalAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...guards: Parameters) =>\n  applyDecorators(UseGuards(OptionalJwtAuthGuard, ...guards), ApiSecurity({}), ApiBearerAuth())\n                    \n                \n\n            \n                \n                    Optionally allow the user to be authenticated to access the route.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: UserRole[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    Set the roles that have access to the route\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: keyof UserInterface, context: ExecutionContext) => {\n    const req = context.switchToHttp().getRequest();\n    const user = req.user as UserInterface | undefined;\n    return data ? user?.[data] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Get the user or its specific property from an express request object.\n\n                \n            \n\n        \n    \n\n    src/common/interfaces/user.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userRoles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ['user', 'moderator', 'admin'] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
